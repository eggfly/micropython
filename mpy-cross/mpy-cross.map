# Path: mpy-cross
# Arch: x86_64
# Object files:
[  0] linker synthesized
[  1] build/py/mpstate.o
[  2] build/py/nlr.o
[  3] build/py/nlrx64.o
[  4] build/py/malloc.o
[  5] build/py/gc.o
[  6] build/py/qstr.o
[  7] build/py/vstr.o
[  8] build/py/mpprint.o
[  9] build/py/unicode.o
[ 10] build/py/mpz.o
[ 11] build/py/reader.o
[ 12] build/py/lexer.o
[ 13] build/py/parse.o
[ 14] build/py/scope.o
[ 15] build/py/compile.o
[ 16] build/py/emitcommon.o
[ 17] build/py/emitbc.o
[ 18] build/py/asmbase.o
[ 19] build/py/asmx64.o
[ 20] build/py/emitnx64.o
[ 21] build/py/asmx86.o
[ 22] build/py/emitnx86.o
[ 23] build/py/asmthumb.o
[ 24] build/py/emitnthumb.o
[ 25] build/py/emitinlinethumb.o
[ 26] build/py/asmarm.o
[ 27] build/py/emitnarm.o
[ 28] build/py/asmxtensa.o
[ 29] build/py/emitnxtensa.o
[ 30] build/py/emitinlinextensa.o
[ 31] build/py/emitnxtensawin.o
[ 32] build/py/formatfloat.o
[ 33] build/py/parsenumbase.o
[ 34] build/py/parsenum.o
[ 35] build/py/emitglue.o
[ 36] build/py/persistentcode.o
[ 37] build/py/runtime.o
[ 38] build/py/nativeglue.o
[ 39] build/py/stackctrl.o
[ 40] build/py/argcheck.o
[ 41] build/py/warning.o
[ 42] build/py/map.o
[ 43] build/py/obj.o
[ 44] build/py/objarray.o
[ 45] build/py/objbool.o
[ 46] build/py/objboundmeth.o
[ 47] build/py/objcomplex.o
[ 48] build/py/objdict.o
[ 49] build/py/objenumerate.o
[ 50] build/py/objexcept.o
[ 51] build/py/objfilter.o
[ 52] build/py/objfloat.o
[ 53] build/py/objfun.o
[ 54] build/py/objgenerator.o
[ 55] build/py/objgetitemiter.o
[ 56] build/py/objint.o
[ 57] build/py/objint_mpz.o
[ 58] build/py/objlist.o
[ 59] build/py/objmap.o
[ 60] build/py/objmodule.o
[ 61] build/py/objobject.o
[ 62] build/py/objpolyiter.o
[ 63] build/py/objproperty.o
[ 64] build/py/objnone.o
[ 65] build/py/objrange.o
[ 66] build/py/objreversed.o
[ 67] build/py/objset.o
[ 68] build/py/objsingleton.o
[ 69] build/py/objslice.o
[ 70] build/py/objstr.o
[ 71] build/py/objstrunicode.o
[ 72] build/py/objtuple.o
[ 73] build/py/objtype.o
[ 74] build/py/objzip.o
[ 75] build/py/opmethods.o
[ 76] build/py/sequence.o
[ 77] build/py/stream.o
[ 78] build/py/binary.o
[ 79] build/py/builtinimport.o
[ 80] build/py/builtinevex.o
[ 81] build/py/modbuiltins.o
[ 82] build/py/modmicropython.o
[ 83] build/py/modstruct.o
[ 84] build/py/vm.o
[ 85] build/py/bc.o
[ 86] build/py/smallint.o
[ 87] build/main.o
[ 88] build/gccollect.o
[ 89] build/shared/runtime/gchelper_generic.o
[ 90] /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/lib/libm.tbd
# Sections:
# Address	Size    	Segment	Section
0x100000920	0x0004535D	__TEXT	__text
0x100045C7E	0x000000C0	__TEXT	__stubs
0x100045D40	0x000012C5	__TEXT	__const
0x100047005	0x00004FAF	__TEXT	__cstring
0x10004BFB4	0x00000048	__TEXT	__unwind_info
0x10004C000	0x000001C8	__DATA_CONST	__got
0x10004C1D0	0x00003D20	__DATA_CONST	__const
0x100050000	0x00000008	__DATA	__data
0x100050008	0x00000334	__DATA	__common
0x10005033C	0x00000004	__DATA	__bss
# Symbols:
# Address	Size    	File  Name
0x100000920	0x0000001A	[  2] _nlr_push_tail
0x10000093A	0x00000018	[  2] _nlr_pop
0x100000952	0x00000032	[  3] _nlr_push
0x100000984	0x00000053	[  3] _nlr_jump
0x1000009D7	0x00000029	[  4] _m_malloc
0x100000A00	0x0000000C	[  4] _m_malloc_maybe
0x100000A0C	0x0000000A	[  4] _m_malloc0
0x100000A16	0x0000002C	[  4] _m_realloc
0x100000A42	0x0000000A	[  4] _m_realloc_maybe
0x100000A4C	0x0000000A	[  4] _m_free
0x100000A60	0x00000090	[  5] _gc_init
0x100000AF0	0x00000020	[  5] _gc_is_locked
0x100000B10	0x00000040	[  5] _gc_collect_start
0x100000B50	0x000001C0	[  5] _gc_collect_root
0x100000D10	0x00000280	[  5] _gc_collect_end
0x100000F90	0x00000200	[  5] _gc_alloc
0x100001190	0x000000E0	[  5] _gc_free
0x100001270	0x00000360	[  5] _gc_realloc
0x1000015D0	0x00000040	[  6] _qstr_compute_hash
0x100001610	0x00000023	[  6] _qstr_init
0x100001633	0x000000E3	[  6] _qstr_find_strn
0x100001716	0x0000001F	[  6] _qstr_from_str
0x100001735	0x00000264	[  6] _qstr_from_strn
0x100001999	0x00000027	[  6] _qstr_hash
0x1000019C0	0x0000002E	[  6] _find_qstr
0x1000019EE	0x00000027	[  6] _qstr_len
0x100001A15	0x00000024	[  6] _qstr_str
0x100001A39	0x00000039	[  6] _qstr_data
0x100001A72	0x00000034	[  7] _vstr_init
0x100001AA6	0x0000003D	[  7] _vstr_init_len
0x100001AE3	0x00000044	[  7] _vstr_init_print
0x100001B27	0x0000003D	[  7] _vstr_add_strn
0x100001B64	0x00000027	[  7] _vstr_clear
0x100001B8B	0x00000049	[  7] _vstr_extend
0x100001BD4	0x0000004C	[  7] _vstr_ensure_extra
0x100001C20	0x00000036	[  7] _vstr_null_terminated_str
0x100001C56	0x00000030	[  7] _vstr_add_byte
0x100001C86	0x00000136	[  7] _vstr_add_char
0x100001DBC	0x00000048	[  7] _vstr_add_str
0x100001E04	0x00000017	[  7] _vstr_cut_tail_bytes
0x100001E1E	0x0000003A	[  8] _mp_print_str
0x100001E58	0x0000011F	[  8] _mp_print_strn
0x100001F77	0x00000468	[  8] _mp_print_mp_int
0x1000023DF	0x000000F6	[  8] _mp_print_float
0x1000024D5	0x0000009A	[  8] _mp_printf
0x10000256F	0x000005C9	[  8] _mp_vprintf
0x100002B38	0x0000017F	[  8] _mp_print_int
0x100002CB7	0x0000005C	[  9] _utf8_get_char
0x100002D13	0x00000017	[  9] _utf8_next_char
0x100002D2A	0x00000023	[  9] _utf8_ptr_to_index
0x100002D4D	0x0000002C	[  9] _utf8_charlen
0x100002D79	0x0000001E	[  9] _unichar_isspace
0x100002D97	0x0000001F	[  9] _unichar_isalpha
0x100002DB6	0x0000001E	[  9] _unichar_isdigit
0x100002DD4	0x0000001F	[  9] _unichar_isxdigit
0x100002DF3	0x0000001E	[  9] _unichar_isupper
0x100002E11	0x0000001E	[  9] _unichar_islower
0x100002E2F	0x0000001F	[  9] _unichar_tolower
0x100002E4E	0x0000001F	[  9] _unichar_toupper
0x100002E6D	0x00000019	[  9] _unichar_xdigit_value
0x100002E86	0x00000055	[  9] _utf8_check
0x100002EDB	0x00000014	[ 10] _mpz_init_zero
0x100002EEF	0x00000063	[ 10] _mpz_set_from_int
0x100002F52	0x00000024	[ 10] _mpz_init_fixed_from_int
0x100002F76	0x0000001A	[ 10] _mpz_deinit
0x100002F90	0x0000004B	[ 10] _mpz_set
0x100002FDB	0x0000005B	[ 10] _mpz_need_dig
0x100003036	0x0000006E	[ 10] _mpz_set_from_ll
0x1000030A4	0x0000017A	[ 10] _mpz_set_from_float
0x10000321E	0x0000011C	[ 10] _mpz_set_from_str
0x10000333A	0x000000DA	[ 10] _mpz_set_from_bytes
0x100003414	0x00000079	[ 10] _mpz_cmp
0x10000348D	0x00000020	[ 10] _mpz_abs_inpl
0x1000034AD	0x00000027	[ 10] _mpz_neg_inpl
0x1000034D4	0x000000AC	[ 10] _mpz_not_inpl
0x100003580	0x00000091	[ 10] _mpn_sub
0x100003611	0x00000084	[ 10] _mpn_add
0x100003695	0x0000010B	[ 10] _mpz_shl_inpl
0x1000037A0	0x00000138	[ 10] _mpz_shr_inpl
0x1000038D8	0x00000065	[ 10] _mpn_shr
0x10000393D	0x000000ED	[ 10] _mpz_add_inpl
0x100003A2A	0x00000103	[ 10] _mpz_sub_inpl
0x100003B2D	0x0000017A	[ 10] _mpz_and_inpl
0x100003CA7	0x00000188	[ 10] _mpz_or_inpl
0x100003E2F	0x00000145	[ 10] _mpz_xor_inpl
0x100003F74	0x00000179	[ 10] _mpz_mul_inpl
0x1000040ED	0x0000006E	[ 10] _mpz_clone
0x10000415B	0x00000026	[ 10] _mpz_free
0x100004181	0x00000136	[ 10] _mpz_pow_inpl
0x1000042B7	0x0000040F	[ 10] _mpz_divmod_inpl
0x1000046C6	0x0000003D	[ 10] _mpz_hash
0x100004703	0x0000004E	[ 10] _mpz_as_int_checked
0x100004751	0x000000D4	[ 10] _mpz_as_bytes
0x100004825	0x00000052	[ 10] _mpz_as_float
0x100004877	0x000001EC	[ 10] _mpz_as_str_inpl
0x100004A63	0x0000008A	[ 11] _mp_reader_new_file_from_fd
0x100004AED	0x00000060	[ 11] _mp_reader_posix_readbyte
0x100004B4D	0x00000024	[ 11] _mp_reader_posix_close
0x100004B71	0x0000003F	[ 11] _mp_reader_new_file
0x100004BB0	0x00000B24	[ 12] _mp_lexer_to_next
0x1000056D4	0x0000008D	[ 12] _skip_whitespace
0x100005761	0x0000006B	[ 12] _is_string_or_bytes
0x1000057CC	0x000000EC	[ 12] _next_char
0x1000058B8	0x000000C5	[ 12] _mp_lexer_new
0x100005980	0x00000047	[ 12] _mp_lexer_new_from_file
0x1000059CA	0x00000045	[ 12] _mp_lexer_free
0x100005A10	0x00000019	[ 13] _mp_parse_node_is_const_false
0x100005A29	0x0000001B	[ 13] _mp_parse_node_is_const_true
0x100005A44	0x00000052	[ 13] _mp_parse_node_get_int_maybe
0x100005A96	0x00000040	[ 13] _mp_parse_node_extract_list
0x100005AD6	0x00000962	[ 13] _mp_parse
0x100006438	0x0000007F	[ 13] _push_rule
0x1000064B7	0x00000191	[ 13] _push_result_token
0x100006648	0x0000002E	[ 13] _push_rule_from_arg
0x100006676	0x0000004F	[ 13] _push_result_node
0x1000066C5	0x00000025	[ 13] _pop_result
0x1000066EA	0x0000099E	[ 13] _push_result_rule
0x100007088	0x00000027	[ 13] _mp_parse_tree_clear
0x1000070AF	0x00000060	[ 13] _make_node_const_object_optimised
0x10000710F	0x000000B3	[ 13] _parser_alloc
0x1000071C2	0x00000060	[ 13] _mp_parse_node_is_const
0x100007222	0x0000010A	[ 13] _mp_parse_node_convert_to_obj
0x10000732C	0x00000027	[ 13] _peek_rule
0x100007353	0x00000111	[ 13] _build_tuple_from_stack
0x100007464	0x00000093	[ 14] _scope_new
0x1000074F7	0x00000020	[ 14] _scope_free
0x100007517	0x00000099	[ 14] _scope_find_or_add_id
0x1000075B0	0x00000024	[ 14] _scope_find
0x1000075D4	0x00000030	[ 14] _scope_find_global
0x100007604	0x000000AC	[ 14] _scope_check_to_close_over
0x1000076B0	0x0000078F	[ 15] _mp_compile_to_raw_code
0x100007E3F	0x00000488	[ 15] _compile_scope_inline_asm
0x1000082C7	0x00000552	[ 15] _compile_scope
0x10000881C	0x0000004A	[ 15] _compile_syntax_error
0x100008866	0x000000B9	[ 15] _compile_node
0x10000891F	0x00000084	[ 15] _apply_to_single_or_list
0x1000089A3	0x00000076	[ 15] _compile_viper_type_annotation
0x100008A19	0x00000038	[ 15] _compile_load_id
0x100008A51	0x00000157	[ 15] _compile_scope_comp_iter
0x100008BA8	0x00000033	[ 15] _compile_store_id
0x100008BDB	0x0000006F	[ 15] _compile_generic_all_nodes
0x100008C4A	0x000002C3	[ 15] _compile_decorated
0x100008F0D	0x00000027	[ 15] _compile_funcdef
0x100008F34	0x00000371	[ 15] _compile_expr_stmt
0x1000092A5	0x00000071	[ 15] _compile_generic_tuple
0x100009316	0x0000001A	[ 15] _compile_del_stmt
0x100009330	0x0000005E	[ 15] _compile_break_cont_stmt
0x10000938E	0x000000CE	[ 15] _compile_return_stmt
0x10000945C	0x00000026	[ 15] _compile_yield_stmt
0x100009482	0x0000006B	[ 15] _compile_raise_stmt
0x1000094ED	0x0000001A	[ 15] _compile_import_name
0x100009507	0x00000272	[ 15] _compile_import_from
0x100009779	0x0000012D	[ 15] _compile_global_nonlocal_stmt
0x1000098A6	0x000000B3	[ 15] _compile_assert_stmt
0x100009959	0x0000035A	[ 15] _compile_async_stmt
0x100009CB3	0x000001A7	[ 15] _compile_if_stmt
0x100009E5A	0x0000010F	[ 15] _compile_while_stmt
0x100009F69	0x000004AF	[ 15] _compile_for_stmt
0x10000A418	0x000000DD	[ 15] _compile_try_stmt
0x10000A4F5	0x00000049	[ 15] _compile_with_stmt
0x10000A53E	0x00000015	[ 15] _compile_namedexpr
0x10000A553	0x000000C7	[ 15] _compile_test_if_expr
0x10000A61A	0x0000007C	[ 15] _compile_lambdef
0x10000A696	0x000000AF	[ 15] _compile_or_and_test
0x10000A745	0x0000002E	[ 15] _compile_not_test_2
0x10000A773	0x000001D7	[ 15] _compile_comparison
0x10000A94A	0x00000011	[ 15] _compile_star_expr
0x10000A95B	0x00000070	[ 15] _compile_binary_op
0x10000A9CB	0x0000006A	[ 15] _compile_term
0x10000AA35	0x00000051	[ 15] _compile_factor_2
0x10000AA86	0x0000002A	[ 15] _compile_power
0x10000AAB0	0x00000044	[ 15] _compile_atom_expr_await
0x10000AAF4	0x000001DC	[ 15] _compile_atom_expr_normal
0x10000ACD0	0x0000006E	[ 15] _compile_atom_paren
0x10000AD3E	0x000000B8	[ 15] _compile_atom_bracket
0x10000ADF6	0x0000026B	[ 15] _compile_atom_brace
0x10000B061	0x00000012	[ 15] _compile_trailer_paren
0x10000B073	0x0000002B	[ 15] _compile_trailer_bracket
0x10000B09E	0x00000023	[ 15] _compile_trailer_period
0x10000B0C1	0x00000117	[ 15] _compile_subscript
0x10000B1D8	0x00000026	[ 15] _compile_dictorsetmaker_item
0x10000B1FE	0x00000027	[ 15] _compile_classdef
0x10000B225	0x0000009C	[ 15] _compile_yield_expr
0x10000B2C1	0x0000001D	[ 15] _compile_const_object
0x10000B2DE	0x00000087	[ 15] _compile_funcdef_helper
0x10000B365	0x000000CB	[ 15] _compile_classdef_helper
0x10000B430	0x000000B1	[ 15] _compile_funcdef_lambdef
0x10000B4E1	0x0000016B	[ 15] _compile_funcdef_lambdef_param
0x10000B64C	0x00000167	[ 15] _close_over_variables_etc
0x10000B7B3	0x00000230	[ 15] _compile_trailer_paren_helper
0x10000B9E3	0x0000007E	[ 15] _compile_namedexpr_helper
0x10000BA61	0x000000FB	[ 15] _compile_comprehension
0x10000BB5C	0x00000345	[ 15] _c_assign
0x10000BEA1	0x0000010D	[ 15] _c_assign_tuple
0x10000BFAE	0x0000022D	[ 15] _c_del_stmt
0x10000C1DB	0x00000033	[ 15] _compile_delete_id
0x10000C20E	0x000001E9	[ 15] _c_if_cond
0x10000C3F7	0x00000057	[ 15] _compile_dotted_as_name
0x10000C44E	0x0000021C	[ 15] _do_import_name
0x10000C66A	0x00000040	[ 15] _compile_decrease_except_level
0x10000C6AA	0x00000052	[ 15] _compile_yield_from
0x10000C6FC	0x0000040C	[ 15] _compile_async_with_stmt_helper
0x10000CB08	0x000000F0	[ 15] _compile_try_finally
0x10000CBF8	0x000002F3	[ 15] _compile_try_except
0x10000CEEB	0x0000013A	[ 15] _compile_with_stmt_helper
0x10000D025	0x00000190	[ 15] _compile_scope_func_lambda_param
0x10000D1B8	0x00000048	[ 16] _mp_emit_common_use_qstr
0x10000D200	0x00000057	[ 16] _mp_emit_common_use_const_obj
0x10000D257	0x0000009E	[ 16] _strictly_equal
0x10000D2F5	0x0000002C	[ 16] _mp_emit_common_get_id_for_modification
0x10000D321	0x000000BB	[ 16] _mp_emit_common_id_op
0x10000D3DC	0x0000001E	[ 17] _emit_bc_new
0x10000D3FA	0x00000025	[ 17] _emit_bc_set_max_num_labels
0x10000D41F	0x00000020	[ 17] _emit_bc_free
0x10000D43F	0x0000026D	[ 17] _mp_emit_bc_start_pass
0x10000D6AC	0x0000015C	[ 17] _mp_emit_bc_end_pass
0x10000D808	0x00000012	[ 17] _mp_emit_bc_last_emit_was_return_value
0x10000D81A	0x00000039	[ 17] _mp_emit_bc_adjust_stack_size
0x10000D853	0x00000129	[ 17] _mp_emit_bc_set_source_line
0x10000D97C	0x0000004B	[ 17] _mp_emit_bc_label_assign
0x10000D9C7	0x0000008C	[ 17] _mp_emit_bc_import
0x10000DA53	0x0000007B	[ 17] _mp_emit_bc_load_const_tok
0x10000DACE	0x0000011B	[ 17] _mp_emit_bc_load_const_small_int
0x10000DBE9	0x0000004A	[ 17] _mp_emit_bc_load_const_str
0x10000DC33	0x00000049	[ 17] _mp_emit_bc_load_const_obj
0x10000DC7C	0x0000002A	[ 17] _mp_emit_bc_load_null
0x10000DCA6	0x00000083	[ 17] _mp_emit_bc_load_local
0x10000DD29	0x0000005A	[ 17] _mp_emit_bc_load_global
0x10000DD83	0x00000060	[ 17] _mp_emit_bc_load_method
0x10000DDE3	0x0000002A	[ 17] _mp_emit_bc_load_build_class
0x10000DE0D	0x0000007D	[ 17] _mp_emit_bc_subscr
0x10000DE8A	0x00000027	[ 17] _mp_emit_bc_rot_three
0x10000DEB1	0x000000C5	[ 17] _mp_emit_bc_attr
0x10000DF76	0x00000027	[ 17] _mp_emit_bc_rot_two
0x10000DF9D	0x00000087	[ 17] _mp_emit_bc_store_local
0x10000E024	0x0000005C	[ 17] _mp_emit_bc_store_global
0x10000E080	0x0000004A	[ 17] _mp_emit_bc_delete_local
0x10000E0CA	0x00000057	[ 17] _mp_emit_bc_delete_global
0x10000E121	0x0000002A	[ 17] _mp_emit_bc_dup_top
0x10000E14B	0x0000002A	[ 17] _mp_emit_bc_dup_top_two
0x10000E175	0x0000002C	[ 17] _mp_emit_bc_pop_top
0x10000E1A1	0x00000014	[ 17] _mp_emit_bc_jump
0x10000E1B5	0x00000101	[ 17] _emit_write_bytecode_byte_label
0x10000E2B6	0x00000019	[ 17] _mp_emit_bc_pop_jump_if
0x10000E2CF	0x00000019	[ 17] _mp_emit_bc_jump_if_or_pop
0x10000E2E8	0x000000AA	[ 17] _mp_emit_bc_unwind_jump
0x10000E392	0x0000001D	[ 17] _mp_emit_bc_setup_block
0x10000E3AF	0x00000062	[ 17] _mp_emit_bc_with_cleanup
0x10000E411	0x0000002C	[ 17] _mp_emit_bc_end_finally
0x10000E43D	0x0000002E	[ 17] _mp_emit_bc_get_iter
0x10000E46B	0x00000017	[ 17] _mp_emit_bc_for_iter
0x10000E482	0x00000011	[ 17] _mp_emit_bc_for_iter_end
0x10000E493	0x00000014	[ 17] _mp_emit_bc_pop_except_jump
0x10000E4A7	0x0000002A	[ 17] _mp_emit_bc_unary_op
0x10000E4D1	0x00000070	[ 17] _mp_emit_bc_binary_op
0x10000E541	0x00000069	[ 17] _mp_emit_bc_build
0x10000E5AA	0x0000002C	[ 17] _mp_emit_bc_store_map
0x10000E5D6	0x00000067	[ 17] _mp_emit_bc_store_comp
0x10000E63D	0x0000003E	[ 17] _mp_emit_bc_unpack_sequence
0x10000E67B	0x00000045	[ 17] _mp_emit_bc_unpack_ex
0x10000E6C0	0x00000030	[ 17] _mp_emit_bc_make_function
0x10000E6F0	0x00000070	[ 17] _emit_write_bytecode_byte_child
0x10000E760	0x00000062	[ 17] _mp_emit_bc_make_closure
0x10000E7C2	0x0000001A	[ 17] _mp_emit_bc_call_function
0x10000E7DC	0x00000072	[ 17] _emit_bc_call_function_method_helper
0x10000E84E	0x0000001D	[ 17] _mp_emit_bc_call_method
0x10000E86B	0x00000030	[ 17] _mp_emit_bc_return_value
0x10000E89B	0x0000003E	[ 17] _mp_emit_bc_raise_varargs
0x10000E8D9	0x00000038	[ 17] _mp_emit_bc_yield
0x10000E911	0x0000000F	[ 17] _mp_emit_bc_start_except_handler
0x10000E920	0x00000011	[ 17] _mp_emit_bc_end_except_handler
0x10000E931	0x0000002C	[ 17] _emit_get_cur_to_write_code_info
0x10000E95D	0x00000030	[ 17] _emit_get_cur_to_write_bytecode
0x10000E98D	0x00000025	[ 18] _mp_asm_base_init
0x10000E9B2	0x00000025	[ 18] _mp_asm_base_deinit
0x10000E9D7	0x00000059	[ 18] _mp_asm_base_start_pass
0x10000EA30	0x00000029	[ 18] _mp_asm_base_get_cur_to_write_bytes
0x10000EA59	0x0000003E	[ 18] _mp_asm_base_label_assign
0x10000EA97	0x00000015	[ 18] _mp_asm_base_align
0x10000EAAC	0x00000041	[ 18] _mp_asm_base_data
0x10000EAED	0x0000000F	[ 19] _asm_x64_mov_r64_r64
0x10000EAFC	0x00000054	[ 19] _asm_x64_generic_r64_r64
0x10000EB50	0x0000007C	[ 19] _asm_x64_mov_r8_to_mem8
0x10000EBCC	0x000000D8	[ 19] _asm_x64_write_r64_disp
0x10000ECA4	0x00000087	[ 19] _asm_x64_mov_r16_to_mem16
0x10000ED2B	0x0000007C	[ 19] _asm_x64_mov_r32_to_mem32
0x10000EDA7	0x0000005B	[ 19] _asm_x64_mov_r64_to_mem64
0x10000EE02	0x00000087	[ 19] _asm_x64_mov_mem8_to_r64zx
0x10000EE89	0x00000087	[ 19] _asm_x64_mov_mem16_to_r64zx
0x10000EF10	0x0000007C	[ 19] _asm_x64_mov_mem32_to_r64zx
0x10000EF8C	0x0000005B	[ 19] _asm_x64_mov_mem64_to_r64
0x10000EFE7	0x00000075	[ 19] _asm_x64_mov_i32_to_r64
0x10000F05C	0x0000005A	[ 19] _asm_x64_mov_i64_to_r64
0x10000F0B6	0x00000019	[ 19] _asm_x64_mov_i64_to_r64_optimised
0x10000F0CF	0x0000000F	[ 19] _asm_x64_and_r64_r64
0x10000F0DE	0x0000000F	[ 19] _asm_x64_or_r64_r64
0x10000F0ED	0x0000000F	[ 19] _asm_x64_xor_r64_r64
0x10000F0FC	0x00000038	[ 19] _asm_x64_shl_r64_cl
0x10000F134	0x00000038	[ 19] _asm_x64_shr_r64_cl
0x10000F16C	0x00000035	[ 19] _asm_x64_sar_r64_cl
0x10000F1A1	0x0000000F	[ 19] _asm_x64_add_r64_r64
0x10000F1B0	0x0000000F	[ 19] _asm_x64_sub_r64_r64
0x10000F1BF	0x0000006A	[ 19] _asm_x64_mul_r64_r64
0x10000F229	0x00000015	[ 19] _asm_x64_cmp_r64_with_r64
0x10000F23E	0x00000044	[ 19] _asm_x64_test_r8_with_r8
0x10000F282	0x00000015	[ 19] _asm_x64_test_r64_with_r64
0x10000F297	0x0000003E	[ 19] _asm_x64_setcc_r8
0x10000F2D5	0x00000034	[ 19] _asm_x64_jmp_reg
0x10000F309	0x0000009B	[ 19] _asm_x64_jmp_label
0x10000F3A4	0x000000A9	[ 19] _asm_x64_jcc_label
0x10000F44D	0x00000088	[ 19] _asm_x64_entry
0x10000F4D5	0x00000076	[ 19] _asm_x64_sub_r64_i32
0x10000F54B	0x0000008A	[ 19] _asm_x64_exit
0x10000F5D5	0x00000018	[ 19] _asm_x64_mov_local_to_r64
0x10000F5ED	0x00000016	[ 19] _asm_x64_mov_r64_to_local
0x10000F603	0x00000094	[ 19] _asm_x64_mov_local_addr_to_r64
0x10000F697	0x00000077	[ 19] _asm_x64_mov_reg_pcrel
0x10000F70E	0x0000004B	[ 19] _asm_x64_call_ind
0x10000F75C	0x0000008A	[ 20] _emit_native_x64_new
0x10000F7E6	0x0000004C	[ 20] _emit_native_x64_free
0x10000F832	0x00000842	[ 20] _emit_native_start_pass
0x100010074	0x000004A8	[ 20] _emit_native_end_pass
0x10001051C	0x0000000C	[ 20] _emit_native_last_emit_was_return_value
0x100010528	0x00000060	[ 20] _emit_native_adjust_stack_size
0x100010588	0x00000006	[ 20] _emit_native_set_source_line
0x10001058E	0x0000009A	[ 20] _emit_native_load_local
0x100010628	0x00000074	[ 20] _emit_native_load_global
0x10001069C	0x000000D2	[ 20] _emit_native_store_local
0x10001076E	0x0000012C	[ 20] _emit_native_store_global
0x10001089A	0x00000043	[ 20] _emit_native_delete_local
0x1000108DD	0x0000001F	[ 20] _emit_native_delete_global
0x1000108FC	0x000000CD	[ 20] _emit_native_label_assign
0x1000109C9	0x00000175	[ 20] _emit_native_import
0x100010B3E	0x0000003E	[ 20] _emit_native_load_const_tok
0x100010B7C	0x00000019	[ 20] _emit_native_load_const_small_int
0x100010B95	0x0000003D	[ 20] _emit_native_load_const_str
0x100010BD2	0x00000038	[ 20] _emit_native_load_const_obj
0x100010C0A	0x00000015	[ 20] _emit_native_load_null
0x100010C1F	0x000000B5	[ 20] _emit_native_load_method
0x100010CD4	0x0000003A	[ 20] _emit_native_load_build_class
0x100010D0E	0x00000B6A	[ 20] _emit_native_subscr
0x100011878	0x0000016C	[ 20] _emit_native_attr
0x1000119E4	0x00000063	[ 20] _emit_native_dup_top
0x100011A47	0x000000B2	[ 20] _emit_native_dup_top_two
0x100011AF9	0x00000018	[ 20] _emit_native_pop_top
0x100011B11	0x00000092	[ 20] _emit_native_rot_two
0x100011BA3	0x000000DC	[ 20] _emit_native_rot_three
0x100011C7F	0x0000002C	[ 20] _emit_native_jump
0x100011CAB	0x0000000F	[ 20] _emit_native_pop_jump_if
0x100011CBA	0x0000000C	[ 20] _emit_native_jump_if_or_pop
0x100011CC6	0x0000014B	[ 20] _emit_native_unwind_jump
0x100011E11	0x000001CA	[ 20] _emit_native_setup_block
0x100011FDB	0x00000234	[ 20] _emit_native_with_cleanup
0x10001220F	0x00000128	[ 20] _emit_native_end_finally
0x100012337	0x000000CB	[ 20] _emit_native_get_iter
0x100012402	0x0000007F	[ 20] _emit_native_for_iter
0x100012481	0x00000018	[ 20] _emit_native_for_iter_end
0x100012499	0x00000062	[ 20] _emit_native_pop_except_jump
0x1000124FB	0x000000AF	[ 20] _emit_native_unary_op
0x1000125AA	0x00000542	[ 20] _emit_native_binary_op
0x100012AEC	0x000001E4	[ 20] _emit_native_build
0x100012CD0	0x000000E9	[ 20] _emit_native_store_map
0x100012DB9	0x00000174	[ 20] _emit_native_store_comp
0x100012F2D	0x00000076	[ 20] _emit_native_unpack_sequence
0x100012FA3	0x0000008C	[ 20] _emit_native_unpack_ex
0x10001302F	0x000000B6	[ 20] _emit_native_make_function
0x1000130E5	0x0000013F	[ 20] _emit_native_make_closure
0x100013224	0x000001F0	[ 20] _emit_native_call_function
0x100013414	0x00000089	[ 20] _emit_native_call_method
0x10001349D	0x0000020E	[ 20] _emit_native_return_value
0x1000136AB	0x0000008A	[ 20] _emit_native_raise_varargs
0x100013735	0x00000296	[ 20] _emit_native_yield
0x1000139CB	0x00000038	[ 20] _emit_native_start_except_handler
0x100013A03	0x00000011	[ 20] _emit_native_end_except_handler
0x100013A14	0x00000047	[ 20] _emit_call_with_imm_arg
0x100013A5B	0x00000034	[ 20] _emit_native_mov_state_reg
0x100013A8F	0x0000039F	[ 20] _emit_native_global_exc_entry
0x100013E2E	0x0000005F	[ 20] _need_reg_all
0x100013E8D	0x00000032	[ 20] _emit_native_mov_reg_state
0x100013EBF	0x0000003C	[ 20] _ensure_extra_stack
0x100013EFB	0x0000003B	[ 20] _adjust_stack
0x100013F36	0x000000AC	[ 20] _emit_native_load_fast
0x100013FE2	0x00000051	[ 20] _emit_post_push_reg
0x100014033	0x0000007C	[ 20] _need_reg_single
0x1000140AF	0x0000007E	[ 20] _emit_pre_pop_reg_flexible
0x10001412D	0x000000A6	[ 20] _emit_access_stack
0x1000141D3	0x000000BD	[ 20] _load_reg_stack_imm
0x100014290	0x00000051	[ 20] _emit_post_push_imm
0x1000142E1	0x00000065	[ 20] _emit_call_with_qstr_arg
0x100014346	0x00000115	[ 20] _emit_native_store_fast
0x10001445B	0x0000007D	[ 20] _need_stack_settled
0x1000144D8	0x00000088	[ 20] _emit_native_leave_exc_stack
0x100014560	0x00000074	[ 20] _emit_load_reg_with_object
0x1000145D4	0x0000015F	[ 20] _emit_get_stack_pointer_to_reg_for_pop
0x100014733	0x0000007D	[ 20] _emit_get_stack_pointer_to_reg_for_push
0x1000147B0	0x00000055	[ 20] _emit_native_mov_reg_state_addr
0x100014805	0x000001AC	[ 20] _emit_native_jump_helper
0x1000149B1	0x0000009A	[ 20] _emit_native_push_exc_stack
0x100014A4B	0x0000005D	[ 20] _emit_call_with_2_imm_args
0x100014AA8	0x00000073	[ 20] _emit_load_reg_with_child
0x100014B1B	0x0000006D	[ 20] _emit_fold_stack_top
0x100014B88	0x0000002F	[ 21] _asm_x86_mov_r32_r32
0x100014BB7	0x00000042	[ 21] _asm_x86_mov_r8_to_mem8
0x100014BF9	0x000000D5	[ 21] _asm_x86_write_r32_disp
0x100014CCE	0x00000044	[ 21] _asm_x86_mov_r16_to_mem16
0x100014D12	0x00000042	[ 21] _asm_x86_mov_r32_to_mem32
0x100014D54	0x00000044	[ 21] _asm_x86_mov_mem8_to_r32zx
0x100014D98	0x00000044	[ 21] _asm_x86_mov_mem16_to_r32zx
0x100014DDC	0x00000042	[ 21] _asm_x86_mov_mem32_to_r32
0x100014E1E	0x00000050	[ 21] _asm_x86_mov_i32_to_r32
0x100014E6E	0x0000002F	[ 21] _asm_x86_and_r32_r32
0x100014E9D	0x0000002F	[ 21] _asm_x86_or_r32_r32
0x100014ECC	0x0000002F	[ 21] _asm_x86_xor_r32_r32
0x100014EFB	0x00000027	[ 21] _asm_x86_shl_r32_cl
0x100014F22	0x00000027	[ 21] _asm_x86_shr_r32_cl
0x100014F49	0x00000027	[ 21] _asm_x86_sar_r32_cl
0x100014F70	0x0000002F	[ 21] _asm_x86_add_r32_r32
0x100014F9F	0x0000002F	[ 21] _asm_x86_sub_r32_r32
0x100014FCE	0x00000031	[ 21] _asm_x86_mul_r32_r32
0x100014FFF	0x0000002F	[ 21] _asm_x86_cmp_r32_with_r32
0x10001502E	0x0000002F	[ 21] _asm_x86_test_r8_with_r8
0x10001505D	0x0000002F	[ 21] _asm_x86_test_r32_with_r32
0x10001508C	0x00000032	[ 21] _asm_x86_setcc_r8
0x1000150BE	0x00000027	[ 21] _asm_x86_jmp_reg
0x1000150E5	0x0000009B	[ 21] _asm_x86_jmp_label
0x100015180	0x000000A9	[ 21] _asm_x86_jcc_label
0x100015229	0x00000084	[ 21] _asm_x86_entry
0x1000152AD	0x0000006E	[ 21] _asm_x86_sub_r32_i32
0x10001531B	0x00000086	[ 21] _asm_x86_exit
0x1000153A1	0x0000001B	[ 21] _asm_x86_mov_arg_to_r32
0x1000153BC	0x00000018	[ 21] _asm_x86_mov_local_to_r32
0x1000153D4	0x00000016	[ 21] _asm_x86_mov_r32_to_local
0x1000153EA	0x00000072	[ 21] _asm_x86_mov_local_addr_to_r32
0x10001545C	0x000000AB	[ 21] _asm_x86_mov_reg_pcrel
0x100015507	0x00000163	[ 21] _asm_x86_call_ind
0x10001566C	0x0000008A	[ 22] _emit_native_x86_new
0x1000156F6	0x0000004C	[ 22] _emit_native_x86_free
0x100015742	0x0000088D	[ 22] _emit_native_start_pass
0x100015FCF	0x000004A6	[ 22] _emit_native_end_pass
0x100016475	0x0000000C	[ 22] _emit_native_last_emit_was_return_value
0x100016481	0x00000060	[ 22] _emit_native_adjust_stack_size
0x1000164E1	0x00000006	[ 22] _emit_native_set_source_line
0x1000164E7	0x0000009A	[ 22] _emit_native_load_local
0x100016581	0x00000071	[ 22] _emit_native_load_global
0x1000165F2	0x000000D2	[ 22] _emit_native_store_local
0x1000166C4	0x00000126	[ 22] _emit_native_store_global
0x1000167EA	0x00000043	[ 22] _emit_native_delete_local
0x10001682D	0x0000001C	[ 22] _emit_native_delete_global
0x100016849	0x000000CD	[ 22] _emit_native_label_assign
0x100016916	0x00000171	[ 22] _emit_native_import
0x100016A87	0x0000003E	[ 22] _emit_native_load_const_tok
0x100016AC5	0x00000019	[ 22] _emit_native_load_const_small_int
0x100016ADE	0x0000003D	[ 22] _emit_native_load_const_str
0x100016B1B	0x00000038	[ 22] _emit_native_load_const_obj
0x100016B53	0x00000015	[ 22] _emit_native_load_null
0x100016B68	0x000000AF	[ 22] _emit_native_load_method
0x100016C17	0x0000003C	[ 22] _emit_native_load_build_class
0x100016C53	0x00000B15	[ 22] _emit_native_subscr
0x100017768	0x00000163	[ 22] _emit_native_attr
0x1000178CB	0x00000063	[ 22] _emit_native_dup_top
0x10001792E	0x000000B2	[ 22] _emit_native_dup_top_two
0x1000179E0	0x00000018	[ 22] _emit_native_pop_top
0x1000179F8	0x00000092	[ 22] _emit_native_rot_two
0x100017A8A	0x000000DC	[ 22] _emit_native_rot_three
0x100017B66	0x0000002C	[ 22] _emit_native_jump
0x100017B92	0x0000000F	[ 22] _emit_native_pop_jump_if
0x100017BA1	0x0000000C	[ 22] _emit_native_jump_if_or_pop
0x100017BAD	0x0000014B	[ 22] _emit_native_unwind_jump
0x100017CF8	0x000001C4	[ 22] _emit_native_setup_block
0x100017EBC	0x00000217	[ 22] _emit_native_with_cleanup
0x1000180D3	0x0000012A	[ 22] _emit_native_end_finally
0x1000181FD	0x000000D2	[ 22] _emit_native_get_iter
0x1000182CF	0x00000081	[ 22] _emit_native_for_iter
0x100018350	0x00000018	[ 22] _emit_native_for_iter_end
0x100018368	0x00000062	[ 22] _emit_native_pop_except_jump
0x1000183CA	0x000000AC	[ 22] _emit_native_unary_op
0x100018476	0x0000053E	[ 22] _emit_native_binary_op
0x1000189B4	0x000001E0	[ 22] _emit_native_build
0x100018B94	0x000000EB	[ 22] _emit_native_store_map
0x100018C7F	0x0000017D	[ 22] _emit_native_store_comp
0x100018DFC	0x00000073	[ 22] _emit_native_unpack_sequence
0x100018E6F	0x00000089	[ 22] _emit_native_unpack_ex
0x100018EF8	0x000000BB	[ 22] _emit_native_make_function
0x100018FB3	0x00000136	[ 22] _emit_native_make_closure
0x1000190E9	0x000001EA	[ 22] _emit_native_call_function
0x1000192D3	0x00000089	[ 22] _emit_native_call_method
0x10001935C	0x000001F7	[ 22] _emit_native_return_value
0x100019553	0x0000008C	[ 22] _emit_native_raise_varargs
0x1000195DF	0x0000029A	[ 22] _emit_native_yield
0x100019879	0x00000038	[ 22] _emit_native_start_except_handler
0x1000198B1	0x00000011	[ 22] _emit_native_end_except_handler
0x1000198C2	0x00000052	[ 22] _emit_call_with_imm_arg
0x100019914	0x00000034	[ 22] _emit_native_mov_state_reg
0x100019948	0x0000039E	[ 22] _emit_native_global_exc_entry
0x100019CE6	0x0000005F	[ 22] _need_reg_all
0x100019D45	0x00000032	[ 22] _emit_native_mov_reg_state
0x100019D77	0x0000003C	[ 22] _ensure_extra_stack
0x100019DB3	0x0000003B	[ 22] _adjust_stack
0x100019DEE	0x000000AC	[ 22] _emit_native_load_fast
0x100019E9A	0x00000051	[ 22] _emit_post_push_reg
0x100019EEB	0x0000007C	[ 22] _need_reg_single
0x100019F67	0x0000007E	[ 22] _emit_pre_pop_reg_flexible
0x100019FE5	0x000000A6	[ 22] _emit_access_stack
0x10001A08B	0x000000B8	[ 22] _load_reg_stack_imm
0x10001A143	0x00000051	[ 22] _emit_post_push_imm
0x10001A194	0x00000070	[ 22] _emit_call_with_qstr_arg
0x10001A204	0x00000115	[ 22] _emit_native_store_fast
0x10001A319	0x0000007D	[ 22] _need_stack_settled
0x10001A396	0x00000088	[ 22] _emit_native_leave_exc_stack
0x10001A41E	0x00000074	[ 22] _emit_load_reg_with_object
0x10001A492	0x0000015C	[ 22] _emit_get_stack_pointer_to_reg_for_pop
0x10001A5EE	0x0000007D	[ 22] _emit_get_stack_pointer_to_reg_for_push
0x10001A66B	0x00000054	[ 22] _emit_native_mov_reg_state_addr
0x10001A6BF	0x000001AE	[ 22] _emit_native_jump_helper
0x10001A86D	0x0000009A	[ 22] _emit_native_push_exc_stack
0x10001A907	0x00000065	[ 22] _emit_call_with_2_imm_args
0x10001A96C	0x00000070	[ 22] _emit_load_reg_with_child
0x10001A9DC	0x0000006A	[ 22] _emit_fold_stack_top
0x10001AA46	0x000001B9	[ 23] _asm_thumb_entry
0x10001ABFF	0x0000002E	[ 23] _asm_thumb_op32
0x10001AC2D	0x00000021	[ 23] _asm_thumb_op16
0x10001AC4E	0x000000C3	[ 23] _asm_thumb_exit
0x10001AD11	0x0000004D	[ 23] _asm_thumb_format_4
0x10001AD5E	0x00000052	[ 23] _asm_thumb_mov_reg_reg
0x10001ADB0	0x0000006D	[ 23] _asm_thumb_mov_reg_i16
0x10001AE1D	0x00000074	[ 23] _asm_thumb_b_n_label
0x10001AE91	0x0000010C	[ 23] _asm_thumb_bcc_nw_label
0x10001AF9D	0x0000008B	[ 23] _asm_thumb_bl_label
0x10001B028	0x00000116	[ 23] _asm_thumb_mov_reg_i32
0x10001B13E	0x00000179	[ 23] _asm_thumb_mov_reg_i32_optimised
0x10001B2B7	0x00000087	[ 23] _asm_thumb_mov_rlo_i16
0x10001B33E	0x0000004A	[ 23] _asm_thumb_mov_local_reg
0x10001B388	0x00000028	[ 23] _asm_thumb_mov_local_check
0x10001B3B0	0x0000004C	[ 23] _asm_thumb_mov_reg_local
0x10001B3FC	0x00000042	[ 23] _asm_thumb_mov_reg_local_addr
0x10001B43E	0x000000C5	[ 23] _asm_thumb_mov_reg_pcrel
0x10001B503	0x000000F4	[ 23] _asm_thumb_ldr_reg_reg_i12_optimised
0x10001B5F7	0x000001E3	[ 23] _asm_thumb_add_reg_reg_offset
0x10001B7DA	0x000000F3	[ 23] _asm_thumb_ldrh_reg_reg_i12_optimised
0x10001B8CD	0x00000110	[ 23] _asm_thumb_b_label
0x10001B9DD	0x00000133	[ 23] _asm_thumb_bcc_label
0x10001BB10	0x00000044	[ 23] _asm_thumb_bcc_rel9
0x10001BB54	0x00000048	[ 23] _asm_thumb_b_rel12
0x10001BB9C	0x0000003D	[ 23] _asm_thumb_bl_ind
0x10001BBDC	0x0000008A	[ 24] _emit_native_thumb_new
0x10001BC66	0x0000004C	[ 24] _emit_native_thumb_free
0x10001BCB2	0x000007EE	[ 24] _emit_native_start_pass
0x10001C4A0	0x000004A3	[ 24] _emit_native_end_pass
0x10001C943	0x0000000C	[ 24] _emit_native_last_emit_was_return_value
0x10001C94F	0x00000060	[ 24] _emit_native_adjust_stack_size
0x10001C9AF	0x00000006	[ 24] _emit_native_set_source_line
0x10001C9B5	0x0000009A	[ 24] _emit_native_load_local
0x10001CA4F	0x00000071	[ 24] _emit_native_load_global
0x10001CAC0	0x000000DA	[ 24] _emit_native_store_local
0x10001CB9A	0x00000126	[ 24] _emit_native_store_global
0x10001CCC0	0x00000043	[ 24] _emit_native_delete_local
0x10001CD03	0x0000001C	[ 24] _emit_native_delete_global
0x10001CD1F	0x000000CD	[ 24] _emit_native_label_assign
0x10001CDEC	0x0000016F	[ 24] _emit_native_import
0x10001CF5B	0x0000003E	[ 24] _emit_native_load_const_tok
0x10001CF99	0x00000019	[ 24] _emit_native_load_const_small_int
0x10001CFB2	0x0000003D	[ 24] _emit_native_load_const_str
0x10001CFEF	0x00000038	[ 24] _emit_native_load_const_obj
0x10001D027	0x00000015	[ 24] _emit_native_load_null
0x10001D03C	0x000000AF	[ 24] _emit_native_load_method
0x10001D0EB	0x0000003D	[ 24] _emit_native_load_build_class
0x10001D128	0x00000BFC	[ 24] _emit_native_subscr
0x10001DD24	0x00000168	[ 24] _emit_native_attr
0x10001DE8C	0x00000063	[ 24] _emit_native_dup_top
0x10001DEEF	0x000000B2	[ 24] _emit_native_dup_top_two
0x10001DFA1	0x00000018	[ 24] _emit_native_pop_top
0x10001DFB9	0x00000092	[ 24] _emit_native_rot_two
0x10001E04B	0x000000DC	[ 24] _emit_native_rot_three
0x10001E127	0x0000002C	[ 24] _emit_native_jump
0x10001E153	0x0000000F	[ 24] _emit_native_pop_jump_if
0x10001E162	0x0000000C	[ 24] _emit_native_jump_if_or_pop
0x10001E16E	0x0000014F	[ 24] _emit_native_unwind_jump
0x10001E2BD	0x000001C4	[ 24] _emit_native_setup_block
0x10001E481	0x00000211	[ 24] _emit_native_with_cleanup
0x10001E692	0x0000012A	[ 24] _emit_native_end_finally
0x10001E7BC	0x000000CE	[ 24] _emit_native_get_iter
0x10001E88A	0x0000007D	[ 24] _emit_native_for_iter
0x10001E907	0x00000018	[ 24] _emit_native_for_iter_end
0x10001E91F	0x00000062	[ 24] _emit_native_pop_except_jump
0x10001E981	0x000000AC	[ 24] _emit_native_unary_op
0x10001EA2D	0x0000053F	[ 24] _emit_native_binary_op
0x10001EF6C	0x000001DE	[ 24] _emit_native_build
0x10001F14A	0x000000E9	[ 24] _emit_native_store_map
0x10001F233	0x00000174	[ 24] _emit_native_store_comp
0x10001F3A7	0x00000073	[ 24] _emit_native_unpack_sequence
0x10001F41A	0x00000089	[ 24] _emit_native_unpack_ex
0x10001F4A3	0x000000B9	[ 24] _emit_native_make_function
0x10001F55C	0x00000132	[ 24] _emit_native_make_closure
0x10001F68E	0x000001EA	[ 24] _emit_native_call_function
0x10001F878	0x00000089	[ 24] _emit_native_call_method
0x10001F901	0x000001F5	[ 24] _emit_native_return_value
0x10001FAF6	0x0000008A	[ 24] _emit_native_raise_varargs
0x10001FB80	0x00000297	[ 24] _emit_native_yield
0x10001FE17	0x00000038	[ 24] _emit_native_start_except_handler
0x10001FE4F	0x00000011	[ 24] _emit_native_end_except_handler
0x10001FE60	0x0000004A	[ 24] _emit_call_with_imm_arg
0x10001FEAA	0x00000032	[ 24] _emit_native_mov_state_reg
0x10001FEDC	0x00000390	[ 24] _emit_native_global_exc_entry
0x10002026C	0x0000005F	[ 24] _need_reg_all
0x1000202CB	0x0000002D	[ 24] _emit_native_mov_reg_state
0x1000202F8	0x0000003C	[ 24] _ensure_extra_stack
0x100020334	0x0000003B	[ 24] _adjust_stack
0x10002036F	0x000000AC	[ 24] _emit_native_load_fast
0x10002041B	0x00000051	[ 24] _emit_post_push_reg
0x10002046C	0x0000007C	[ 24] _need_reg_single
0x1000204E8	0x0000007E	[ 24] _emit_pre_pop_reg_flexible
0x100020566	0x000000A6	[ 24] _emit_access_stack
0x10002060C	0x000000A9	[ 24] _load_reg_stack_imm
0x1000206B5	0x00000051	[ 24] _emit_post_push_imm
0x100020706	0x00000066	[ 24] _emit_call_with_qstr_arg
0x10002076C	0x00000115	[ 24] _emit_native_store_fast
0x100020881	0x0000007D	[ 24] _need_stack_settled
0x1000208FE	0x0000008D	[ 24] _emit_native_leave_exc_stack
0x10002098B	0x00000070	[ 24] _emit_load_reg_with_object
0x1000209FB	0x0000015C	[ 24] _emit_get_stack_pointer_to_reg_for_pop
0x100020B57	0x0000007D	[ 24] _emit_get_stack_pointer_to_reg_for_push
0x100020BD4	0x00000059	[ 24] _emit_native_mov_reg_state_addr
0x100020C2D	0x000001A8	[ 24] _emit_native_jump_helper
0x100020DD5	0x0000009B	[ 24] _emit_native_push_exc_stack
0x100020E70	0x0000005D	[ 24] _emit_call_with_2_imm_args
0x100020ECD	0x0000006C	[ 24] _emit_load_reg_with_child
0x100020F39	0x0000006A	[ 24] _emit_fold_stack_top
0x100020FA4	0x00000054	[ 25] _emit_inline_thumb_new
0x100020FF8	0x0000002A	[ 25] _emit_inline_thumb_free
0x100021022	0x00000050	[ 25] _emit_inline_thumb_start_pass
0x100021072	0x0000000A	[ 25] _emit_inline_thumb_end_pass
0x10002107C	0x000000BB	[ 25] _emit_inline_thumb_count_params
0x100021137	0x00000048	[ 25] _emit_inline_thumb_label
0x10002117F	0x0000119D	[ 25] _emit_inline_thumb_op
0x10002231C	0x000000AD	[ 25] _get_arg_vfpreg
0x1000223C9	0x000000C6	[ 25] _get_arg_reg
0x10002248F	0x00000078	[ 25] _get_arg_addr
0x100022507	0x0000007E	[ 25] _get_arg_i
0x100022585	0x00000077	[ 25] _get_arg_label
0x1000225FC	0x00000162	[ 25] _get_arg_reglist
0x10002275E	0x0000007A	[ 26] _asm_arm_entry
0x1000227D8	0x00000063	[ 26] _asm_arm_exit
0x10002283B	0x0000002E	[ 26] _asm_arm_mov_reg_reg
0x100022869	0x0000006B	[ 26] _asm_arm_mov_reg_i32
0x1000228D4	0x00000071	[ 26] _asm_arm_mov_reg_i32_optimised
0x100022945	0x00000032	[ 26] _asm_arm_mov_local_reg
0x100022977	0x00000032	[ 26] _asm_arm_mov_reg_local
0x1000229A9	0x00000031	[ 26] _asm_arm_cmp_reg_i8
0x1000229DA	0x0000002E	[ 26] _asm_arm_cmp_reg_reg
0x100022A08	0x00000060	[ 26] _asm_arm_setcc_reg
0x100022A68	0x00000041	[ 26] _asm_arm_add_reg_reg_reg
0x100022AA9	0x00000041	[ 26] _asm_arm_sub_reg_reg_reg
0x100022AEA	0x0000004A	[ 26] _asm_arm_mul_reg_reg_reg
0x100022B34	0x00000041	[ 26] _asm_arm_and_reg_reg_reg
0x100022B75	0x00000041	[ 26] _asm_arm_eor_reg_reg_reg
0x100022BB6	0x00000041	[ 26] _asm_arm_orr_reg_reg_reg
0x100022BF7	0x00000033	[ 26] _asm_arm_mov_reg_local_addr
0x100022C2A	0x000000AC	[ 26] _asm_arm_mov_reg_pcrel
0x100022CD6	0x00000036	[ 26] _asm_arm_lsl_reg_reg
0x100022D0C	0x00000036	[ 26] _asm_arm_lsr_reg_reg
0x100022D42	0x00000036	[ 26] _asm_arm_asr_reg_reg
0x100022D78	0x00000041	[ 26] _asm_arm_ldr_reg_reg
0x100022DB9	0x00000032	[ 26] _asm_arm_ldrh_reg_reg
0x100022DEB	0x00000052	[ 26] _asm_arm_ldrh_reg_reg_offset
0x100022E3D	0x00000032	[ 26] _asm_arm_ldrb_reg_reg
0x100022E6F	0x00000041	[ 26] _asm_arm_str_reg_reg
0x100022EB0	0x00000032	[ 26] _asm_arm_strh_reg_reg
0x100022EE2	0x00000032	[ 26] _asm_arm_strb_reg_reg
0x100022F14	0x00000041	[ 26] _asm_arm_str_reg_reg_reg
0x100022F55	0x0000005C	[ 26] _asm_arm_strh_reg_reg_reg
0x100022FB1	0x00000041	[ 26] _asm_arm_strb_reg_reg_reg
0x100022FF2	0x00000080	[ 26] _asm_arm_bcc_label
0x100023072	0x00000011	[ 26] _asm_arm_b_label
0x100023083	0x00000050	[ 26] _asm_arm_bl_ind
0x1000230D3	0x00000026	[ 26] _asm_arm_bx_reg
0x1000230FC	0x0000008A	[ 27] _emit_native_arm_new
0x100023186	0x0000004C	[ 27] _emit_native_arm_free
0x1000231D2	0x00000805	[ 27] _emit_native_start_pass
0x1000239D7	0x000004A2	[ 27] _emit_native_end_pass
0x100023E79	0x0000000C	[ 27] _emit_native_last_emit_was_return_value
0x100023E85	0x00000060	[ 27] _emit_native_adjust_stack_size
0x100023EE5	0x00000006	[ 27] _emit_native_set_source_line
0x100023EEB	0x0000009A	[ 27] _emit_native_load_local
0x100023F85	0x00000071	[ 27] _emit_native_load_global
0x100023FF6	0x000000D2	[ 27] _emit_native_store_local
0x1000240C8	0x00000126	[ 27] _emit_native_store_global
0x1000241EE	0x00000043	[ 27] _emit_native_delete_local
0x100024231	0x0000001C	[ 27] _emit_native_delete_global
0x10002424D	0x000000CD	[ 27] _emit_native_label_assign
0x10002431A	0x0000016F	[ 27] _emit_native_import
0x100024489	0x0000003E	[ 27] _emit_native_load_const_tok
0x1000244C7	0x00000019	[ 27] _emit_native_load_const_small_int
0x1000244E0	0x0000003D	[ 27] _emit_native_load_const_str
0x10002451D	0x00000038	[ 27] _emit_native_load_const_obj
0x100024555	0x00000015	[ 27] _emit_native_load_null
0x10002456A	0x000000AF	[ 27] _emit_native_load_method
0x100024619	0x0000003D	[ 27] _emit_native_load_build_class
0x100024656	0x00000A5E	[ 27] _emit_native_subscr
0x1000250B4	0x00000168	[ 27] _emit_native_attr
0x10002521C	0x00000063	[ 27] _emit_native_dup_top
0x10002527F	0x000000B2	[ 27] _emit_native_dup_top_two
0x100025331	0x00000018	[ 27] _emit_native_pop_top
0x100025349	0x00000092	[ 27] _emit_native_rot_two
0x1000253DB	0x000000DC	[ 27] _emit_native_rot_three
0x1000254B7	0x0000002C	[ 27] _emit_native_jump
0x1000254E3	0x0000000F	[ 27] _emit_native_pop_jump_if
0x1000254F2	0x0000000C	[ 27] _emit_native_jump_if_or_pop
0x1000254FE	0x0000014C	[ 27] _emit_native_unwind_jump
0x10002564A	0x000001C4	[ 27] _emit_native_setup_block
0x10002580E	0x0000020F	[ 27] _emit_native_with_cleanup
0x100025A1D	0x00000126	[ 27] _emit_native_end_finally
0x100025B43	0x000000CE	[ 27] _emit_native_get_iter
0x100025C11	0x0000007C	[ 27] _emit_native_for_iter
0x100025C8D	0x00000018	[ 27] _emit_native_for_iter_end
0x100025CA5	0x00000062	[ 27] _emit_native_pop_except_jump
0x100025D07	0x000000AC	[ 27] _emit_native_unary_op
0x100025DB3	0x000004D9	[ 27] _emit_native_binary_op
0x10002628C	0x000001DE	[ 27] _emit_native_build
0x10002646A	0x000000E9	[ 27] _emit_native_store_map
0x100026553	0x00000174	[ 27] _emit_native_store_comp
0x1000266C7	0x00000073	[ 27] _emit_native_unpack_sequence
0x10002673A	0x00000089	[ 27] _emit_native_unpack_ex
0x1000267C3	0x000000B9	[ 27] _emit_native_make_function
0x10002687C	0x00000132	[ 27] _emit_native_make_closure
0x1000269AE	0x000001EA	[ 27] _emit_native_call_function
0x100026B98	0x00000089	[ 27] _emit_native_call_method
0x100026C21	0x000001F5	[ 27] _emit_native_return_value
0x100026E16	0x0000008A	[ 27] _emit_native_raise_varargs
0x100026EA0	0x00000296	[ 27] _emit_native_yield
0x100027136	0x00000038	[ 27] _emit_native_start_except_handler
0x10002716E	0x00000011	[ 27] _emit_native_end_except_handler
0x10002717F	0x0000004A	[ 27] _emit_call_with_imm_arg
0x1000271C9	0x00000032	[ 27] _emit_native_mov_state_reg
0x1000271FB	0x0000038D	[ 27] _emit_native_global_exc_entry
0x100027588	0x0000005F	[ 27] _need_reg_all
0x1000275E7	0x00000030	[ 27] _emit_native_mov_reg_state
0x100027617	0x0000003C	[ 27] _ensure_extra_stack
0x100027653	0x0000003B	[ 27] _adjust_stack
0x10002768E	0x000000AC	[ 27] _emit_native_load_fast
0x10002773A	0x00000051	[ 27] _emit_post_push_reg
0x10002778B	0x0000007C	[ 27] _need_reg_single
0x100027807	0x0000007E	[ 27] _emit_pre_pop_reg_flexible
0x100027885	0x000000A6	[ 27] _emit_access_stack
0x10002792B	0x000000AE	[ 27] _load_reg_stack_imm
0x1000279D9	0x00000051	[ 27] _emit_post_push_imm
0x100027A2A	0x00000068	[ 27] _emit_call_with_qstr_arg
0x100027A92	0x00000115	[ 27] _emit_native_store_fast
0x100027BA7	0x0000007D	[ 27] _need_stack_settled
0x100027C24	0x0000008A	[ 27] _emit_native_leave_exc_stack
0x100027CAE	0x00000074	[ 27] _emit_load_reg_with_object
0x100027D22	0x0000015C	[ 27] _emit_get_stack_pointer_to_reg_for_pop
0x100027E7E	0x0000007D	[ 27] _emit_get_stack_pointer_to_reg_for_push
0x100027EFB	0x00000053	[ 27] _emit_native_mov_reg_state_addr
0x100027F4E	0x000001AC	[ 27] _emit_native_jump_helper
0x1000280FA	0x0000009B	[ 27] _emit_native_push_exc_stack
0x100028195	0x0000005D	[ 27] _emit_call_with_2_imm_args
0x1000281F2	0x00000070	[ 27] _emit_load_reg_with_child
0x100028262	0x0000006A	[ 27] _emit_fold_stack_top
0x1000282CC	0x00000013	[ 28] _asm_xtensa_end_pass
0x1000282DF	0x00000129	[ 28] _asm_xtensa_entry
0x100028408	0x000000E7	[ 28] _asm_xtensa_exit
0x1000284EF	0x000000A5	[ 28] _asm_xtensa_entry_win
0x100028594	0x0000003B	[ 28] _asm_xtensa_exit_win
0x1000285CF	0x00000021	[ 28] _asm_xtensa_op16
0x1000285F0	0x00000029	[ 28] _asm_xtensa_op24
0x100028619	0x0000004E	[ 28] _asm_xtensa_j_label
0x100028667	0x00000092	[ 28] _asm_xtensa_bccz_reg_label
0x1000286F9	0x000000A4	[ 28] _asm_xtensa_bcc_reg_reg_label
0x10002879D	0x00000095	[ 28] _asm_xtensa_setcc_reg_reg_reg
0x100028832	0x0000008D	[ 28] _asm_xtensa_mov_reg_i32
0x1000288BF	0x00000065	[ 28] _asm_xtensa_mov_reg_i32_optimised
0x100028924	0x0000003F	[ 28] _asm_xtensa_mov_local_reg
0x100028963	0x0000003F	[ 28] _asm_xtensa_mov_reg_local
0x1000289A2	0x000000B9	[ 28] _asm_xtensa_mov_reg_local_addr
0x100028A5B	0x000000D5	[ 28] _asm_xtensa_mov_reg_pcrel
0x100028B30	0x0000009E	[ 28] _asm_xtensa_l32i_optimised
0x100028BCE	0x0000009E	[ 28] _asm_xtensa_s32i_optimised
0x100028C6C	0x00000039	[ 28] _asm_xtensa_call_ind
0x100028CA5	0x0000003C	[ 28] _asm_xtensa_call_ind_win
0x100028CE4	0x0000008A	[ 29] _emit_native_xtensa_new
0x100028D6E	0x0000004C	[ 29] _emit_native_xtensa_free
0x100028DBA	0x000007FA	[ 29] _emit_native_start_pass
0x1000295B4	0x00000498	[ 29] _emit_native_end_pass
0x100029A4C	0x0000000C	[ 29] _emit_native_last_emit_was_return_value
0x100029A58	0x00000060	[ 29] _emit_native_adjust_stack_size
0x100029AB8	0x00000006	[ 29] _emit_native_set_source_line
0x100029ABE	0x000000A3	[ 29] _emit_native_load_local
0x100029B61	0x00000077	[ 29] _emit_native_load_global
0x100029BD8	0x000000D5	[ 29] _emit_native_store_local
0x100029CAD	0x0000012A	[ 29] _emit_native_store_global
0x100029DD7	0x00000043	[ 29] _emit_native_delete_local
0x100029E1A	0x0000001F	[ 29] _emit_native_delete_global
0x100029E39	0x000000D7	[ 29] _emit_native_label_assign
0x100029F10	0x00000176	[ 29] _emit_native_import
0x10002A086	0x0000003E	[ 29] _emit_native_load_const_tok
0x10002A0C4	0x00000019	[ 29] _emit_native_load_const_small_int
0x10002A0DD	0x00000043	[ 29] _emit_native_load_const_str
0x10002A120	0x0000003E	[ 29] _emit_native_load_const_obj
0x10002A15E	0x00000015	[ 29] _emit_native_load_null
0x10002A173	0x000000B5	[ 29] _emit_native_load_method
0x10002A228	0x0000003B	[ 29] _emit_native_load_build_class
0x10002A263	0x00000B5D	[ 29] _emit_native_subscr
0x10002ADC0	0x0000016A	[ 29] _emit_native_attr
0x10002AF2A	0x00000063	[ 29] _emit_native_dup_top
0x10002AF8D	0x000000BB	[ 29] _emit_native_dup_top_two
0x10002B048	0x00000018	[ 29] _emit_native_pop_top
0x10002B060	0x00000098	[ 29] _emit_native_rot_two
0x10002B0F8	0x000000E2	[ 29] _emit_native_rot_three
0x10002B1DA	0x0000002C	[ 29] _emit_native_jump
0x10002B206	0x0000000F	[ 29] _emit_native_pop_jump_if
0x10002B215	0x0000000C	[ 29] _emit_native_jump_if_or_pop
0x10002B221	0x0000015D	[ 29] _emit_native_unwind_jump
0x10002B37E	0x000001CD	[ 29] _emit_native_setup_block
0x10002B54B	0x00000203	[ 29] _emit_native_with_cleanup
0x10002B74E	0x0000011F	[ 29] _emit_native_end_finally
0x10002B86D	0x000000C6	[ 29] _emit_native_get_iter
0x10002B933	0x00000072	[ 29] _emit_native_for_iter
0x10002B9A5	0x00000018	[ 29] _emit_native_for_iter_end
0x10002B9BD	0x00000068	[ 29] _emit_native_pop_except_jump
0x10002BA25	0x000000B2	[ 29] _emit_native_unary_op
0x10002BAD7	0x00000521	[ 29] _emit_native_binary_op
0x10002BFF8	0x000001E5	[ 29] _emit_native_build
0x10002C1DD	0x000000EA	[ 29] _emit_native_store_map
0x10002C2C7	0x00000172	[ 29] _emit_native_store_comp
0x10002C439	0x00000076	[ 29] _emit_native_unpack_sequence
0x10002C4AF	0x0000008C	[ 29] _emit_native_unpack_ex
0x10002C53B	0x000000B7	[ 29] _emit_native_make_function
0x10002C5F2	0x0000012B	[ 29] _emit_native_make_closure
0x10002C71D	0x000001FA	[ 29] _emit_native_call_function
0x10002C917	0x0000008C	[ 29] _emit_native_call_method
0x10002C9A3	0x0000020A	[ 29] _emit_native_return_value
0x10002CBAD	0x00000088	[ 29] _emit_native_raise_varargs
0x10002CC35	0x0000029F	[ 29] _emit_native_yield
0x10002CED4	0x0000003E	[ 29] _emit_native_start_except_handler
0x10002CF12	0x00000011	[ 29] _emit_native_end_except_handler
0x10002CF23	0x00000045	[ 29] _emit_call_with_imm_arg
0x10002CF68	0x00000032	[ 29] _emit_native_mov_state_reg
0x10002CF9A	0x00000377	[ 29] _emit_native_global_exc_entry
0x10002D311	0x0000005F	[ 29] _need_reg_all
0x10002D370	0x00000030	[ 29] _emit_native_mov_reg_state
0x10002D3A0	0x0000003C	[ 29] _ensure_extra_stack
0x10002D3DC	0x0000003B	[ 29] _adjust_stack
0x10002D417	0x000000B5	[ 29] _emit_native_load_fast
0x10002D4CC	0x00000051	[ 29] _emit_post_push_reg
0x10002D51D	0x0000007C	[ 29] _need_reg_single
0x10002D599	0x0000007E	[ 29] _emit_pre_pop_reg_flexible
0x10002D617	0x000000B5	[ 29] _emit_access_stack
0x10002D6CC	0x000000A9	[ 29] _load_reg_stack_imm
0x10002D775	0x00000051	[ 29] _emit_post_push_imm
0x10002D7C6	0x00000068	[ 29] _emit_call_with_qstr_arg
0x10002D82E	0x0000011B	[ 29] _emit_native_store_fast
0x10002D949	0x0000007D	[ 29] _need_stack_settled
0x10002D9C6	0x0000008F	[ 29] _emit_native_leave_exc_stack
0x10002DA55	0x00000085	[ 29] _emit_load_reg_with_object
0x10002DADA	0x00000162	[ 29] _emit_get_stack_pointer_to_reg_for_pop
0x10002DC3C	0x0000007D	[ 29] _emit_get_stack_pointer_to_reg_for_push
0x10002DCB9	0x0000005B	[ 29] _emit_native_mov_reg_state_addr
0x10002DD14	0x00000191	[ 29] _emit_native_jump_helper
0x10002DEA5	0x000000A1	[ 29] _emit_native_push_exc_stack
0x10002DF46	0x0000005B	[ 29] _emit_call_with_2_imm_args
0x10002DFA1	0x0000007B	[ 29] _emit_load_reg_with_child
0x10002E01C	0x0000006D	[ 29] _emit_fold_stack_top
0x10002E08C	0x00000058	[ 30] _emit_inline_xtensa_new
0x10002E0E4	0x0000002A	[ 30] _emit_inline_xtensa_free
0x10002E10E	0x00000050	[ 30] _emit_inline_xtensa_start_pass
0x10002E15E	0x0000001C	[ 30] _emit_inline_xtensa_end_pass
0x10002E17A	0x000000BB	[ 30] _emit_inline_xtensa_count_params
0x10002E235	0x00000048	[ 30] _emit_inline_xtensa_label
0x10002E27D	0x000003A3	[ 30] _emit_inline_xtensa_op
0x10002E620	0x000000A7	[ 30] _get_arg_reg
0x10002E6C7	0x00000077	[ 30] _get_arg_label
0x10002E73E	0x00000091	[ 30] _get_arg_i
0x10002E7D0	0x0000008A	[ 31] _emit_native_xtensawin_new
0x10002E85A	0x0000004C	[ 31] _emit_native_xtensawin_free
0x10002E8A6	0x00000827	[ 31] _emit_native_start_pass
0x10002F0CD	0x00000498	[ 31] _emit_native_end_pass
0x10002F565	0x0000000C	[ 31] _emit_native_last_emit_was_return_value
0x10002F571	0x00000060	[ 31] _emit_native_adjust_stack_size
0x10002F5D1	0x00000006	[ 31] _emit_native_set_source_line
0x10002F5D7	0x000000A3	[ 31] _emit_native_load_local
0x10002F67A	0x00000077	[ 31] _emit_native_load_global
0x10002F6F1	0x000000D5	[ 31] _emit_native_store_local
0x10002F7C6	0x0000012A	[ 31] _emit_native_store_global
0x10002F8F0	0x00000043	[ 31] _emit_native_delete_local
0x10002F933	0x0000001F	[ 31] _emit_native_delete_global
0x10002F952	0x000000D7	[ 31] _emit_native_label_assign
0x10002FA29	0x00000176	[ 31] _emit_native_import
0x10002FB9F	0x0000003E	[ 31] _emit_native_load_const_tok
0x10002FBDD	0x00000019	[ 31] _emit_native_load_const_small_int
0x10002FBF6	0x00000043	[ 31] _emit_native_load_const_str
0x10002FC39	0x0000003E	[ 31] _emit_native_load_const_obj
0x10002FC77	0x00000015	[ 31] _emit_native_load_null
0x10002FC8C	0x000000B5	[ 31] _emit_native_load_method
0x10002FD41	0x0000003B	[ 31] _emit_native_load_build_class
0x10002FD7C	0x00000B60	[ 31] _emit_native_subscr
0x1000308DC	0x0000016A	[ 31] _emit_native_attr
0x100030A46	0x00000063	[ 31] _emit_native_dup_top
0x100030AA9	0x000000BB	[ 31] _emit_native_dup_top_two
0x100030B64	0x00000018	[ 31] _emit_native_pop_top
0x100030B7C	0x00000098	[ 31] _emit_native_rot_two
0x100030C14	0x000000E2	[ 31] _emit_native_rot_three
0x100030CF6	0x0000002C	[ 31] _emit_native_jump
0x100030D22	0x0000000F	[ 31] _emit_native_pop_jump_if
0x100030D31	0x0000000C	[ 31] _emit_native_jump_if_or_pop
0x100030D3D	0x0000015D	[ 31] _emit_native_unwind_jump
0x100030E9A	0x000001CD	[ 31] _emit_native_setup_block
0x100031067	0x00000203	[ 31] _emit_native_with_cleanup
0x10003126A	0x0000011F	[ 31] _emit_native_end_finally
0x100031389	0x000000C6	[ 31] _emit_native_get_iter
0x10003144F	0x00000072	[ 31] _emit_native_for_iter
0x1000314C1	0x00000018	[ 31] _emit_native_for_iter_end
0x1000314D9	0x00000068	[ 31] _emit_native_pop_except_jump
0x100031541	0x000000B2	[ 31] _emit_native_unary_op
0x1000315F3	0x00000521	[ 31] _emit_native_binary_op
0x100031B14	0x000001E5	[ 31] _emit_native_build
0x100031CF9	0x000000EA	[ 31] _emit_native_store_map
0x100031DE3	0x00000172	[ 31] _emit_native_store_comp
0x100031F55	0x00000076	[ 31] _emit_native_unpack_sequence
0x100031FCB	0x0000008C	[ 31] _emit_native_unpack_ex
0x100032057	0x000000B7	[ 31] _emit_native_make_function
0x10003210E	0x0000012B	[ 31] _emit_native_make_closure
0x100032239	0x000001FA	[ 31] _emit_native_call_function
0x100032433	0x0000008C	[ 31] _emit_native_call_method
0x1000324BF	0x00000236	[ 31] _emit_native_return_value
0x1000326F5	0x00000088	[ 31] _emit_native_raise_varargs
0x10003277D	0x0000029F	[ 31] _emit_native_yield
0x100032A1C	0x0000003E	[ 31] _emit_native_start_except_handler
0x100032A5A	0x00000011	[ 31] _emit_native_end_except_handler
0x100032A6B	0x00000045	[ 31] _emit_call_with_imm_arg
0x100032AB0	0x00000031	[ 31] _emit_native_mov_state_reg
0x100032AE1	0x000003D8	[ 31] _emit_native_global_exc_entry
0x100032EB9	0x0000005F	[ 31] _need_reg_all
0x100032F18	0x0000002F	[ 31] _emit_native_mov_reg_state
0x100032F47	0x0000003C	[ 31] _ensure_extra_stack
0x100032F83	0x0000003B	[ 31] _adjust_stack
0x100032FBE	0x000000B5	[ 31] _emit_native_load_fast
0x100033073	0x00000051	[ 31] _emit_post_push_reg
0x1000330C4	0x0000007C	[ 31] _need_reg_single
0x100033140	0x0000007E	[ 31] _emit_pre_pop_reg_flexible
0x1000331BE	0x000000B5	[ 31] _emit_access_stack
0x100033273	0x000000A9	[ 31] _load_reg_stack_imm
0x10003331C	0x00000051	[ 31] _emit_post_push_imm
0x10003336D	0x00000068	[ 31] _emit_call_with_qstr_arg
0x1000333D5	0x0000011B	[ 31] _emit_native_store_fast
0x1000334F0	0x0000007D	[ 31] _need_stack_settled
0x10003356D	0x0000008F	[ 31] _emit_native_leave_exc_stack
0x1000335FC	0x00000085	[ 31] _emit_load_reg_with_object
0x100033681	0x00000162	[ 31] _emit_get_stack_pointer_to_reg_for_pop
0x1000337E3	0x0000007D	[ 31] _emit_get_stack_pointer_to_reg_for_push
0x100033860	0x00000057	[ 31] _emit_native_mov_reg_state_addr
0x1000338B7	0x00000191	[ 31] _emit_native_jump_helper
0x100033A48	0x000000A1	[ 31] _emit_native_push_exc_stack
0x100033AE9	0x0000005B	[ 31] _emit_call_with_2_imm_args
0x100033B44	0x0000007B	[ 31] _emit_load_reg_with_child
0x100033BBF	0x0000006D	[ 31] _emit_fold_stack_top
0x100033C2C	0x00000641	[ 32] _mp_format_float
0x10003426D	0x000000B7	[ 33] _mp_parse_num_base
0x100034324	0x000001D2	[ 34] _mp_parse_num_integer
0x1000344F6	0x00000042	[ 34] _mp_obj_new_exception_arg1
0x100034538	0x00000034	[ 34] _raise_exc
0x10003456C	0x00000371	[ 34] _mp_parse_num_decimal
0x1000348DD	0x0000001A	[ 35] _mp_emit_glue_new_raw_code
0x1000348F7	0x0000002A	[ 35] _mp_emit_glue_assign_bytecode
0x100034921	0x0000006A	[ 35] _mp_emit_glue_assign_native
0x10003498B	0x00000221	[ 36] _mp_raw_code_save
0x100034BAC	0x00000305	[ 36] _save_obj
0x100034EB1	0x00000216	[ 36] _save_raw_code
0x1000350C7	0x0000004F	[ 36] _mp_raw_code_save_file
0x100035116	0x0000000A	[ 36] _fd_print_strn
0x100035120	0x0000007A	[ 37] _mp_init
0x10003519A	0x00000006	[ 37] _mp_deinit
0x1000351A2	0x00000076	[ 37] _mp_raise_msg_varg
0x10003521B	0x000001ED	[ 37] _mp_unary_op
0x100035408	0x00000590	[ 37] _mp_binary_op
0x100035998	0x00000013	[ 37] _mp_raise_ValueError
0x1000359AB	0x000000FF	[ 37] _mp_getiter
0x100035AAA	0x00000137	[ 37] _mp_iternext
0x100035BE1	0x00000023	[ 37] _mp_raise_msg
0x100035C04	0x00000058	[ 37] _mp_call_function_n_kw
0x100035C5C	0x00000021	[ 37] _mp_call_function_1
0x100035C7D	0x00000032	[ 37] _mp_call_method_n_kw
0x100035CB1	0x000000AE	[ 37] _mp_convert_member_lookup
0x100035D5F	0x000000CA	[ 37] _mp_load_method_maybe
0x100035E29	0x000000D5	[ 37] _mp_iternext_allow_raise
0x100035F00	0x00000035	[ 37] _m_malloc_fail
0x100035F35	0x00000013	[ 37] _mp_raise_TypeError
0x100035F48	0x00000013	[ 37] _mp_raise_NotImplementedError
0x100035F5B	0x00000011	[ 37] _mp_raise_type_arg
0x100035F6C	0x00000034	[ 37] _mp_obj_new_exception_arg1
0x100035FA0	0x00000026	[ 37] _mp_raise_StopIteration
0x100035FC6	0x0000001A	[ 37] _mp_raise_OSError
0x100035FE0	0x00000015	[ 37] _mp_raise_recursion_depth
0x100035FF5	0x00000066	[ 37] _checked_fun_call
0x10003605C	0x0000008C	[ 38] _mp_native_type_from_qstr
0x1000360E8	0x00000014	[ 39] _mp_stack_ctrl_init
0x1000360FC	0x00000011	[ 39] _mp_stack_set_limit
0x10003610D	0x0000002A	[ 39] _mp_stack_check
0x100036137	0x0000007D	[ 40] _mp_arg_check_num_sig
0x1000361B4	0x0000013C	[ 40] _mp_arg_parse_all
0x1000362F0	0x00000054	[ 40] _mp_arg_parse_all_kw_array
0x100036344	0x00000010	[ 40] _mp_arg_error_unimpl_kw
0x100036354	0x0000003C	[ 42] _mp_map_init
0x100036390	0x00000019	[ 42] _mp_map_init_fixed_table
0x1000363A9	0x00000031	[ 42] _mp_map_deinit
0x1000363DA	0x00000034	[ 42] _mp_map_clear
0x10003640E	0x0000023F	[ 42] _mp_map_lookup
0x10003664D	0x000000C0	[ 42] _mp_map_rehash
0x10003670D	0x00000018	[ 43] _mp_obj_malloc_helper
0x100036725	0x00000021	[ 43] _mp_obj_get_type
0x100036746	0x00000029	[ 43] _mp_obj_get_type_str
0x10003676F	0x0000008D	[ 43] _mp_obj_print_helper
0x1000367FC	0x0000011A	[ 43] _mp_obj_print_exception
0x100036916	0x0000007E	[ 43] _mp_obj_is_true
0x100036994	0x0000006D	[ 43] _mp_obj_len_maybe
0x100036A01	0x000001B7	[ 43] _mp_obj_equal_not_equal
0x100036BB8	0x0000001D	[ 43] _mp_obj_equal
0x100036BD5	0x0000004D	[ 43] _mp_obj_get_int
0x100036C22	0x00000027	[ 43] _mp_obj_get_int_truncated
0x100036C49	0x00000055	[ 43] _mp_obj_get_int_maybe
0x100036C9E	0x0000006D	[ 43] _mp_obj_get_float_maybe
0x100036D0B	0x00000042	[ 43] _mp_obj_get_float
0x100036D4D	0x00000095	[ 43] _mp_obj_get_complex_maybe
0x100036DE2	0x00000048	[ 43] _mp_obj_get_array
0x100036E2A	0x000000B4	[ 43] _mp_get_index
0x100036EDE	0x00000097	[ 43] _mp_obj_subscr
0x100036F75	0x00000009	[ 43] _mp_identity_getiter
0x100036F7E	0x00000035	[ 43] _mp_get_buffer
0x100036FB3	0x0000003C	[ 43] _mp_get_buffer_raise
0x100036FEF	0x00000014	[ 43] _mp_generic_unary_op
0x100037003	0x00000020	[ 45] _bool_print
0x100037023	0x00000041	[ 45] _bool_make_new
0x100037064	0x00000023	[ 45] _bool_unary_op
0x100037087	0x0000001A	[ 45] _bool_binary_op
0x1000370A1	0x000000E9	[ 46] _mp_call_method_self_n_kw
0x10003718C	0x000000F5	[ 47] _complex_print
0x100037281	0x00000188	[ 47] _complex_make_new
0x100037409	0x000000D7	[ 47] _complex_unary_op
0x1000374E0	0x00000017	[ 47] _complex_binary_op
0x1000374F7	0x00000041	[ 47] _complex_attr
0x100037538	0x0000003D	[ 47] _mp_obj_new_complex
0x100037575	0x0000002F	[ 47] _mp_obj_complex_get
0x1000375A4	0x00000318	[ 47] _mp_obj_complex_binary_op
0x1000378BC	0x000000B3	[ 48] _mp_obj_dict_make_new
0x10003796F	0x000001B7	[ 48] _dict_update
0x100037B26	0x00000033	[ 48] _mp_obj_dict_get
0x100037B59	0x00000096	[ 48] _mp_obj_dict_copy
0x100037BEF	0x000000BA	[ 48] _dict_print
0x100037CA9	0x00000030	[ 48] _dict_unary_op
0x100037CD9	0x000000D2	[ 48] _dict_binary_op
0x100037DAB	0x00000092	[ 48] _dict_subscr
0x100037E3D	0x00000026	[ 48] _dict_getiter
0x100037E63	0x00000018	[ 48] _mp_obj_dict_init
0x100037E7B	0x00000034	[ 48] _mp_obj_dict_store
0x100037EAF	0x0000008D	[ 48] _dict_get_helper
0x100037F3C	0x0000005D	[ 48] _dict_iter_next
0x100037F99	0x00000055	[ 48] _dict_view_it_iternext
0x100037FEE	0x00000021	[ 48] _dict_clear
0x10003800F	0x000000C9	[ 48] _dict_fromkeys
0x1000380D8	0x0000000C	[ 48] _dict_get
0x1000380E4	0x0000002C	[ 48] _dict_items
0x100038110	0x000000C1	[ 48] _dict_view_print
0x1000381D1	0x00000038	[ 48] _dict_view_binary_op
0x100038209	0x00000029	[ 48] _dict_view_getiter
0x100038232	0x0000002C	[ 48] _dict_keys
0x10003825E	0x0000000F	[ 48] _dict_pop
0x10003826D	0x0000007D	[ 48] _dict_popitem
0x1000382EA	0x0000000F	[ 48] _dict_setdefault
0x1000382F9	0x0000002C	[ 48] _dict_values
0x100038325	0x000000B9	[ 50] _mp_obj_exception_print
0x1000383DE	0x000000AE	[ 50] _mp_obj_exception_make_new
0x10003848C	0x00000021	[ 50] _mp_obj_exception_get_value
0x1000384AD	0x00000042	[ 50] _get_native_exception
0x1000384EF	0x0000006D	[ 50] _mp_obj_exception_attr
0x10003855C	0x00000065	[ 50] _mp_obj_new_exception
0x1000385C1	0x000000C7	[ 50] _mp_obj_new_exception_msg
0x100038688	0x0000009A	[ 50] _mp_obj_new_exception_msg_varg
0x100038722	0x00000159	[ 50] _mp_obj_new_exception_msg_vlist
0x10003887B	0x00000091	[ 50] _exc_add_strn
0x10003890C	0x00000034	[ 50] _mp_obj_is_exception_type
0x100038940	0x00000012	[ 50] _mp_obj_is_exception_instance
0x100038952	0x00000038	[ 50] _mp_obj_exception_match
0x10003898A	0x000000C2	[ 50] _mp_obj_exception_add_traceback
0x100038A4C	0x0000002D	[ 50] _mp_obj_exception_get_traceback
0x100038A7C	0x000000B2	[ 52] _float_print
0x100038B2E	0x000000B6	[ 52] _float_make_new
0x100038BE4	0x000000C8	[ 52] _float_unary_op
0x100038CAC	0x00000047	[ 52] _float_binary_op
0x100038CF3	0x00000031	[ 52] _mp_obj_new_float
0x100038D24	0x00000022	[ 52] _mp_obj_float_get
0x100038D46	0x0000039E	[ 52] _mp_obj_float_binary_op
0x1000390E4	0x000000C0	[ 52] _mp_obj_float_divmod
0x1000391A5	0x00000041	[ 53] _fun_builtin_1_call
0x1000391E6	0x00000044	[ 53] _fun_builtin_2_call
0x10003922A	0x00000048	[ 53] _fun_builtin_3_call
0x100039272	0x0000008F	[ 53] _fun_builtin_var_call
0x100039301	0x0000002A	[ 55] _mp_obj_new_getitem_iter
0x10003932B	0x00000070	[ 55] _it_iternext
0x10003939B	0x000000AD	[ 56] _mp_obj_new_int_from_float
0x100039448	0x0000008C	[ 56] _mp_obj_int_print
0x1000394D4	0x000001D8	[ 56] _mp_obj_int_formatted
0x1000396AC	0x00000070	[ 56] _mp_int_format_size
0x10003971C	0x0000006F	[ 56] _mp_obj_int_binary_op_extra_cases
0x10003978B	0x000000FD	[ 56] _mp_obj_int_make_new
0x100039888	0x000000A4	[ 56] _int_from_bytes
0x10003992C	0x000000C3	[ 56] _int_to_bytes
0x1000399F0	0x0000002D	[ 57] _mp_obj_int_new_mpz
0x100039A1D	0x000000B8	[ 57] _mp_obj_int_formatted_impl
0x100039AD5	0x0000005A	[ 57] _mp_obj_int_from_bytes_impl
0x100039B2F	0x00000029	[ 57] _mp_obj_int_to_bytes_impl
0x100039B58	0x0000003A	[ 57] _mp_obj_int_sign
0x100039B92	0x0000012A	[ 57] _mp_obj_int_unary_op
0x100039CBC	0x00000454	[ 57] _mp_obj_int_binary_op
0x10003A110	0x00000044	[ 57] _mp_obj_int_get_checked
0x10003A154	0x0000001C	[ 57] _mp_obj_new_int
0x10003A170	0x0000004B	[ 57] _mp_obj_new_int_from_ll
0x10003A1BB	0x00000048	[ 57] _mp_obj_new_int_from_ull
0x10003A203	0x0000001C	[ 57] _mp_obj_new_int_from_uint
0x10003A21F	0x00000066	[ 57] _mp_obj_new_int_from_str_len
0x10003A285	0x0000001C	[ 57] _mp_obj_int_get_truncated
0x10003A2A2	0x00000025	[ 57] _mp_obj_int_as_float_impl
0x10003A2C7	0x0000006F	[ 58] _mp_obj_list_append
0x10003A336	0x0000006E	[ 58] _mp_obj_list_sort
0x10003A3A4	0x0000016D	[ 58] _mp_quicksort
0x10003A511	0x00000069	[ 58] _mp_obj_list_remove
0x10003A57A	0x0000001B	[ 58] _list_index
0x10003A595	0x000000B8	[ 58] _list_pop
0x10003A64D	0x00000075	[ 58] _list_print
0x10003A6C2	0x00000055	[ 58] _list_make_new
0x10003A717	0x0000002E	[ 58] _list_unary_op
0x10003A745	0x00000180	[ 58] _list_binary_op
0x10003A8C5	0x000002C9	[ 58] _list_subscr
0x10003AB8E	0x0000002A	[ 58] _list_getiter
0x10003ABB8	0x00000052	[ 58] _mp_obj_list_init
0x10003AC0A	0x00000056	[ 58] _mp_obj_new_list
0x10003AC60	0x00000014	[ 58] _mp_obj_list_get
0x10003AC74	0x0000003C	[ 58] _list_extend_from_iter
0x10003ACB0	0x000000A2	[ 58] _list_extend
0x10003AD52	0x00000027	[ 58] _list_it_iternext
0x10003AD79	0x00000041	[ 58] _list_clear
0x10003ADBA	0x00000015	[ 58] _list_copy
0x10003ADCF	0x00000015	[ 58] _list_count
0x10003ADE4	0x0000006E	[ 58] _list_insert
0x10003AE52	0x0000004A	[ 58] _list_reverse
0x10003AE9C	0x00000029	[ 61] _object_make_new
0x10003AEC5	0x0000000B	[ 61] _object___init__
0x10003AED0	0x00000042	[ 61] _object___new__
0x10003AF12	0x00000008	[ 62] _polymorph_it_iternext
0x10003AF1A	0x00000082	[ 63] _property_make_new
0x10003AF9C	0x0000000A	[ 63] _mp_obj_property_get
0x10003AFA6	0x0000002E	[ 63] _property_getter
0x10003AFD4	0x0000002E	[ 63] _property_setter
0x10003B002	0x0000002E	[ 63] _property_deleter
0x10003B030	0x00000011	[ 64] _none_print
0x10003B041	0x00000017	[ 68] _singleton_print
0x10003B058	0x00000085	[ 69] _slice_print
0x10003B0DD	0x00000133	[ 69] _mp_obj_slice_indices
0x10003B210	0x00000147	[ 70] _mp_str_print_quoted
0x10003B357	0x00000189	[ 70] _mp_obj_str_make_new
0x10003B4E0	0x000000A7	[ 70] _mp_obj_new_str_from_vstr
0x10003B587	0x0000006A	[ 70] _mp_obj_new_str_copy
0x10003B5F1	0x0000003A	[ 70] _mp_obj_new_str
0x10003B62B	0x0000008E	[ 70] _find_subbytes
0x10003B6B9	0x000009EF	[ 70] _mp_obj_str_binary_op
0x10003C0A8	0x00000036	[ 70] _bad_implicit_conversion
0x10003C0DE	0x000001A1	[ 70] _str_join
0x10003C27F	0x0000024D	[ 70] _mp_obj_str_split
0x10003C4CC	0x00000026	[ 70] _mp_obj_new_str_of_type
0x10003C4F2	0x0000005F	[ 70] _mp_obj_str_get_data
0x10003C551	0x000001E9	[ 70] _str_rsplit
0x10003C73A	0x00000011	[ 70] _str_find
0x10003C74B	0x00000011	[ 70] _str_rfind
0x10003C75C	0x00000014	[ 70] _str_index
0x10003C770	0x00000014	[ 70] _str_rindex
0x10003C784	0x000000C3	[ 70] _str_startswith
0x10003C847	0x0000009A	[ 70] _str_endswith
0x10003C8E1	0x00000015	[ 70] _str_strip
0x10003C8F6	0x00000012	[ 70] _str_lstrip
0x10003C908	0x00000015	[ 70] _str_rstrip
0x10003C91D	0x0000008D	[ 70] _mp_obj_str_format
0x10003C9AA	0x00000AE2	[ 70] _mp_obj_str_format_helper
0x10003D48C	0x000002B5	[ 70] _str_replace
0x10003D741	0x00000165	[ 70] _str_count
0x10003D8A6	0x00000014	[ 70] _str_lower
0x10003D8BA	0x00000014	[ 70] _str_upper
0x10003D8CE	0x00000070	[ 70] _str_isspace
0x10003D93E	0x00000070	[ 70] _str_isalpha
0x10003D9AE	0x00000070	[ 70] _str_isdigit
0x10003DA1E	0x00000095	[ 70] _str_isupper
0x10003DAB3	0x00000095	[ 70] _str_islower
0x10003DB48	0x00000064	[ 70] _bytes_decode
0x10003DBAC	0x0000005F	[ 70] _str_encode
0x10003DC0B	0x0000005C	[ 70] _mp_obj_str_get_buffer
0x10003DC67	0x00000083	[ 70] _str_print
0x10003DCEA	0x00000241	[ 70] _bytes_make_new
0x10003DF2B	0x000000D0	[ 70] _bytes_subscr
0x10003DFFB	0x0000002A	[ 70] _mp_obj_new_bytes_iterator
0x10003E025	0x00000017	[ 70] _mp_obj_new_bytes
0x10003E03C	0x00000013	[ 70] _mp_obj_new_str_via_qstr
0x10003E04F	0x000000F7	[ 70] _mp_obj_str_equal
0x10003E146	0x0000003C	[ 70] _mp_obj_str_get_qstr
0x10003E184	0x0000017D	[ 70] _str_finder
0x10003E301	0x000001FE	[ 70] _str_uni_strip
0x10003E4FF	0x00000099	[ 70] _str_caseconv
0x10003E598	0x00000064	[ 70] _bytes_it_iternext
0x10003E5FC	0x00000108	[ 71] _str_index_to_ptr
0x10003E704	0x000001AE	[ 71] _uni_print
0x10003E8B2	0x0000006A	[ 71] _uni_unary_op
0x10003E91C	0x00000167	[ 71] _str_subscr
0x10003EA83	0x0000002A	[ 71] _mp_obj_new_str_iterator
0x10003EAAD	0x0000007E	[ 71] _str_it_iternext
0x10003EB2B	0x00000089	[ 72] _mp_obj_tuple_print
0x10003EBB4	0x00000089	[ 72] _mp_obj_tuple_unary_op
0x10003EC3D	0x000001BF	[ 72] _mp_obj_tuple_binary_op
0x10003EDFC	0x00000050	[ 72] _mp_obj_new_tuple
0x10003EE4C	0x000000CB	[ 72] _mp_obj_tuple_subscr
0x10003EF17	0x000000E6	[ 72] _mp_obj_tuple_make_new
0x10003EFFD	0x0000002A	[ 72] _mp_obj_tuple_getiter
0x10003F027	0x00000043	[ 72] _mp_obj_tuple_get
0x10003F06A	0x00000024	[ 72] _tuple_it_iternext
0x10003F08E	0x00000015	[ 72] _tuple_count
0x10003F0A3	0x0000001B	[ 72] _tuple_index
0x10003F0BE	0x00000054	[ 73] _mp_obj_new_instance
0x10003F112	0x000000B0	[ 73] _instance_count_native_bases
0x10003F1C2	0x00000245	[ 73] _mp_obj_instance_make_new
0x10003F407	0x000001F2	[ 73] _mp_obj_class_lookup
0x10003F5F9	0x000000D2	[ 73] _mp_obj_instance_call
0x10003F6CB	0x000000BE	[ 73] _mp_obj_instance_getiter
0x10003F789	0x00000017	[ 73] _type_print
0x10003F7A0	0x0000005D	[ 73] _type_make_new
0x10003F7FD	0x00000029	[ 73] _type_call
0x10003F826	0x000001D3	[ 73] _type_attr
0x10003F9F9	0x00000293	[ 73] _mp_obj_new_type
0x10003FC8C	0x0000013C	[ 73] _instance_print
0x10003FDC8	0x00000102	[ 73] _instance_unary_op
0x10003FECA	0x000000FC	[ 73] _instance_binary_op
0x10003FFC6	0x00000290	[ 73] _mp_obj_instance_attr
0x100040256	0x000000F3	[ 73] _instance_subscr
0x100040349	0x00000098	[ 73] _instance_get_buffer
0x1000403E1	0x00000053	[ 73] _static_class_method_make_new
0x100040434	0x00000089	[ 73] _mp_obj_is_subclass_fast
0x1000404BD	0x00000036	[ 73] _mp_obj_cast_to_native_base
0x1000404F3	0x0000005B	[ 73] _native_base_init_wrapper
0x10004054E	0x00000027	[ 75] _op_getitem
0x100040575	0x00000031	[ 75] _op_setitem
0x1000405A6	0x00000024	[ 75] _op_delitem
0x1000405CA	0x0000003F	[ 76] _mp_seq_multiply
0x100040609	0x00000056	[ 76] _mp_seq_get_fast_slice_indexes
0x10004065F	0x00000069	[ 76] _mp_seq_extract_slice
0x1000406C8	0x00000091	[ 76] _mp_seq_cmp_bytes
0x100040759	0x000000E4	[ 76] _mp_seq_cmp_objs
0x10004083D	0x000000B3	[ 76] _mp_seq_index_obj
0x1000408F0	0x0000005B	[ 76] _mp_seq_count_obj
0x10004094D	0x0000003D	[ 78] _mp_binary_set_int
0x10004098A	0x00000020	[ 81] _mp_builtin_next
0x1000409AA	0x0000008E	[ 85] _mp_encode_uint
0x100040A38	0x00000080	[ 86] _mp_small_int_mul_overflow
0x100040AB8	0x00000028	[ 86] _mp_small_int_modulo
0x100040AE0	0x0000002E	[ 86] _mp_small_int_floor_divide
0x100040B0E	0x000006D8	[ 87] _main_
0x1000411E6	0x00000037	[ 87] _usage
0x10004121D	0x0000001F	[ 87] _main
0x10004123C	0x00000029	[ 87] _nlr_jump_fail
0x100041265	0x0000000F	[ 87] _stderr_print_strn
0x100041274	0x00000014	[ 88] _gc_collect
0x100041288	0x00000074	[ 89] _gc_helper_collect_regs_and_stack
0x100041300	0x00000030	[  5] _gc_free.cold.1
0x100041330	0x00000030	[  5] _gc_free.cold.2
0x100041360	0x00000030	[  5] _gc_realloc.cold.1
0x100041390	0x00000030	[  5] _gc_realloc.cold.2
0x1000413C0	0x00000023	[  5] _gc_realloc.cold.3
0x1000413E3	0x00000023	[  6] _find_qstr.cold.1
0x100041406	0x00000023	[  7] _vstr_add_char.cold.1
0x10004142B	0x00000023	[  8] _mp_print_mp_int.cold.1
0x10004144E	0x00000023	[  8] _mp_vprintf.cold.1
0x100041471	0x00000023	[ 10] _mpz_need_dig.cold.1
0x100041494	0x00000023	[ 10] _mpz_set_from_str.cold.1
0x1000414B7	0x00000023	[ 10] _mpz_or_inpl.cold.1
0x1000414DA	0x00000023	[ 10] _mpz_clone.cold.1
0x1000414FD	0x00000023	[ 10] _mpz_divmod_inpl.cold.1
0x100041520	0x00000023	[ 10] _mpz_as_str_inpl.cold.1
0x100041543	0x00000023	[ 10] _mpz_as_str_inpl.cold.2
0x100041568	0x00000023	[ 13] _mp_parse.cold.1
0x10004158B	0x00000023	[ 13] _mp_parse.cold.2
0x1000415AE	0x00000023	[ 13] _mp_parse.cold.3
0x1000415D1	0x00000023	[ 13] _mp_parse.cold.4
0x1000415F4	0x00000023	[ 13] _mp_parse.cold.5
0x100041617	0x00000023	[ 13] _mp_parse.cold.6
0x10004163A	0x00000023	[ 13] _mp_parse.cold.7
0x10004165D	0x00000023	[ 13] _mp_parse.cold.8
0x100041680	0x00000023	[ 13] _mp_parse.cold.9
0x1000416A3	0x00000023	[ 13] _mp_parse.cold.10
0x1000416C6	0x00000023	[ 13] _mp_parse.cold.11
0x1000416E9	0x00000023	[ 13] _push_rule_from_arg.cold.1
0x10004170C	0x00000023	[ 13] _pop_result.cold.1
0x10004172F	0x00000023	[ 13] _push_result_rule.cold.1
0x100041752	0x00000023	[ 13] _push_result_rule.cold.2
0x100041775	0x00000023	[ 13] _push_result_rule.cold.3
0x100041798	0x00000023	[ 13] _push_result_rule.cold.4
0x1000417BB	0x00000023	[ 13] _push_result_rule.cold.5
0x1000417DE	0x00000023	[ 13] _push_result_rule.cold.6
0x100041801	0x00000023	[ 13] _push_result_rule.cold.7
0x100041824	0x00000023	[ 13] _push_result_rule.cold.8
0x100041847	0x00000023	[ 13] _push_result_rule.cold.9
0x10004186A	0x00000023	[ 13] _push_result_rule.cold.10
0x10004188D	0x00000023	[ 13] _push_result_rule.cold.11
0x1000418B0	0x00000023	[ 13] _push_result_rule.cold.12
0x1000418D3	0x00000023	[ 13] _push_result_rule.cold.13
0x1000418F6	0x00000023	[ 13] _push_result_rule.cold.14
0x100041919	0x00000023	[ 13] _push_result_rule.cold.15
0x10004193C	0x00000023	[ 13] _push_result_rule.cold.16
0x10004195F	0x00000023	[ 13] _push_result_rule.cold.17
0x100041982	0x00000023	[ 13] _push_result_rule.cold.18
0x1000419A5	0x00000023	[ 13] _push_result_rule.cold.19
0x1000419C8	0x00000023	[ 13] _push_result_rule.cold.20
0x1000419EB	0x00000023	[ 13] _push_result_rule.cold.21
0x100041A0E	0x00000023	[ 13] _push_result_rule.cold.22
0x100041A31	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.1
0x100041A54	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.2
0x100041A77	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.3
0x100041A9A	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.4
0x100041ABD	0x00000023	[ 13] _mp_parse_node_convert_to_obj.cold.5
0x100041AE0	0x00000023	[ 13] _peek_rule.cold.1
0x100041B03	0x00000023	[ 13] _build_tuple_from_stack.cold.1
0x100041B26	0x00000021	[ 14] _scope_new.cold.1
0x100041B47	0x00000023	[ 14] _scope_check_to_close_over.cold.1
0x100041B6A	0x00000021	[ 14] _scope_check_to_close_over.cold.2
0x100041B8D	0x00000023	[ 15] _mp_compile_to_raw_code.cold.1
0x100041BB0	0x00000023	[ 15] _compile_scope_inline_asm.cold.1
0x100041BD3	0x00000023	[ 15] _compile_scope_inline_asm.cold.2
0x100041BF6	0x00000023	[ 15] _compile_scope_inline_asm.cold.3
0x100041C19	0x00000023	[ 15] _compile_scope_inline_asm.cold.4
0x100041C3C	0x00000023	[ 15] _compile_scope.cold.1
0x100041C5F	0x00000023	[ 15] _compile_scope.cold.2
0x100041C82	0x00000023	[ 15] _compile_scope.cold.3
0x100041CA5	0x00000023	[ 15] _compile_scope.cold.4
0x100041CC8	0x00000023	[ 15] _compile_scope.cold.5
0x100041CEB	0x00000023	[ 15] _compile_scope.cold.6
0x100041D0E	0x00000023	[ 15] _compile_scope.cold.7
0x100041D31	0x00000023	[ 15] _compile_scope.cold.8
0x100041D54	0x00000023	[ 15] _compile_scope.cold.9
0x100041D77	0x00000023	[ 15] _compile_scope.cold.10
0x100041D9A	0x00000023	[ 15] _compile_scope.cold.11
0x100041DBD	0x00000023	[ 15] _compile_scope.cold.12
0x100041DE0	0x00000023	[ 15] _compile_scope.cold.13
0x100041E03	0x00000023	[ 15] _compile_node.cold.1
0x100041E26	0x00000023	[ 15] _compile_scope_comp_iter.cold.1
0x100041E49	0x00000023	[ 15] _compile_decorated.cold.1
0x100041E6C	0x00000023	[ 15] _compile_decorated.cold.2
0x100041E8F	0x00000023	[ 15] _compile_decorated.cold.3
0x100041EB2	0x00000023	[ 15] _compile_decorated.cold.4
0x100041ED5	0x00000023	[ 15] _compile_expr_stmt.cold.1
0x100041EF8	0x00000023	[ 15] _compile_break_cont_stmt.cold.1
0x100041F1B	0x00000023	[ 15] _compile_import_from.cold.1
0x100041F3E	0x00000023	[ 15] _compile_import_from.cold.2
0x100041F61	0x00000023	[ 15] _compile_import_from.cold.3
0x100041F84	0x00000023	[ 15] _compile_async_stmt.cold.1
0x100041FA7	0x00000023	[ 15] _compile_async_stmt.cold.2
0x100041FCA	0x00000023	[ 15] _compile_async_stmt.cold.3
0x100041FED	0x00000023	[ 15] _compile_if_stmt.cold.1
0x100042010	0x00000023	[ 15] _compile_for_stmt.cold.1
0x100042033	0x00000023	[ 15] _compile_try_stmt.cold.1
0x100042056	0x00000023	[ 15] _compile_with_stmt.cold.1
0x100042079	0x00000023	[ 15] _compile_test_if_expr.cold.1
0x10004209C	0x00000023	[ 15] _compile_comparison.cold.1
0x1000420BF	0x00000023	[ 15] _compile_comparison.cold.2
0x1000420E2	0x00000023	[ 15] _compile_factor_2.cold.1
0x100042105	0x00000023	[ 15] _compile_atom_paren.cold.1
0x100042128	0x00000023	[ 15] _compile_atom_brace.cold.1
0x10004214B	0x00000023	[ 15] _compile_atom_brace.cold.2
0x10004216E	0x00000023	[ 15] _compile_subscript.cold.1
0x100042191	0x00000023	[ 15] _compile_subscript.cold.2
0x1000421B4	0x00000023	[ 15] _compile_subscript.cold.3
0x1000421D7	0x00000023	[ 15] _compile_subscript.cold.4
0x1000421FA	0x00000023	[ 15] _compile_funcdef_lambdef_param.cold.1
0x10004221D	0x00000023	[ 15] _compile_funcdef_lambdef_param.cold.2
0x100042240	0x00000023	[ 15] _close_over_variables_etc.cold.1
0x100042263	0x00000023	[ 15] _close_over_variables_etc.cold.2
0x100042286	0x00000023	[ 15] _compile_comprehension.cold.1
0x1000422A9	0x00000023	[ 15] _compile_comprehension.cold.2
0x1000422CC	0x00000023	[ 15] _c_assign.cold.1
0x1000422EF	0x00000023	[ 15] _c_assign.cold.2
0x100042312	0x00000023	[ 15] _c_assign.cold.3
0x100042335	0x00000023	[ 15] _c_assign.cold.4
0x100042358	0x00000023	[ 15] _c_del_stmt.cold.1
0x10004237B	0x00000023	[ 15] _c_del_stmt.cold.2
0x10004239E	0x00000023	[ 15] _c_del_stmt.cold.3
0x1000423C1	0x00000023	[ 15] _c_if_cond.cold.1
0x1000423E4	0x00000023	[ 15] _do_import_name.cold.1
0x100042407	0x00000023	[ 15] _compile_decrease_except_level.cold.1
0x10004242A	0x00000023	[ 15] _compile_try_finally.cold.1
0x10004244D	0x00000023	[ 15] _compile_try_except.cold.1
0x100042470	0x00000023	[ 15] _compile_scope_func_lambda_param.cold.1
0x100042493	0x00000023	[ 15] _compile_scope_func_lambda_param.cold.2
0x1000424B6	0x00000023	[ 15] _compile_scope_func_lambda_param.cold.3
0x1000424DC	0x00000021	[ 16] _mp_emit_common_id_op.cold.1
0x1000424FD	0x00000021	[ 16] _mp_emit_common_id_op.cold.2
0x10004251E	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.1
0x100042541	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.2
0x100042564	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.3
0x100042587	0x00000023	[ 17] _mp_emit_bc_end_pass.cold.4
0x1000425AA	0x00000023	[ 17] _mp_emit_bc_adjust_stack_size.cold.1
0x1000425CD	0x00000021	[ 17] _mp_emit_bc_set_source_line.cold.1
0x1000425EE	0x00000023	[ 17] _mp_emit_bc_label_assign.cold.1
0x100042611	0x00000023	[ 17] _mp_emit_bc_label_assign.cold.2
0x100042634	0x00000023	[ 17] _mp_emit_bc_load_const_small_int.cold.1
0x100042657	0x00000023	[ 17] _emit_write_bytecode_byte_label.cold.1
0x10004267A	0x00000023	[ 17] _emit_write_bytecode_byte_label.cold.2
0x10004269D	0x00000023	[ 17] _mp_emit_bc_make_closure.cold.1
0x1000426C0	0x00000023	[ 17] _mp_emit_bc_raise_varargs.cold.1
0x1000426E3	0x00000021	[ 17] _emit_get_cur_to_write_code_info.cold.1
0x100042704	0x00000023	[ 17] _emit_get_cur_to_write_bytecode.cold.1
0x100042727	0x00000021	[ 18] _mp_asm_base_start_pass.cold.1
0x100042748	0x00000021	[ 18] _mp_asm_base_get_cur_to_write_bytes.cold.1
0x100042769	0x00000021	[ 18] _mp_asm_base_label_assign.cold.1
0x10004278A	0x00000021	[ 18] _mp_asm_base_label_assign.cold.2
0x1000427AB	0x00000021	[ 18] _mp_asm_base_label_assign.cold.3
0x1000427CC	0x00000023	[ 19] _asm_x64_test_r8_with_r8.cold.1
0x1000427EF	0x00000023	[ 19] _asm_x64_test_r8_with_r8.cold.2
0x100042812	0x00000023	[ 19] _asm_x64_setcc_r8.cold.1
0x100042835	0x00000023	[ 19] _asm_x64_jmp_reg.cold.1
0x100042858	0x00000023	[ 19] _asm_x64_jmp_label.cold.1
0x10004287B	0x00000023	[ 19] _asm_x64_jcc_label.cold.1
0x10004289E	0x00000023	[ 19] _asm_x64_entry.cold.1
0x1000428C1	0x00000023	[ 19] _asm_x64_mov_reg_pcrel.cold.1
0x1000428E4	0x00000023	[ 19] _asm_x64_call_ind.cold.1
0x100042908	0x00000023	[ 20] _emit_native_start_pass.cold.1
0x10004292B	0x00000023	[ 20] _emit_native_end_pass.cold.1
0x10004294E	0x00000023	[ 20] _emit_native_end_pass.cold.2
0x100042971	0x00000023	[ 20] _emit_native_end_pass.cold.3
0x100042994	0x00000023	[ 20] _emit_native_end_pass.cold.4
0x1000429B7	0x00000023	[ 20] _emit_native_store_global.cold.1
0x1000429DA	0x00000023	[ 20] _emit_native_import.cold.1
0x1000429FD	0x00000023	[ 20] _emit_native_import.cold.2
0x100042A20	0x00000023	[ 20] _emit_native_import.cold.3
0x100042A43	0x00000023	[ 20] _emit_native_import.cold.4
0x100042A66	0x00000023	[ 20] _emit_native_load_method.cold.1
0x100042A89	0x00000023	[ 20] _emit_native_subscr.cold.1
0x100042AAC	0x00000023	[ 20] _emit_native_subscr.cold.2
0x100042ACF	0x00000023	[ 20] _emit_native_attr.cold.1
0x100042AF2	0x00000023	[ 20] _emit_native_attr.cold.2
0x100042B15	0x00000023	[ 20] _emit_native_attr.cold.3
0x100042B38	0x00000023	[ 20] _emit_native_attr.cold.4
0x100042B5B	0x00000023	[ 20] _emit_native_setup_block.cold.1
0x100042B7E	0x00000023	[ 20] _emit_native_end_finally.cold.1
0x100042BA1	0x00000023	[ 20] _emit_native_end_finally.cold.2
0x100042BC4	0x00000023	[ 20] _emit_native_get_iter.cold.1
0x100042BE7	0x00000023	[ 20] _emit_native_build.cold.1
0x100042C0A	0x00000023	[ 20] _emit_native_build.cold.2
0x100042C2D	0x00000023	[ 20] _emit_native_build.cold.3
0x100042C50	0x00000023	[ 20] _emit_native_build.cold.4
0x100042C73	0x00000023	[ 20] _emit_native_build.cold.5
0x100042C96	0x00000023	[ 20] _emit_native_build.cold.6
0x100042CB9	0x00000023	[ 20] _emit_native_store_map.cold.1
0x100042CDC	0x00000023	[ 20] _emit_native_store_map.cold.2
0x100042CFF	0x00000023	[ 20] _emit_native_store_map.cold.3
0x100042D22	0x00000023	[ 20] _emit_native_store_comp.cold.1
0x100042D45	0x00000023	[ 20] _emit_native_store_comp.cold.2
0x100042D68	0x00000023	[ 20] _emit_native_store_comp.cold.3
0x100042D8B	0x00000023	[ 20] _emit_native_store_comp.cold.4
0x100042DAE	0x00000023	[ 20] _emit_native_store_comp.cold.5
0x100042DD1	0x00000023	[ 20] _emit_native_unpack_sequence.cold.1
0x100042DF4	0x00000023	[ 20] _emit_native_unpack_ex.cold.1
0x100042E17	0x00000023	[ 20] _emit_native_call_function.cold.1
0x100042E3A	0x00000023	[ 20] _emit_native_call_function.cold.2
0x100042E5D	0x00000023	[ 20] _emit_native_call_function.cold.3
0x100042E80	0x00000023	[ 20] _emit_native_return_value.cold.1
0x100042EA3	0x00000023	[ 20] _emit_native_raise_varargs.cold.1
0x100042EC6	0x00000023	[ 20] _adjust_stack.cold.1
0x100042EE9	0x00000023	[ 20] _adjust_stack.cold.2
0x100042F0C	0x00000023	[ 20] _emit_native_leave_exc_stack.cold.1
0x100042F2F	0x00000023	[ 20] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100042F52	0x00000023	[ 21] _asm_x86_jmp_label.cold.1
0x100042F75	0x00000023	[ 21] _asm_x86_jcc_label.cold.1
0x100042F98	0x00000023	[ 21] _asm_x86_entry.cold.1
0x100042FBB	0x00000023	[ 21] _asm_x86_mov_reg_pcrel.cold.1
0x100042FDE	0x00000023	[ 21] _asm_x86_call_ind.cold.1
0x100043002	0x00000023	[ 22] _emit_native_start_pass.cold.1
0x100043025	0x00000023	[ 22] _emit_native_end_pass.cold.1
0x100043048	0x00000023	[ 22] _emit_native_end_pass.cold.2
0x10004306B	0x00000023	[ 22] _emit_native_end_pass.cold.3
0x10004308E	0x00000023	[ 22] _emit_native_end_pass.cold.4
0x1000430B1	0x00000023	[ 22] _emit_native_store_global.cold.1
0x1000430D4	0x00000023	[ 22] _emit_native_import.cold.1
0x1000430F7	0x00000023	[ 22] _emit_native_import.cold.2
0x10004311A	0x00000023	[ 22] _emit_native_import.cold.3
0x10004313D	0x00000023	[ 22] _emit_native_import.cold.4
0x100043160	0x00000023	[ 22] _emit_native_load_method.cold.1
0x100043183	0x00000023	[ 22] _emit_native_subscr.cold.1
0x1000431A6	0x00000023	[ 22] _emit_native_subscr.cold.2
0x1000431C9	0x00000023	[ 22] _emit_native_attr.cold.1
0x1000431EC	0x00000023	[ 22] _emit_native_attr.cold.2
0x10004320F	0x00000023	[ 22] _emit_native_attr.cold.3
0x100043232	0x00000023	[ 22] _emit_native_attr.cold.4
0x100043255	0x00000023	[ 22] _emit_native_setup_block.cold.1
0x100043278	0x00000023	[ 22] _emit_native_end_finally.cold.1
0x10004329B	0x00000023	[ 22] _emit_native_end_finally.cold.2
0x1000432BE	0x00000023	[ 22] _emit_native_get_iter.cold.1
0x1000432E1	0x00000023	[ 22] _emit_native_build.cold.1
0x100043304	0x00000023	[ 22] _emit_native_build.cold.2
0x100043327	0x00000023	[ 22] _emit_native_build.cold.3
0x10004334A	0x00000023	[ 22] _emit_native_build.cold.4
0x10004336D	0x00000023	[ 22] _emit_native_build.cold.5
0x100043390	0x00000023	[ 22] _emit_native_build.cold.6
0x1000433B3	0x00000023	[ 22] _emit_native_store_map.cold.1
0x1000433D6	0x00000023	[ 22] _emit_native_store_map.cold.2
0x1000433F9	0x00000023	[ 22] _emit_native_store_map.cold.3
0x10004341C	0x00000023	[ 22] _emit_native_store_comp.cold.1
0x10004343F	0x00000023	[ 22] _emit_native_store_comp.cold.2
0x100043462	0x00000023	[ 22] _emit_native_store_comp.cold.3
0x100043485	0x00000023	[ 22] _emit_native_store_comp.cold.4
0x1000434A8	0x00000023	[ 22] _emit_native_store_comp.cold.5
0x1000434CB	0x00000023	[ 22] _emit_native_unpack_sequence.cold.1
0x1000434EE	0x00000023	[ 22] _emit_native_unpack_ex.cold.1
0x100043511	0x00000023	[ 22] _emit_native_call_function.cold.1
0x100043534	0x00000023	[ 22] _emit_native_call_function.cold.2
0x100043557	0x00000023	[ 22] _emit_native_call_function.cold.3
0x10004357A	0x00000023	[ 22] _emit_native_return_value.cold.1
0x10004359D	0x00000023	[ 22] _emit_native_raise_varargs.cold.1
0x1000435C0	0x00000023	[ 22] _adjust_stack.cold.1
0x1000435E3	0x00000023	[ 22] _adjust_stack.cold.2
0x100043606	0x00000023	[ 22] _emit_native_leave_exc_stack.cold.1
0x100043629	0x00000023	[ 22] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x10004364C	0x00000021	[ 23] _asm_thumb_entry.cold.1
0x10004366D	0x00000023	[ 23] _asm_thumb_format_4.cold.1
0x100043690	0x00000023	[ 23] _asm_thumb_format_4.cold.2
0x1000436B3	0x00000023	[ 23] _asm_thumb_mov_reg_i16.cold.1
0x1000436D6	0x00000023	[ 23] _asm_thumb_b_n_label.cold.1
0x1000436F9	0x00000023	[ 23] _asm_thumb_bcc_nw_label.cold.1
0x10004371C	0x00000023	[ 23] _asm_thumb_bl_label.cold.1
0x10004373F	0x00000023	[ 23] _asm_thumb_mov_reg_i32.cold.1
0x100043762	0x00000023	[ 23] _asm_thumb_mov_reg_i32.cold.2
0x100043785	0x00000023	[ 23] _asm_thumb_mov_reg_i32_optimised.cold.1
0x1000437A8	0x00000023	[ 23] _asm_thumb_mov_reg_i32_optimised.cold.2
0x1000437CB	0x00000023	[ 23] _asm_thumb_mov_rlo_i16.cold.1
0x1000437EE	0x00000023	[ 23] _asm_thumb_mov_local_reg.cold.1
0x100043811	0x00000023	[ 23] _asm_thumb_mov_local_check.cold.1
0x100043834	0x00000023	[ 23] _asm_thumb_mov_reg_local.cold.1
0x100043857	0x00000023	[ 23] _asm_thumb_mov_reg_local_addr.cold.1
0x10004387A	0x00000023	[ 23] _asm_thumb_mov_reg_local_addr.cold.2
0x10004389D	0x00000023	[ 23] _asm_thumb_mov_reg_pcrel.cold.1
0x1000438C0	0x00000023	[ 23] _asm_thumb_mov_reg_pcrel.cold.2
0x1000438E3	0x00000023	[ 23] _asm_thumb_mov_reg_pcrel.cold.3
0x100043906	0x00000023	[ 23] _asm_thumb_add_reg_reg_offset.cold.1
0x100043929	0x00000023	[ 23] _asm_thumb_b_label.cold.1
0x10004394C	0x00000023	[ 23] _asm_thumb_bcc_label.cold.1
0x10004396F	0x00000023	[ 23] _asm_thumb_bcc_rel9.cold.1
0x100043992	0x00000023	[ 23] _asm_thumb_b_rel12.cold.1
0x1000439B7	0x00000023	[ 24] _emit_native_start_pass.cold.1
0x1000439DA	0x00000023	[ 24] _emit_native_end_pass.cold.1
0x1000439FD	0x00000023	[ 24] _emit_native_end_pass.cold.2
0x100043A20	0x00000023	[ 24] _emit_native_end_pass.cold.3
0x100043A43	0x00000023	[ 24] _emit_native_end_pass.cold.4
0x100043A66	0x00000023	[ 24] _emit_native_store_global.cold.1
0x100043A89	0x00000023	[ 24] _emit_native_import.cold.1
0x100043AAC	0x00000023	[ 24] _emit_native_import.cold.2
0x100043ACF	0x00000023	[ 24] _emit_native_import.cold.3
0x100043AF2	0x00000023	[ 24] _emit_native_import.cold.4
0x100043B15	0x00000023	[ 24] _emit_native_load_method.cold.1
0x100043B38	0x00000023	[ 24] _emit_native_subscr.cold.1
0x100043B5B	0x00000023	[ 24] _emit_native_subscr.cold.2
0x100043B7E	0x00000023	[ 24] _emit_native_attr.cold.1
0x100043BA1	0x00000023	[ 24] _emit_native_attr.cold.2
0x100043BC4	0x00000023	[ 24] _emit_native_attr.cold.3
0x100043BE7	0x00000023	[ 24] _emit_native_attr.cold.4
0x100043C0A	0x00000023	[ 24] _emit_native_setup_block.cold.1
0x100043C2D	0x00000023	[ 24] _emit_native_end_finally.cold.1
0x100043C50	0x00000023	[ 24] _emit_native_end_finally.cold.2
0x100043C73	0x00000023	[ 24] _emit_native_get_iter.cold.1
0x100043C96	0x00000023	[ 24] _emit_native_build.cold.1
0x100043CB9	0x00000023	[ 24] _emit_native_build.cold.2
0x100043CDC	0x00000023	[ 24] _emit_native_build.cold.3
0x100043CFF	0x00000023	[ 24] _emit_native_build.cold.4
0x100043D22	0x00000023	[ 24] _emit_native_build.cold.5
0x100043D45	0x00000023	[ 24] _emit_native_build.cold.6
0x100043D68	0x00000023	[ 24] _emit_native_store_map.cold.1
0x100043D8B	0x00000023	[ 24] _emit_native_store_map.cold.2
0x100043DAE	0x00000023	[ 24] _emit_native_store_map.cold.3
0x100043DD1	0x00000023	[ 24] _emit_native_store_comp.cold.1
0x100043DF4	0x00000023	[ 24] _emit_native_store_comp.cold.2
0x100043E17	0x00000023	[ 24] _emit_native_store_comp.cold.3
0x100043E3A	0x00000023	[ 24] _emit_native_store_comp.cold.4
0x100043E5D	0x00000023	[ 24] _emit_native_store_comp.cold.5
0x100043E80	0x00000023	[ 24] _emit_native_unpack_sequence.cold.1
0x100043EA3	0x00000023	[ 24] _emit_native_unpack_ex.cold.1
0x100043EC6	0x00000023	[ 24] _emit_native_call_function.cold.1
0x100043EE9	0x00000023	[ 24] _emit_native_call_function.cold.2
0x100043F0C	0x00000023	[ 24] _emit_native_call_function.cold.3
0x100043F2F	0x00000023	[ 24] _emit_native_return_value.cold.1
0x100043F52	0x00000023	[ 24] _emit_native_raise_varargs.cold.1
0x100043F75	0x00000023	[ 24] _adjust_stack.cold.1
0x100043F98	0x00000023	[ 24] _adjust_stack.cold.2
0x100043FBB	0x00000023	[ 24] _emit_native_leave_exc_stack.cold.1
0x100043FDE	0x00000023	[ 24] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100044002	0x00000023	[ 25] _emit_inline_thumb_label.cold.1
0x100044025	0x00000023	[ 25] _emit_inline_thumb_op.cold.1
0x100044048	0x00000023	[ 25] _emit_inline_thumb_op.cold.2
0x10004406B	0x00000023	[ 25] _emit_inline_thumb_op.cold.3
0x10004408E	0x00000023	[ 25] _emit_inline_thumb_op.cold.4
0x1000440B1	0x00000023	[ 25] _emit_inline_thumb_op.cold.5
0x1000440D4	0x00000023	[ 25] _get_arg_reglist.cold.1
0x1000440F7	0x00000023	[ 25] _get_arg_reglist.cold.2
0x10004411A	0x00000023	[ 26] _asm_arm_entry.cold.1
0x10004413D	0x00000021	[ 26] _asm_arm_mul_reg_reg_reg.cold.1
0x10004415E	0x00000023	[ 26] _asm_arm_mov_reg_pcrel.cold.1
0x100044181	0x00000023	[ 26] _asm_arm_bcc_label.cold.1
0x1000441A4	0x00000023	[ 26] _asm_arm_bl_ind.cold.1
0x1000441C8	0x00000023	[ 27] _emit_native_start_pass.cold.1
0x1000441EB	0x00000023	[ 27] _emit_native_end_pass.cold.1
0x10004420E	0x00000023	[ 27] _emit_native_end_pass.cold.2
0x100044231	0x00000023	[ 27] _emit_native_end_pass.cold.3
0x100044254	0x00000023	[ 27] _emit_native_end_pass.cold.4
0x100044277	0x00000023	[ 27] _emit_native_store_global.cold.1
0x10004429A	0x00000023	[ 27] _emit_native_import.cold.1
0x1000442BD	0x00000023	[ 27] _emit_native_import.cold.2
0x1000442E0	0x00000023	[ 27] _emit_native_import.cold.3
0x100044303	0x00000023	[ 27] _emit_native_import.cold.4
0x100044326	0x00000023	[ 27] _emit_native_load_method.cold.1
0x100044349	0x00000023	[ 27] _emit_native_subscr.cold.1
0x10004436C	0x00000023	[ 27] _emit_native_subscr.cold.2
0x10004438F	0x00000023	[ 27] _emit_native_attr.cold.1
0x1000443B2	0x00000023	[ 27] _emit_native_attr.cold.2
0x1000443D5	0x00000023	[ 27] _emit_native_attr.cold.3
0x1000443F8	0x00000023	[ 27] _emit_native_attr.cold.4
0x10004441B	0x00000023	[ 27] _emit_native_setup_block.cold.1
0x10004443E	0x00000023	[ 27] _emit_native_end_finally.cold.1
0x100044461	0x00000023	[ 27] _emit_native_end_finally.cold.2
0x100044484	0x00000023	[ 27] _emit_native_get_iter.cold.1
0x1000444A7	0x00000023	[ 27] _emit_native_build.cold.1
0x1000444CA	0x00000023	[ 27] _emit_native_build.cold.2
0x1000444ED	0x00000023	[ 27] _emit_native_build.cold.3
0x100044510	0x00000023	[ 27] _emit_native_build.cold.4
0x100044533	0x00000023	[ 27] _emit_native_build.cold.5
0x100044556	0x00000023	[ 27] _emit_native_build.cold.6
0x100044579	0x00000023	[ 27] _emit_native_store_map.cold.1
0x10004459C	0x00000023	[ 27] _emit_native_store_map.cold.2
0x1000445BF	0x00000023	[ 27] _emit_native_store_map.cold.3
0x1000445E2	0x00000023	[ 27] _emit_native_store_comp.cold.1
0x100044605	0x00000023	[ 27] _emit_native_store_comp.cold.2
0x100044628	0x00000023	[ 27] _emit_native_store_comp.cold.3
0x10004464B	0x00000023	[ 27] _emit_native_store_comp.cold.4
0x10004466E	0x00000023	[ 27] _emit_native_store_comp.cold.5
0x100044691	0x00000023	[ 27] _emit_native_unpack_sequence.cold.1
0x1000446B4	0x00000023	[ 27] _emit_native_unpack_ex.cold.1
0x1000446D7	0x00000023	[ 27] _emit_native_call_function.cold.1
0x1000446FA	0x00000023	[ 27] _emit_native_call_function.cold.2
0x10004471D	0x00000023	[ 27] _emit_native_call_function.cold.3
0x100044740	0x00000023	[ 27] _emit_native_return_value.cold.1
0x100044763	0x00000023	[ 27] _emit_native_raise_varargs.cold.1
0x100044786	0x00000023	[ 27] _adjust_stack.cold.1
0x1000447A9	0x00000023	[ 27] _adjust_stack.cold.2
0x1000447CC	0x00000023	[ 27] _emit_native_leave_exc_stack.cold.1
0x1000447EF	0x00000023	[ 27] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100044812	0x00000021	[ 28] _asm_xtensa_j_label.cold.1
0x100044833	0x00000021	[ 28] _asm_xtensa_bccz_reg_label.cold.1
0x100044854	0x00000021	[ 28] _asm_xtensa_bcc_reg_reg_label.cold.1
0x100044875	0x00000021	[ 28] _asm_xtensa_mov_reg_pcrel.cold.1
0x100044899	0x00000023	[ 29] _emit_native_start_pass.cold.1
0x1000448BC	0x00000023	[ 29] _emit_native_end_pass.cold.1
0x1000448DF	0x00000023	[ 29] _emit_native_end_pass.cold.2
0x100044902	0x00000023	[ 29] _emit_native_end_pass.cold.3
0x100044925	0x00000023	[ 29] _emit_native_end_pass.cold.4
0x100044948	0x00000023	[ 29] _emit_native_store_global.cold.1
0x10004496B	0x00000023	[ 29] _emit_native_import.cold.1
0x10004498E	0x00000023	[ 29] _emit_native_import.cold.2
0x1000449B1	0x00000023	[ 29] _emit_native_import.cold.3
0x1000449D4	0x00000023	[ 29] _emit_native_import.cold.4
0x1000449F7	0x00000023	[ 29] _emit_native_load_method.cold.1
0x100044A1A	0x00000023	[ 29] _emit_native_subscr.cold.1
0x100044A3D	0x00000023	[ 29] _emit_native_subscr.cold.2
0x100044A60	0x00000023	[ 29] _emit_native_attr.cold.1
0x100044A83	0x00000023	[ 29] _emit_native_attr.cold.2
0x100044AA6	0x00000023	[ 29] _emit_native_attr.cold.3
0x100044AC9	0x00000023	[ 29] _emit_native_attr.cold.4
0x100044AEC	0x00000023	[ 29] _emit_native_setup_block.cold.1
0x100044B0F	0x00000023	[ 29] _emit_native_end_finally.cold.1
0x100044B32	0x00000023	[ 29] _emit_native_end_finally.cold.2
0x100044B55	0x00000023	[ 29] _emit_native_get_iter.cold.1
0x100044B78	0x00000023	[ 29] _emit_native_build.cold.1
0x100044B9B	0x00000023	[ 29] _emit_native_build.cold.2
0x100044BBE	0x00000023	[ 29] _emit_native_build.cold.3
0x100044BE1	0x00000023	[ 29] _emit_native_build.cold.4
0x100044C04	0x00000023	[ 29] _emit_native_build.cold.5
0x100044C27	0x00000023	[ 29] _emit_native_build.cold.6
0x100044C4A	0x00000023	[ 29] _emit_native_store_map.cold.1
0x100044C6D	0x00000023	[ 29] _emit_native_store_map.cold.2
0x100044C90	0x00000023	[ 29] _emit_native_store_map.cold.3
0x100044CB3	0x00000023	[ 29] _emit_native_store_comp.cold.1
0x100044CD6	0x00000023	[ 29] _emit_native_store_comp.cold.2
0x100044CF9	0x00000023	[ 29] _emit_native_store_comp.cold.3
0x100044D1C	0x00000023	[ 29] _emit_native_store_comp.cold.4
0x100044D3F	0x00000023	[ 29] _emit_native_store_comp.cold.5
0x100044D62	0x00000023	[ 29] _emit_native_unpack_sequence.cold.1
0x100044D85	0x00000023	[ 29] _emit_native_unpack_ex.cold.1
0x100044DA8	0x00000023	[ 29] _emit_native_call_function.cold.1
0x100044DCB	0x00000023	[ 29] _emit_native_call_function.cold.2
0x100044DEE	0x00000023	[ 29] _emit_native_call_function.cold.3
0x100044E11	0x00000023	[ 29] _emit_native_return_value.cold.1
0x100044E34	0x00000023	[ 29] _emit_native_raise_varargs.cold.1
0x100044E57	0x00000023	[ 29] _adjust_stack.cold.1
0x100044E7A	0x00000023	[ 29] _adjust_stack.cold.2
0x100044E9D	0x00000023	[ 29] _emit_native_leave_exc_stack.cold.1
0x100044EC0	0x00000023	[ 29] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x100044EE3	0x00000021	[ 30] _emit_inline_xtensa_label.cold.1
0x100044F04	0x00000023	[ 31] _emit_native_start_pass.cold.1
0x100044F27	0x00000023	[ 31] _emit_native_end_pass.cold.1
0x100044F4A	0x00000023	[ 31] _emit_native_end_pass.cold.2
0x100044F6D	0x00000023	[ 31] _emit_native_end_pass.cold.3
0x100044F90	0x00000023	[ 31] _emit_native_end_pass.cold.4
0x100044FB3	0x00000023	[ 31] _emit_native_store_global.cold.1
0x100044FD6	0x00000023	[ 31] _emit_native_import.cold.1
0x100044FF9	0x00000023	[ 31] _emit_native_import.cold.2
0x10004501C	0x00000023	[ 31] _emit_native_import.cold.3
0x10004503F	0x00000023	[ 31] _emit_native_import.cold.4
0x100045062	0x00000023	[ 31] _emit_native_load_method.cold.1
0x100045085	0x00000023	[ 31] _emit_native_subscr.cold.1
0x1000450A8	0x00000023	[ 31] _emit_native_subscr.cold.2
0x1000450CB	0x00000023	[ 31] _emit_native_attr.cold.1
0x1000450EE	0x00000023	[ 31] _emit_native_attr.cold.2
0x100045111	0x00000023	[ 31] _emit_native_attr.cold.3
0x100045134	0x00000023	[ 31] _emit_native_attr.cold.4
0x100045157	0x00000023	[ 31] _emit_native_setup_block.cold.1
0x10004517A	0x00000023	[ 31] _emit_native_end_finally.cold.1
0x10004519D	0x00000023	[ 31] _emit_native_end_finally.cold.2
0x1000451C0	0x00000023	[ 31] _emit_native_get_iter.cold.1
0x1000451E3	0x00000023	[ 31] _emit_native_build.cold.1
0x100045206	0x00000023	[ 31] _emit_native_build.cold.2
0x100045229	0x00000023	[ 31] _emit_native_build.cold.3
0x10004524C	0x00000023	[ 31] _emit_native_build.cold.4
0x10004526F	0x00000023	[ 31] _emit_native_build.cold.5
0x100045292	0x00000023	[ 31] _emit_native_build.cold.6
0x1000452B5	0x00000023	[ 31] _emit_native_store_map.cold.1
0x1000452D8	0x00000023	[ 31] _emit_native_store_map.cold.2
0x1000452FB	0x00000023	[ 31] _emit_native_store_map.cold.3
0x10004531E	0x00000023	[ 31] _emit_native_store_comp.cold.1
0x100045341	0x00000023	[ 31] _emit_native_store_comp.cold.2
0x100045364	0x00000023	[ 31] _emit_native_store_comp.cold.3
0x100045387	0x00000023	[ 31] _emit_native_store_comp.cold.4
0x1000453AA	0x00000023	[ 31] _emit_native_store_comp.cold.5
0x1000453CD	0x00000023	[ 31] _emit_native_unpack_sequence.cold.1
0x1000453F0	0x00000023	[ 31] _emit_native_unpack_ex.cold.1
0x100045413	0x00000023	[ 31] _emit_native_call_function.cold.1
0x100045436	0x00000023	[ 31] _emit_native_call_function.cold.2
0x100045459	0x00000023	[ 31] _emit_native_call_function.cold.3
0x10004547C	0x00000023	[ 31] _emit_native_return_value.cold.1
0x10004549F	0x00000023	[ 31] _emit_native_raise_varargs.cold.1
0x1000454C2	0x00000023	[ 31] _adjust_stack.cold.1
0x1000454E5	0x00000023	[ 31] _adjust_stack.cold.2
0x100045508	0x00000023	[ 31] _emit_native_leave_exc_stack.cold.1
0x10004552B	0x00000023	[ 31] _emit_get_stack_pointer_to_reg_for_pop.cold.1
0x10004554E	0x00000023	[ 32] _mp_format_float.cold.1
0x100045571	0x00000023	[ 32] _mp_format_float.cold.2
0x100045594	0x00000023	[ 34] _mp_obj_new_exception_arg1.cold.1
0x1000455B7	0x00000021	[ 35] _mp_emit_glue_assign_native.cold.1
0x1000455D8	0x00000023	[ 36] _save_obj.cold.1
0x1000455FB	0x00000023	[ 37] _mp_unary_op.cold.1
0x10004561E	0x00000023	[ 37] _mp_getiter.cold.1
0x100045641	0x00000023	[ 37] _mp_load_method_maybe.cold.1
0x100045665	0x00000023	[ 37] _mp_obj_new_exception_arg1.cold.1
0x100045688	0x00000021	[ 40] _mp_arg_parse_all.cold.1
0x1000456A9	0x00000023	[ 42] _mp_map_lookup.cold.1
0x1000456CC	0x00000023	[ 43] _mp_obj_print_exception.cold.1
0x1000456F0	0x00000023	[ 47] _mp_obj_complex_get.cold.1
0x100045713	0x00000023	[ 48] _dict_iter_next.cold.1
0x100045736	0x00000021	[ 48] _dict_iter_next.cold.2
0x100045757	0x00000023	[ 48] _dict_popitem.cold.1
0x10004577A	0x00000021	[ 50] _get_native_exception.cold.1
0x10004579B	0x00000023	[ 50] _mp_obj_new_exception.cold.1
0x1000457BE	0x00000023	[ 50] _mp_obj_new_exception_msg.cold.1
0x1000457E1	0x00000023	[ 50] _mp_obj_new_exception_msg_vlist.cold.1
0x100045804	0x00000023	[ 50] _mp_obj_new_exception_msg_vlist.cold.2
0x100045828	0x00000023	[ 52] _mp_obj_float_get.cold.1
0x10004584C	0x00000021	[ 53] _fun_builtin_1_call.cold.1
0x10004586D	0x00000021	[ 53] _fun_builtin_2_call.cold.1
0x10004588E	0x00000021	[ 53] _fun_builtin_3_call.cold.1
0x1000458AF	0x00000021	[ 53] _fun_builtin_var_call.cold.1
0x1000458D0	0x00000023	[ 56] _mp_obj_int_formatted.cold.1
0x1000458F3	0x00000023	[ 56] _mp_int_format_size.cold.1
0x100045917	0x00000021	[ 57] _mp_obj_int_formatted_impl.cold.1
0x100045938	0x00000021	[ 57] _mp_obj_int_to_bytes_impl.cold.1
0x100045959	0x00000023	[ 57] _mp_obj_int_binary_op.cold.1
0x10004597C	0x00000023	[ 57] _mp_obj_int_binary_op.cold.2
0x10004599F	0x00000023	[ 57] _mp_obj_int_as_float_impl.cold.1
0x1000459C2	0x00000023	[ 58] _list_subscr.cold.1
0x1000459E8	0x00000023	[ 70] _mp_obj_str_format_helper.cold.1
0x100045A0B	0x00000023	[ 70] _str_replace.cold.1
0x100045A2E	0x00000023	[ 70] _str_uni_strip.cold.1
0x100045A51	0x00000023	[ 70] _str_uni_strip.cold.2
0x100045A74	0x00000023	[ 71] _str_subscr.cold.1
0x100045A97	0x00000023	[ 72] _mp_obj_tuple_get.cold.1
0x100045ABA	0x00000021	[ 73] _mp_obj_new_instance.cold.1
0x100045ADB	0x00000021	[ 73] _instance_count_native_bases.cold.1
0x100045AFC	0x00000023	[ 73] _mp_obj_instance_make_new.cold.1
0x100045B1F	0x00000023	[ 73] _mp_obj_class_lookup.cold.1
0x100045B42	0x00000023	[ 73] _mp_obj_class_lookup.cold.2
0x100045B65	0x00000023	[ 73] _mp_obj_class_lookup.cold.3
0x100045B88	0x00000023	[ 73] _mp_obj_class_lookup.cold.4
0x100045BAB	0x00000023	[ 73] _mp_obj_class_lookup.cold.5
0x100045BCE	0x00000023	[ 73] _type_attr.cold.1
0x100045BF1	0x00000023	[ 73] _type_attr.cold.2
0x100045C14	0x00000023	[ 73] _mp_obj_new_type.cold.1
0x100045C37	0x00000023	[ 73] _mp_obj_instance_attr.cold.1
0x100045C5A	0x00000023	[ 73] _static_class_method_make_new.cold.1
0x100045C7E	0x00000006	[ 90] ____chkstk_darwin
0x100045C84	0x00000006	[ 90] ___assert_rtn
0x100045C8A	0x00000006	[ 90] ___bzero
0x100045C90	0x00000006	[ 90] ___error
0x100045C96	0x00000006	[ 90] ___exp10
0x100045C9C	0x00000006	[ 90] ___sincos_stret
0x100045CA2	0x00000006	[ 90] ___stack_chk_fail
0x100045CA8	0x00000006	[ 90] _atan2
0x100045CAE	0x00000006	[ 90] _close
0x100045CB4	0x00000006	[ 90] _exit
0x100045CBA	0x00000006	[ 90] _exp
0x100045CC0	0x00000006	[ 90] _fmod
0x100045CC6	0x00000006	[ 90] _fprintf
0x100045CCC	0x00000006	[ 90] _log
0x100045CD2	0x00000006	[ 90] _malloc
0x100045CD8	0x00000006	[ 90] _memchr
0x100045CDE	0x00000006	[ 90] _memcmp
0x100045CE4	0x00000006	[ 90] _memcpy
0x100045CEA	0x00000006	[ 90] _memmove
0x100045CF0	0x00000006	[ 90] _memset
0x100045CF6	0x00000006	[ 90] _nan
0x100045CFC	0x00000006	[ 90] _open
0x100045D02	0x00000006	[ 90] _pow
0x100045D08	0x00000006	[ 90] _printf
0x100045D0E	0x00000006	[ 90] _puts
0x100045D14	0x00000006	[ 90] _read
0x100045D1A	0x00000006	[ 90] _strchr
0x100045D20	0x00000006	[ 90] _strcmp
0x100045D26	0x00000006	[ 90] _strlen
0x100045D2C	0x00000006	[ 90] _strncmp
0x100045D32	0x00000006	[ 90] _strtol
0x100045D38	0x00000006	[ 90] _write
0x100045D40	0x00000010	[  5] 16-byte-literal
0x100045D50	0x000002B0	[  6] _mp_qstr_const_hashes
0x100046000	0x00000154	[  6] _mp_qstr_const_lengths
0x100046160	0x00000020	[  8] _pad_spaces
0x100046180	0x00000011	[  8] _pad_zeroes
0x1000461A0	0x00000080	[  9] _attr
0x100046220	0x00000008	[ 10] 8-byte-literal
0x100046230	0x00000010	[ 10] 16-byte-literal
0x100046240	0x00000010	[ 12] 16-byte-literal
0x100046250	0x00000010	[ 12] 16-byte-literal
0x100046260	0x0000002C	[ 12] _tok_enc_kind
0x100046290	0x00000010	[ 13] 16-byte-literal
0x1000462A0	0x00000010	[ 13] 16-byte-literal
0x1000462B0	0x000000B0	[ 13] _rule_act_table
0x100046360	0x000000B0	[ 13] _rule_arg_offset_table
0x100046410	0x00000388	[ 13] _rule_arg_combined_table
0x100046798	0x00000001	[ 13] _mp_constants_table
0x100046799	0x00000007	[ 14] _scope_simple_name_table
0x1000467A0	0x00000010	[ 17] 16-byte-literal
0x1000467B0	0x00000002	[ 20] _reg_local_table
0x1000467B2	0x0000000E	[ 20] _emit_native_binary_op.ops
0x1000467C0	0x00000040	[ 20] l_switch.table.emit_native_store_fast.54
0x100046800	0x00000040	[ 20] l_switch.table.emit_native_jump_helper
0x100046840	0x00000010	[ 22] _reg_local_table
0x100046850	0x00000032	[ 22] _mp_f_n_args
0x100046882	0x0000000E	[ 22] _emit_native_binary_op.ops
0x100046890	0x00000040	[ 22] l_switch.table.emit_native_store_fast.54
0x1000468D0	0x00000040	[ 22] l_switch.table.emit_native_jump_helper
0x100046910	0x00000010	[ 23] 16-byte-literal
0x100046920	0x00000010	[ 24] _reg_local_table
0x100046930	0x00000020	[ 24] _emit_native_binary_op.ops
0x100046950	0x00000018	[ 24] _emit_native_binary_op.ops.34
0x100046968	0x00000040	[ 24] l_switch.table.emit_native_store_fast.59
0x1000469A8	0x00000040	[ 24] l_switch.table.emit_native_jump_helper
0x1000469F0	0x00000010	[ 25] _format_vfp_op_table
0x100046A00	0x00000030	[ 25] _cc_name_table
0x100046A30	0x00000040	[ 25] _format_4_op_table
0x100046A70	0x00000020	[ 25] _format_9_10_op_table
0x100046A90	0x00000060	[ 25] _reg_name_table
0x100046AF0	0x00000012	[ 25] _special_reg_name_table
0x100046B10	0x00000010	[ 27] _reg_local_table
0x100046B20	0x00000030	[ 27] _emit_native_binary_op.ccs
0x100046B50	0x00000040	[ 27] l_switch.table.emit_native_store_fast.54
0x100046B90	0x00000040	[ 27] l_switch.table.emit_native_jump_helper
0x100046BD0	0x00000002	[ 29] _reg_local_table
0x100046BD2	0x0000000E	[ 29] _emit_native_binary_op.ccs
0x100046BE0	0x00000040	[ 29] l_switch.table.emit_native_store_fast.54
0x100046C20	0x00000040	[ 29] l_switch.table.emit_native_jump_helper
0x100046C60	0x00000070	[ 30] _opcode_table_3arg
0x100046CD0	0x00000040	[ 30] _reg_name_table
0x100046D10	0x00000002	[ 31] _reg_local_table
0x100046D12	0x0000000E	[ 31] _emit_native_binary_op.ccs
0x100046D20	0x00000040	[ 31] l_switch.table.emit_native_store_fast.54
0x100046D60	0x00000040	[ 31] l_switch.table.emit_native_jump_helper
0x100046DA0	0x00000010	[ 32] 16-byte-literal
0x100046DB0	0x00000008	[ 32] 8-byte-literal
0x100046DB8	0x00000008	[ 32] 8-byte-literal
0x100046DC0	0x00000008	[ 32] 8-byte-literal
0x100046DC8	0x00000008	[ 32] 8-byte-literal
0x100046DD0	0x00000008	[ 32] 8-byte-literal
0x100046DD8	0x00000008	[ 32] 8-byte-literal
0x100046DE0	0x00000050	[ 32] _g_pos_pow
0x100046E30	0x00000048	[ 32] _g_neg_pow
0x100046E78	0x00000008	[ 34] 8-byte-literal
0x100046E80	0x00000008	[ 34] 8-byte-literal
0x100046E90	0x00000044	[ 42] _hash_allocation_sizes
0x100046ED8	0x00000008	[ 47] 8-byte-literal
0x100046EE0	0x00000008	[ 52] 8-byte-literal
0x100046EE8	0x00000008	[ 52] 8-byte-literal
0x100046EF0	0x00000010	[ 56] _log_base2_floor
0x100046F00	0x00000020	[ 58] _mp_obj_list_sort.allowed_args
0x100046F20	0x00000040	[ 63] _property_make_new.allowed_args
0x100046F60	0x00000008	[ 70] 8-byte-literal
0x100046F68	0x00000007	[ 70] _str_uni_strip.whitespace
0x100046F70	0x00000010	[ 73] 16-byte-literal
0x100046F80	0x00000010	[ 73] 16-byte-literal
0x100046F90	0x00000010	[ 73] 16-byte-literal
0x100046FA0	0x00000010	[ 73] 16-byte-literal
0x100046FB0	0x00000010	[ 73] 16-byte-literal
0x100046FC0	0x00000010	[ 73] 16-byte-literal
0x100046FD0	0x00000010	[ 73] _mp_unary_op_method_name
0x100046FE0	0x00000025	[ 73] _mp_binary_op_method_name
0x100047005	0x00000008	[  5] literal string: gc_free
0x10004700D	0x00000005	[  5] literal string: gc.c
0x100047012	0x00000010	[  5] literal string: VERIFY_PTR(ptr)
0x100047022	0x0000001F	[  5] literal string: ATB_GET_KIND(block) == AT_HEAD
0x100047041	0x0000000B	[  5] literal string: gc_realloc
0x10004704C	0x0000001C	[  5] literal string: ATB_GET_KIND(bl) == AT_FREE
0x100047068	0x00000003	[  5] literal string: %c
0x10004706B	0x00000002	[  5] literal string: \n
0x10004706D	0x00000001	[  6] literal string: 
0x10004706E	0x00000008	[  6] literal string: __dir__
0x100047076	0x00000002	[  6] literal string:  
0x100047078	0x00000002	[  6] literal string: *
0x10004707A	0x00000002	[  6] literal string: /
0x10004707C	0x00000009	[  6] literal string: <module>
0x100047085	0x00000002	[  6] literal string: _
0x100047087	0x00000009	[  6] literal string: __call__
0x100047090	0x0000000A	[  6] literal string: __class__
0x10004709A	0x0000000C	[  6] literal string: __delitem__
0x1000470A6	0x0000000A	[  6] literal string: __enter__
0x1000470B0	0x00000009	[  6] literal string: __exit__
0x1000470B9	0x0000000C	[  6] literal string: __getattr__
0x1000470C5	0x0000000C	[  6] literal string: __getitem__
0x1000470D1	0x00000009	[  6] literal string: __hash__
0x1000470DA	0x00000009	[  6] literal string: __init__
0x1000470E3	0x00000008	[  6] literal string: __int__
0x1000470EB	0x00000009	[  6] literal string: __iter__
0x1000470F4	0x00000008	[  6] literal string: __len__
0x1000470FC	0x00000009	[  6] literal string: __main__
0x100047105	0x0000000B	[  6] literal string: __module__
0x100047110	0x00000009	[  6] literal string: __name__
0x100047119	0x00000008	[  6] literal string: __new__
0x100047121	0x00000009	[  6] literal string: __next__
0x10004712A	0x0000000D	[  6] literal string: __qualname__
0x100047137	0x00000009	[  6] literal string: __repr__
0x100047140	0x0000000C	[  6] literal string: __setitem__
0x10004714C	0x00000008	[  6] literal string: __str__
0x100047154	0x00000010	[  6] literal string: ArithmeticError
0x100047164	0x0000000F	[  6] literal string: AssertionError
0x100047173	0x0000000F	[  6] literal string: AttributeError
0x100047182	0x0000000E	[  6] literal string: BaseException
0x100047190	0x00000009	[  6] literal string: EOFError
0x100047199	0x00000009	[  6] literal string: Ellipsis
0x1000471A2	0x0000000A	[  6] literal string: Exception
0x1000471AC	0x0000000E	[  6] literal string: GeneratorExit
0x1000471BA	0x0000000C	[  6] literal string: ImportError
0x1000471C6	0x00000011	[  6] literal string: IndentationError
0x1000471D7	0x0000000B	[  6] literal string: IndexError
0x1000471E2	0x00000009	[  6] literal string: KeyError
0x1000471EB	0x00000012	[  6] literal string: KeyboardInterrupt
0x1000471FD	0x0000000C	[  6] literal string: LookupError
0x100047209	0x0000000C	[  6] literal string: MemoryError
0x100047215	0x0000000A	[  6] literal string: NameError
0x10004721F	0x00000009	[  6] literal string: NoneType
0x100047228	0x00000014	[  6] literal string: NotImplementedError
0x10004723C	0x00000008	[  6] literal string: OSError
0x100047244	0x0000000E	[  6] literal string: OverflowError
0x100047252	0x0000000D	[  6] literal string: RuntimeError
0x10004725F	0x0000000E	[  6] literal string: StopIteration
0x10004726D	0x0000000C	[  6] literal string: SyntaxError
0x100047279	0x0000000B	[  6] literal string: SystemExit
0x100047284	0x0000000A	[  6] literal string: TypeError
0x10004728E	0x0000000B	[  6] literal string: ValueError
0x100047299	0x00000012	[  6] literal string: ZeroDivisionError
0x1000472AB	0x00000004	[  6] literal string: abs
0x1000472AF	0x00000004	[  6] literal string: all
0x1000472B3	0x00000004	[  6] literal string: any
0x1000472B7	0x00000007	[  6] literal string: append
0x1000472BE	0x00000005	[  6] literal string: args
0x1000472C3	0x00000005	[  6] literal string: bool
0x1000472C8	0x00000009	[  6] literal string: builtins
0x1000472D1	0x0000000A	[  6] literal string: bytearray
0x1000472DB	0x00000009	[  6] literal string: bytecode
0x1000472E4	0x00000006	[  6] literal string: bytes
0x1000472EA	0x00000009	[  6] literal string: callable
0x1000472F3	0x00000004	[  6] literal string: chr
0x1000472F7	0x0000000C	[  6] literal string: classmethod
0x100047303	0x00000006	[  6] literal string: clear
0x100047309	0x00000006	[  6] literal string: close
0x10004730F	0x00000006	[  6] literal string: const
0x100047315	0x00000005	[  6] literal string: copy
0x10004731A	0x00000006	[  6] literal string: count
0x100047320	0x00000005	[  6] literal string: dict
0x100047325	0x00000004	[  6] literal string: dir
0x100047329	0x00000007	[  6] literal string: divmod
0x100047330	0x00000004	[  6] literal string: end
0x100047334	0x00000009	[  6] literal string: endswith
0x10004733D	0x00000005	[  6] literal string: eval
0x100047342	0x00000005	[  6] literal string: exec
0x100047347	0x00000007	[  6] literal string: extend
0x10004734E	0x00000005	[  6] literal string: find
0x100047353	0x00000007	[  6] literal string: format
0x10004735A	0x0000000B	[  6] literal string: from_bytes
0x100047365	0x00000004	[  6] literal string: get
0x100047369	0x00000008	[  6] literal string: getattr
0x100047371	0x00000008	[  6] literal string: globals
0x100047379	0x00000008	[  6] literal string: hasattr
0x100047381	0x00000005	[  6] literal string: hash
0x100047386	0x00000003	[  6] literal string: id
0x100047389	0x00000006	[  6] literal string: index
0x10004738F	0x00000007	[  6] literal string: insert
0x100047396	0x00000004	[  6] literal string: int
0x10004739A	0x00000008	[  6] literal string: isalpha
0x1000473A2	0x00000008	[  6] literal string: isdigit
0x1000473AA	0x0000000B	[  6] literal string: isinstance
0x1000473B5	0x00000008	[  6] literal string: islower
0x1000473BD	0x00000008	[  6] literal string: isspace
0x1000473C5	0x0000000B	[  6] literal string: issubclass
0x1000473D0	0x00000008	[  6] literal string: isupper
0x1000473D8	0x00000006	[  6] literal string: items
0x1000473DE	0x00000005	[  6] literal string: iter
0x1000473E3	0x00000005	[  6] literal string: join
0x1000473E8	0x00000004	[  6] literal string: key
0x1000473EC	0x00000005	[  6] literal string: keys
0x1000473F1	0x00000004	[  6] literal string: len
0x1000473F5	0x00000005	[  6] literal string: list
0x1000473FA	0x00000007	[  6] literal string: little
0x100047401	0x00000007	[  6] literal string: locals
0x100047408	0x00000006	[  6] literal string: lower
0x10004740E	0x00000007	[  6] literal string: lstrip
0x100047415	0x00000005	[  6] literal string: main
0x10004741A	0x00000004	[  6] literal string: map
0x10004741E	0x0000000C	[  6] literal string: micropython
0x10004742A	0x00000005	[  6] literal string: next
0x10004742F	0x00000007	[  6] literal string: object
0x100047436	0x00000005	[  6] literal string: open
0x10004743B	0x00000004	[  6] literal string: ord
0x10004743F	0x00000004	[  6] literal string: pop
0x100047443	0x00000008	[  6] literal string: popitem
0x10004744B	0x00000004	[  6] literal string: pow
0x10004744F	0x00000006	[  6] literal string: print
0x100047455	0x00000006	[  6] literal string: range
0x10004745B	0x00000005	[  6] literal string: read
0x100047460	0x00000009	[  6] literal string: readinto
0x100047469	0x00000009	[  6] literal string: readline
0x100047472	0x00000007	[  6] literal string: remove
0x100047479	0x00000008	[  6] literal string: replace
0x100047481	0x00000005	[  6] literal string: repr
0x100047486	0x00000008	[  6] literal string: reverse
0x10004748E	0x00000006	[  6] literal string: rfind
0x100047494	0x00000007	[  6] literal string: rindex
0x10004749B	0x00000006	[  6] literal string: round
0x1000474A1	0x00000007	[  6] literal string: rsplit
0x1000474A8	0x00000007	[  6] literal string: rstrip
0x1000474AF	0x00000005	[  6] literal string: self
0x1000474B4	0x00000005	[  6] literal string: send
0x1000474B9	0x00000004	[  6] literal string: sep
0x1000474BD	0x00000004	[  6] literal string: set
0x1000474C1	0x00000008	[  6] literal string: setattr
0x1000474C9	0x0000000B	[  6] literal string: setdefault
0x1000474D4	0x00000005	[  6] literal string: sort
0x1000474D9	0x00000007	[  6] literal string: sorted
0x1000474E0	0x00000006	[  6] literal string: split
0x1000474E6	0x00000006	[  6] literal string: start
0x1000474EC	0x0000000B	[  6] literal string: startswith
0x1000474F7	0x0000000D	[  6] literal string: staticmethod
0x100047504	0x00000005	[  6] literal string: step
0x100047509	0x00000005	[  6] literal string: stop
0x10004750E	0x00000004	[  6] literal string: str
0x100047512	0x00000006	[  6] literal string: strip
0x100047518	0x00000004	[  6] literal string: sum
0x10004751C	0x00000006	[  6] literal string: super
0x100047522	0x00000006	[  6] literal string: throw
0x100047528	0x00000009	[  6] literal string: to_bytes
0x100047531	0x00000006	[  6] literal string: tuple
0x100047537	0x00000005	[  6] literal string: type
0x10004753C	0x00000007	[  6] literal string: update
0x100047543	0x00000006	[  6] literal string: upper
0x100047549	0x00000006	[  6] literal string: utf-8
0x10004754F	0x00000006	[  6] literal string: value
0x100047555	0x00000007	[  6] literal string: values
0x10004755C	0x00000006	[  6] literal string: write
0x100047562	0x00000004	[  6] literal string: zip
0x100047566	0x00000008	[  6] literal string: __add__
0x10004756E	0x0000000B	[  6] literal string: __aenter__
0x100047579	0x0000000A	[  6] literal string: __aexit__
0x100047583	0x0000000A	[  6] literal string: __aiter__
0x10004758D	0x0000000A	[  6] literal string: __anext__
0x100047597	0x0000000A	[  6] literal string: __bases__
0x1000475A1	0x00000009	[  6] literal string: __bool__
0x1000475AA	0x00000010	[  6] literal string: __build_class__
0x1000475BA	0x0000000D	[  6] literal string: __contains__
0x1000475C7	0x00000009	[  6] literal string: __dict__
0x1000475D0	0x00000007	[  6] literal string: __eq__
0x1000475D7	0x00000007	[  6] literal string: __ge__
0x1000475DE	0x00000007	[  6] literal string: __gt__
0x1000475E5	0x00000009	[  6] literal string: __iadd__
0x1000475EE	0x0000000B	[  6] literal string: __import__
0x1000475F9	0x00000009	[  6] literal string: __isub__
0x100047602	0x00000007	[  6] literal string: __le__
0x100047609	0x00000007	[  6] literal string: __lt__
0x100047610	0x00000007	[  6] literal string: __ne__
0x100047617	0x00000009	[  6] literal string: __path__
0x100047620	0x0000000F	[  6] literal string: __repl_print__
0x10004762F	0x0000000D	[  6] literal string: __reversed__
0x10004763C	0x00000008	[  6] literal string: __sub__
0x100047644	0x0000000E	[  6] literal string: __traceback__
0x100047652	0x00000004	[  6] literal string: %#o
0x100047656	0x00000004	[  6] literal string: %#x
0x10004765A	0x00000006	[  6] literal string: {:#b}
0x100047660	0x00000021	[  6] literal string: maximum recursion depth exceeded
0x100047681	0x00000009	[  6] literal string: <lambda>
0x10004768A	0x0000000B	[  6] literal string: <listcomp>
0x100047695	0x0000000B	[  6] literal string: <dictcomp>
0x1000476A0	0x0000000A	[  6] literal string: <setcomp>
0x1000476AA	0x0000000A	[  6] literal string: <genexpr>
0x1000476B4	0x00000009	[  6] literal string: <string>
0x1000476BD	0x00000008	[  6] literal string: <stdin>
0x1000476C5	0x00000005	[  6] literal string: None
0x1000476CA	0x00000013	[  6] literal string: StopAsyncIteration
0x1000476DD	0x0000000D	[  6] literal string: UnicodeError
0x1000476EA	0x0000000F	[  6] literal string: ViperTypeError
0x1000476F9	0x00000004	[  6] literal string: add
0x1000476FD	0x00000005	[  6] literal string: addi
0x100047702	0x00000006	[  6] literal string: align
0x100047708	0x00000005	[  6] literal string: and_
0x10004770D	0x0000000A	[  6] literal string: asm_thumb
0x100047717	0x0000000B	[  6] literal string: asm_xtensa
0x100047722	0x00000004	[  6] literal string: asr
0x100047726	0x00000002	[  6] literal string: b
0x100047728	0x00000005	[  6] literal string: ball
0x10004772D	0x00000005	[  6] literal string: bany
0x100047732	0x00000004	[  6] literal string: bbc
0x100047736	0x00000004	[  6] literal string: bbs
0x10004773A	0x00000004	[  6] literal string: beq
0x10004773E	0x00000005	[  6] literal string: beqz
0x100047743	0x00000004	[  6] literal string: bge
0x100047747	0x00000005	[  6] literal string: bgeu
0x10004774C	0x00000004	[  6] literal string: bin
0x100047750	0x00000003	[  6] literal string: bl
0x100047753	0x00000004	[  6] literal string: blt
0x100047757	0x00000006	[  6] literal string: bnall
0x10004775D	0x00000004	[  6] literal string: bne
0x100047761	0x00000005	[  6] literal string: bnez
0x100047766	0x00000006	[  6] literal string: bnone
0x10004776C	0x0000000D	[  6] literal string: bound_method
0x100047779	0x00000003	[  6] literal string: bx
0x10004777C	0x00000009	[  6] literal string: calcsize
0x100047785	0x00000007	[  6] literal string: callx0
0x10004778C	0x00000008	[  6] literal string: closure
0x100047794	0x00000004	[  6] literal string: clz
0x100047798	0x00000004	[  6] literal string: cmp
0x10004779C	0x00000008	[  6] literal string: complex
0x1000477A4	0x00000006	[  6] literal string: cpsid
0x1000477AA	0x00000006	[  6] literal string: cpsie
0x1000477B0	0x00000005	[  6] literal string: data
0x1000477B5	0x00000007	[  6] literal string: decode
0x1000477BC	0x00000008	[  6] literal string: default
0x1000477C4	0x00000008	[  6] literal string: delattr
0x1000477CC	0x00000008	[  6] literal string: deleter
0x1000477D4	0x0000000A	[  6] literal string: dict_view
0x1000477DE	0x0000000B	[  6] literal string: difference
0x1000477E9	0x00000012	[  6] literal string: difference_update
0x1000477FB	0x00000008	[  6] literal string: discard
0x100047803	0x00000004	[  6] literal string: doc
0x100047807	0x00000007	[  6] literal string: encode
0x10004780E	0x0000000A	[  6] literal string: enumerate
0x100047818	0x00000006	[  6] literal string: errno
0x10004781E	0x00000007	[  6] literal string: filter
0x100047825	0x00000006	[  6] literal string: float
0x10004782B	0x00000009	[  6] literal string: fromkeys
0x100047834	0x00000009	[  6] literal string: function
0x10004783D	0x0000000A	[  6] literal string: generator
0x100047847	0x00000007	[  6] literal string: getter
0x10004784E	0x0000000A	[  6] literal string: heap_lock
0x100047858	0x0000000C	[  6] literal string: heap_unlock
0x100047864	0x00000004	[  6] literal string: hex
0x100047868	0x00000005	[  6] literal string: imag
0x10004786D	0x0000000D	[  6] literal string: intersection
0x10004787A	0x00000014	[  6] literal string: intersection_update
0x10004788E	0x0000000B	[  6] literal string: isdisjoint
0x100047899	0x00000009	[  6] literal string: issubset
0x1000478A2	0x0000000B	[  6] literal string: issuperset
0x1000478AD	0x00000009	[  6] literal string: iterable
0x1000478B6	0x00000009	[  6] literal string: iterator
0x1000478BF	0x00000002	[  6] literal string: j
0x1000478C1	0x00000003	[  6] literal string: jx
0x1000478C4	0x00000006	[  6] literal string: l16si
0x1000478CA	0x00000006	[  6] literal string: l16ui
0x1000478D0	0x00000005	[  6] literal string: l32i
0x1000478D5	0x00000005	[  6] literal string: l8ui
0x1000478DA	0x00000006	[  6] literal string: label
0x1000478E0	0x00000004	[  6] literal string: ldr
0x1000478E4	0x00000005	[  6] literal string: ldrb
0x1000478E9	0x00000006	[  6] literal string: ldrex
0x1000478EF	0x00000005	[  6] literal string: ldrh
0x1000478F4	0x00000004	[  6] literal string: lsl
0x1000478F8	0x00000004	[  6] literal string: lsr
0x1000478FC	0x00000004	[  6] literal string: max
0x100047900	0x00000004	[  6] literal string: min
0x100047904	0x00000007	[  6] literal string: module
0x10004790B	0x00000004	[  6] literal string: mov
0x10004790F	0x00000006	[  6] literal string: mov_n
0x100047915	0x00000005	[  6] literal string: movi
0x10004791A	0x00000005	[  6] literal string: movt
0x10004791F	0x00000005	[  6] literal string: movw
0x100047924	0x00000006	[  6] literal string: movwt
0x10004792A	0x00000004	[  6] literal string: mrs
0x10004792E	0x00000005	[  6] literal string: mull
0x100047933	0x00000007	[  6] literal string: native
0x10004793A	0x00000004	[  6] literal string: nop
0x10004793E	0x00000004	[  6] literal string: oct
0x100047942	0x0000000A	[  6] literal string: opt_level
0x10004794C	0x00000004	[  6] literal string: or_
0x100047950	0x00000005	[  6] literal string: pack
0x100047955	0x0000000A	[  6] literal string: pack_into
0x10004795F	0x0000000B	[  6] literal string: pend_throw
0x10004796A	0x00000009	[  6] literal string: property
0x100047973	0x00000004	[  6] literal string: ptr
0x100047977	0x00000006	[  6] literal string: ptr16
0x10004797D	0x00000006	[  6] literal string: ptr32
0x100047983	0x00000005	[  6] literal string: ptr8
0x100047988	0x00000005	[  6] literal string: push
0x10004798D	0x00000005	[  6] literal string: rbit
0x100047992	0x00000005	[  6] literal string: real
0x100047997	0x00000006	[  6] literal string: ret_n
0x10004799D	0x00000009	[  6] literal string: reversed
0x1000479A6	0x00000005	[  6] literal string: s16i
0x1000479AB	0x00000005	[  6] literal string: s32i
0x1000479B0	0x00000004	[  6] literal string: s8i
0x1000479B4	0x00000005	[  6] literal string: sdiv
0x1000479B9	0x00000007	[  6] literal string: setter
0x1000479C0	0x00000006	[  6] literal string: slice
0x1000479C6	0x00000005	[  6] literal string: strb
0x1000479CB	0x00000006	[  6] literal string: strex
0x1000479D1	0x00000005	[  6] literal string: strh
0x1000479D6	0x00000004	[  6] literal string: sub
0x1000479DA	0x00000015	[  6] literal string: symmetric_difference
0x1000479EF	0x0000001C	[  6] literal string: symmetric_difference_update
0x100047A0B	0x00000005	[  6] literal string: udiv
0x100047A10	0x00000005	[  6] literal string: uint
0x100047A15	0x00000006	[  6] literal string: union
0x100047A1B	0x00000007	[  6] literal string: unpack
0x100047A22	0x0000000C	[  6] literal string: unpack_from
0x100047A2E	0x00000008	[  6] literal string: ustruct
0x100047A36	0x00000005	[  6] literal string: vcmp
0x100047A3B	0x0000000D	[  6] literal string: vcvt_f32_s32
0x100047A48	0x0000000D	[  6] literal string: vcvt_s32_f32
0x100047A55	0x00000006	[  6] literal string: viper
0x100047A5B	0x00000005	[  6] literal string: vldr
0x100047A60	0x00000005	[  6] literal string: vmov
0x100047A65	0x00000005	[  6] literal string: vmrs
0x100047A6A	0x00000005	[  6] literal string: vneg
0x100047A6F	0x00000006	[  6] literal string: vsqrt
0x100047A75	0x00000005	[  6] literal string: vstr
0x100047A7A	0x00000004	[  6] literal string: wfi
0x100047A7E	0x00000004	[  6] literal string: xor
0x100047A82	0x0000000E	[  6] literal string: name too long
0x100047A90	0x0000000A	[  6] literal string: find_qstr
0x100047A9A	0x00000007	[  6] literal string: qstr.c
0x100047AA1	0x0000000F	[  6] literal string: *q < pool->len
0x100047AB0	0x0000000E	[  7] literal string: vstr_add_char
0x100047ABE	0x00000007	[  7] literal string: vstr.c
0x100047AC5	0x0000000D	[  7] literal string: c < 0x110000
0x100047AD2	0x00000010	[  8] literal string: mp_print_mp_int
0x100047AE2	0x0000000A	[  8] literal string: mpprint.c
0x100047AEC	0x00000033	[  8] literal string: base == 2 || base == 8 || base == 10 || base == 16
0x100047B1F	0x00000005	[  8] literal string: true
0x100047B24	0x00000006	[  8] literal string: false
0x100047B2A	0x00000007	[  8] literal string: (null)
0x100047B31	0x0000000B	[  8] literal string: mp_vprintf
0x100047B3C	0x00000027	[  8] literal string: *fmt == '%' || !"unsupported fmt char"
0x100047B63	0x00000011	[ 10] literal string: mpz_set_from_str
0x100047B74	0x00000006	[ 10] literal string: mpz.c
0x100047B7A	0x0000000B	[ 10] literal string: base <= 36
0x100047B85	0x00000010	[ 10] literal string: mpz_divmod_inpl
0x100047B95	0x00000012	[ 10] literal string: !mpz_is_zero(rhs)
0x100047BA7	0x00000010	[ 10] literal string: mpz_as_str_inpl
0x100047BB7	0x0000000C	[ 10] literal string: str != NULL
0x100047BC3	0x00000018	[ 10] literal string: 2 <= base && base <= 32
0x100047BDB	0x0000000D	[ 10] literal string: mpz_need_dig
0x100047BE8	0x0000000E	[ 10] literal string: !z->fixed_dig
0x100047BF6	0x0000000B	[ 10] literal string: mpn_or_neg
0x100047C01	0x0000000C	[ 10] literal string: carryi == 0
0x100047C0D	0x0000000A	[ 10] literal string: mpz_clone
0x100047C17	0x00000010	[ 10] literal string: src->alloc != 0
0x100047C27	0x00000045	[ 12] literal string: ()[]{},;~:e=<e=c<e=>e=c>e=*e=c*e=+e=-e=e>&e=|e=/e=c/e=%e=^e=@e==e=!.
0x100047C6C	0x00000009	[ 12] literal string: .format(
0x100047C75	0x00000015	[ 12] literal string: unicode name escapes
0x100047C8A	0x00000006	[ 12] literal string: False
0x100047C90	0x00000005	[ 12] literal string: True
0x100047C95	0x0000000A	[ 12] literal string: __debug__
0x100047C9F	0x00000004	[ 12] literal string: and
0x100047CA3	0x00000003	[ 12] literal string: as
0x100047CA6	0x00000007	[ 12] literal string: assert
0x100047CAD	0x00000006	[ 12] literal string: async
0x100047CB3	0x00000006	[ 12] literal string: await
0x100047CB9	0x00000006	[ 12] literal string: break
0x100047CBF	0x00000006	[ 12] literal string: class
0x100047CC5	0x00000009	[ 12] literal string: continue
0x100047CCE	0x00000004	[ 12] literal string: def
0x100047CD2	0x00000004	[ 12] literal string: del
0x100047CD6	0x00000005	[ 12] literal string: elif
0x100047CDB	0x00000005	[ 12] literal string: else
0x100047CE0	0x00000007	[ 12] literal string: except
0x100047CE7	0x00000008	[ 12] literal string: finally
0x100047CEF	0x00000004	[ 12] literal string: for
0x100047CF3	0x00000005	[ 12] literal string: from
0x100047CF8	0x00000007	[ 12] literal string: global
0x100047CFF	0x00000003	[ 12] literal string: if
0x100047D02	0x00000007	[ 12] literal string: import
0x100047D09	0x00000003	[ 12] literal string: in
0x100047D0C	0x00000003	[ 12] literal string: is
0x100047D0F	0x00000007	[ 12] literal string: lambda
0x100047D16	0x00000009	[ 12] literal string: nonlocal
0x100047D1F	0x00000004	[ 12] literal string: not
0x100047D23	0x00000003	[ 12] literal string: or
0x100047D26	0x00000005	[ 12] literal string: pass
0x100047D2B	0x00000006	[ 12] literal string: raise
0x100047D31	0x00000007	[ 12] literal string: return
0x100047D38	0x00000004	[ 12] literal string: try
0x100047D3C	0x00000006	[ 12] literal string: while
0x100047D42	0x00000005	[ 12] literal string: with
0x100047D47	0x00000006	[ 12] literal string: yield
0x100047D4D	0x00000009	[ 13] literal string: mp_parse
0x100047D56	0x00000008	[ 13] literal string: parse.c
0x100047D5E	0x00000016	[ 13] literal string: kind == RULE_ARG_RULE
0x100047D74	0x00000006	[ 13] literal string: i > 0
0x100047D7A	0x00000007	[ 13] literal string: i == n
0x100047D81	0x00000031	[ 13] literal string: (rule_act & RULE_ACT_KIND_MASK) == RULE_ACT_LIST
0x100047DB2	0x0000002C	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE
0x100047DDE	0x00000007	[ 13] literal string: i >= 1
0x100047DE5	0x00000012	[ 13] literal string: unexpected indent
0x100047DF7	0x0000002E	[ 13] literal string: unindent doesn't match any outer indent level
0x100047E25	0x00000013	[ 13] literal string: malformed f-string
0x100047E38	0x00000020	[ 13] literal string: raw f-strings are not supported
0x100047E58	0x0000000F	[ 13] literal string: invalid syntax
0x100047E67	0x0000001D	[ 13] literal string: parser.result_stack_top == 1
0x100047E84	0x00000013	[ 13] literal string: push_rule_from_arg
0x100047E97	0x0000005F	[ 13] literal string: (arg & RULE_ARG_KIND_MASK) == RULE_ARG_RULE || (arg & RULE_ARG_KIND_MASK) == RULE_ARG_OPT_RULE
0x100047EF6	0x0000000C	[ 13] literal string: peek_result
0x100047F02	0x0000001F	[ 13] literal string: parser->result_stack_top > pos
0x100047F21	0x0000000B	[ 13] literal string: pop_result
0x100047F2C	0x0000001D	[ 13] literal string: parser->result_stack_top > 0
0x100047F49	0x00000011	[ 13] literal string: push_result_rule
0x100047F5A	0x0000000E	[ 13] literal string: num_args == 2
0x100047F68	0x0000001D	[ 13] literal string: pn == peek_result(parser, 0)
0x100047F85	0x0000000F	[ 13] literal string: fold_constants
0x100047F94	0x00000034	[ 13] literal string: tok == MP_TOKEN_OP_PLUS || tok == MP_TOKEN_OP_MINUS
0x100047FC8	0x0000000F	[ 13] literal string: not a constant
0x100047FD7	0x0000001B	[ 13] literal string: elem->value == MP_OBJ_NULL
0x100047FF2	0x00000024	[ 13] literal string: MP_PARSE_NODE_IS_ID(pns1->nodes[0])
0x100048016	0x0000001D	[ 13] literal string: mp_parse_node_convert_to_obj
0x100048033	0x0000001B	[ 13] literal string: mp_parse_node_is_const(pn)
0x10004804E	0x00000033	[ 13] literal string: MP_PARSE_NODE_LEAF_KIND(pn) == MP_PARSE_NODE_TOKEN
0x100048081	0x00000019	[ 13] literal string: arg == MP_TOKEN_ELLIPSIS
0x10004809A	0x00000032	[ 13] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, RULE_atom_paren)
0x1000480CC	0x00000040	[ 13] literal string: MP_PARSE_NODE_IS_NULL(((mp_parse_node_struct_t *)pn)->nodes[0])
0x10004810C	0x0000000C	[ 13] literal string: build_tuple
0x100048118	0x0000002E	[ 13] literal string: peek_rule(parser, 0) == RULE_testlist_comp_3b
0x100048146	0x0000002B	[ 13] literal string: peek_rule(parser, 1) == RULE_testlist_comp
0x100048171	0x0000000A	[ 13] literal string: peek_rule
0x10004817B	0x0000001B	[ 13] literal string: parser->rule_stack_top > n
0x100048196	0x0000000A	[ 14] literal string: scope_new
0x1000481A0	0x00000008	[ 14] literal string: scope.c
0x1000481A8	0x0000001C	[ 14] literal string: MP_PARSE_NODE_IS_STRUCT(pn)
0x1000481C4	0x0000001C	[ 14] literal string: scope_close_over_in_parents
0x1000481E0	0x00000012	[ 14] literal string: s->parent != NULL
0x1000481F2	0x0000003F	[ 14] literal string: id->kind == ID_INFO_KIND_FREE || id->kind == ID_INFO_KIND_CELL
0x100048231	0x00000024	[ 15] literal string: inline assembler must be a function
0x100048255	0x00000019	[ 15] literal string: compile_scope_inline_asm
0x10004826E	0x0000000A	[ 15] literal string: compile.c
0x100048278	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(scope->pn)
0x10004829B	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_funcdef
0x1000482C8	0x0000000D	[ 15] literal string: unknown type
0x1000482D5	0x00000028	[ 15] literal string: return annotation must be an identifier
0x1000482FD	0x00000022	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(nodes[i])
0x10004831F	0x00000023	[ 15] literal string: expecting an assembler instruction
0x100048342	0x00000028	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns2->nodes[0])
0x10004836A	0x0000001C	[ 15] literal string: 'label' requires 1 argument
0x100048386	0x00000010	[ 15] literal string: label redefined
0x100048396	0x0000001C	[ 15] literal string: 'align' requires 1 argument
0x1000483B2	0x00000025	[ 15] literal string: 'data' requires at least 2 arguments
0x1000483D7	0x00000022	[ 15] literal string: 'data' requires integer arguments
0x1000483F9	0x0000000E	[ 15] literal string: compile_scope
0x100048407	0x0000001C	[ 15] literal string: scope->kind == SCOPE_MODULE
0x100048423	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 3
0x10004844C	0x00000029	[ 15] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 2
0x100048475	0x00000039	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_comp_for)
0x1000484AE	0x0000001B	[ 15] literal string: scope->kind == SCOPE_CLASS
0x1000484C9	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_classdef
0x1000484F7	0x0000000B	[ 15] literal string: id != NULL
0x100048502	0x0000001C	[ 15] literal string: comp->cur_except_level == 0
0x10004851E	0x0000000D	[ 15] literal string: compile_node
0x10004852B	0x00000032	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) <= PN_const_object
0x10004855D	0x00000012	[ 15] literal string: compile_decorated
0x10004856F	0x00000035	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(nodes[i], PN_decorator)
0x1000485A4	0x00000023	[ 15] literal string: MP_PARSE_NODE_IS_ID(name_nodes[j])
0x1000485C7	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns_body->nodes[0])
0x1000485F3	0x00000033	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns_body) == PN_classdef
0x100048626	0x0000001E	[ 15] literal string: invalid micropython decorator
0x100048644	0x0000000D	[ 15] literal string: invalid arch
0x100048651	0x0000001E	[ 15] literal string: compile_funcdef_lambdef_param
0x10004866F	0x0000001F	[ 15] literal string: pn_kind == PN_varargslist_name
0x10004868E	0x0000002E	[ 15] literal string: non-default argument follows default argument
0x1000486BC	0x00000019	[ 15] literal string: close_over_variables_etc
0x1000486D5	0x00000014	[ 15] literal string: n_pos_defaults >= 0
0x1000486E9	0x00000013	[ 15] literal string: n_kw_defaults >= 0
0x1000486FC	0x0000000F	[ 15] literal string: * arg after **
0x10004870B	0x0000000E	[ 15] literal string: too many args
0x100048719	0x00000021	[ 15] literal string: LHS of keyword arg must be an id
0x10004873A	0x00000018	[ 15] literal string: positional arg after **
0x100048752	0x00000021	[ 15] literal string: positional arg after keyword arg
0x100048773	0x0000001B	[ 15] literal string: can't assign to expression
0x10004878E	0x00000016	[ 15] literal string: compile_comprehension
0x1000487A4	0x00000012	[ 15] literal string: compile_expr_stmt
0x1000487B6	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_TOKEN(pns1->nodes[0])
0x1000487DD	0x00000009	[ 15] literal string: c_assign
0x1000487E6	0x0000001B	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn)
0x100048801	0x0000003E	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_testlist_comp)
0x10004883F	0x00000013	[ 15] literal string: c_assign_atom_expr
0x100048852	0x0000002C	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns1->nodes[n - 1])
0x10004887E	0x0000001A	[ 15] literal string: multiple *x in assignment
0x100048898	0x0000000B	[ 15] literal string: c_del_stmt
0x1000488A3	0x00000033	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_testlist_comp)
0x1000488D6	0x00000018	[ 15] literal string: can't delete expression
0x1000488EE	0x00000020	[ 15] literal string: 'break'/'continue' outside loop
0x10004890E	0x00000018	[ 15] literal string: compile_break_cont_stmt
0x100048926	0x0000003C	[ 15] literal string: comp->cur_except_level >= comp->break_continue_except_level
0x100048962	0x0000001A	[ 15] literal string: 'return' outside function
0x10004897C	0x0000000A	[ 15] literal string: c_if_cond
0x100048986	0x0000000F	[ 15] literal string: do_import_name
0x100048995	0x00000031	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn, PN_dotted_name)
0x1000489C6	0x00000014	[ 15] literal string: compile_import_from
0x1000489DA	0x00000029	[ 15] literal string: !MP_PARSE_NODE_IS_NULL(pn_import_source)
0x100048A03	0x0000001D	[ 15] literal string: import * not at module level
0x100048A20	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_nodes[i], PN_import_as_name)
0x100048A5D	0x00000025	[ 15] literal string: can't declare nonlocal in outer code
0x100048A82	0x0000001F	[ 15] literal string: identifier redefined as global
0x100048AA1	0x0000001E	[ 15] literal string: no binding for nonlocal found
0x100048ABF	0x00000021	[ 15] literal string: identifier redefined as nonlocal
0x100048AE0	0x00000013	[ 15] literal string: compile_async_stmt
0x100048AF3	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[0])
0x100048B1A	0x00000026	[ 15] literal string: async for/with outside async function
0x100048B40	0x00000030	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns0) == PN_with_stmt
0x100048B70	0x0000001E	[ 15] literal string: compile_decrease_except_level
0x100048B8E	0x0000001B	[ 15] literal string: comp->cur_except_level > 0
0x100048BA9	0x00000018	[ 15] literal string: compile_async_with_stmt
0x100048BC1	0x00000006	[ 15] literal string: n > 0
0x100048BC7	0x00000010	[ 15] literal string: compile_if_stmt
0x100048BD7	0x0000003A	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_elif[i], PN_if_stmt_elif)
0x100048C11	0x00000021	[ 15] literal string: compile_for_stmt_optimised_range
0x100048C32	0x00000024	[ 15] literal string: MP_PARSE_NODE_IS_SMALL_INT(pn_step)
0x100048C56	0x00000011	[ 15] literal string: compile_try_stmt
0x100048C67	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[1])
0x100048C8E	0x00000014	[ 15] literal string: compile_try_finally
0x100048CA2	0x0000001F	[ 15] literal string: MP_PARSE_NODE_IS_NULL(pn_else)
0x100048CC1	0x00000013	[ 15] literal string: compile_try_except
0x100048CD4	0x00000040	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pn_excepts[i], PN_try_stmt_except)
0x100048D14	0x0000001E	[ 15] literal string: default 'except' must be last
0x100048D32	0x00000012	[ 15] literal string: compile_with_stmt
0x100048D44	0x00000015	[ 15] literal string: compile_test_if_expr
0x100048D59	0x0000003D	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[1], PN_test_if_else)
0x100048D96	0x00000013	[ 15] literal string: compile_comparison
0x100048DA9	0x00000027	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT(pns->nodes[i])
0x100048DD0	0x00000016	[ 15] literal string: kind == PN_comp_op_is
0x100048DE6	0x0000001D	[ 15] literal string: *x must be assignment target
0x100048E03	0x00000011	[ 15] literal string: compile_factor_2
0x100048E14	0x00000019	[ 15] literal string: 'await' outside function
0x100048E2D	0x00000018	[ 15] literal string: super() can't find self
0x100048E45	0x00000013	[ 15] literal string: compile_atom_paren
0x100048E58	0x0000001A	[ 15] literal string: compile_atom_brace_helper
0x100048E72	0x0000001D	[ 15] literal string: expecting key:value for dict
0x100048E8F	0x0000001F	[ 15] literal string: expecting just a value for set
0x100048EAE	0x0000002F	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns1) == PN_comp_for
0x100048EDD	0x00000012	[ 15] literal string: compile_subscript
0x100048EEF	0x00000031	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_subscript_3
0x100048F20	0x0000002D	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == PN_sliceop
0x100048F4D	0x00000019	[ 15] literal string: 'yield' outside function
0x100048F66	0x00000020	[ 15] literal string: compile_scope_func_lambda_param
0x100048F86	0x00000037	[ 15] literal string: MP_PARSE_NODE_IS_STRUCT_KIND(pns->nodes[0], PN_tfpdef)
0x100048FBD	0x0000002E	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND(pns) == pn_dbl_star
0x100048FEB	0x00000015	[ 15] literal string: argument name reused
0x100049000	0x00000012	[ 15] literal string: unknown type '%q'
0x100049012	0x00000021	[ 15] literal string: annotation must be an identifier
0x100049033	0x00000018	[ 15] literal string: compile_scope_comp_iter
0x10004904B	0x0000004C	[ 15] literal string: MP_PARSE_NODE_STRUCT_KIND((mp_parse_node_struct_t *)pn_iter) == PN_comp_for
0x100049097	0x00000015	[ 15] literal string: scope_compute_things
0x1000490AC	0x00000021	[ 15] literal string: !(id2->flags & ID_FLAG_IS_PARAM)
0x1000490CD	0x00000015	[ 16] literal string: mp_emit_common_id_op
0x1000490E2	0x0000000D	[ 16] literal string: emitcommon.c
0x1000490EF	0x0000003F	[ 16] literal string: id->kind == ID_INFO_KIND_CELL || id->kind == ID_INFO_KIND_FREE
0x10004912E	0x00000014	[ 17] literal string: mp_emit_bc_end_pass
0x100049142	0x00000009	[ 17] literal string: emitbc.c
0x10004914B	0x00000016	[ 17] literal string: emit->stack_size == 0
0x100049161	0x00000015	[ 17] literal string: id->local_num <= 255
0x100049176	0x0000002F	[ 17] literal string: emit->code_info_offset <= emit->code_info_size
0x1000491A5	0x0000002D	[ 17] literal string: emit->bytecode_offset <= emit->bytecode_size
0x1000491D2	0x00000012	[ 17] literal string: bytecode overflow
0x1000491E4	0x0000001D	[ 17] literal string: mp_emit_bc_adjust_stack_size
0x100049201	0x00000028	[ 17] literal string: (mp_int_t)emit->stack_size + delta >= 0
0x100049229	0x00000018	[ 17] literal string: mp_emit_bc_label_assign
0x100049241	0x00000019	[ 17] literal string: l < emit->max_num_labels
0x10004925A	0x00000054	[ 17] literal string: emit->pass == MP_PASS_STACK_SIZE || emit->bytecode_offset <= emit->label_offsets[l]
0x1000492AE	0x00000020	[ 17] literal string: mp_emit_bc_load_const_small_int
0x1000492CE	0x00000017	[ 17] literal string: MP_SMALL_INT_FITS(arg)
0x1000492E5	0x00000018	[ 17] literal string: mp_emit_bc_make_closure
0x1000492FD	0x00000015	[ 17] literal string: n_closed_over <= 255
0x100049312	0x00000019	[ 17] literal string: mp_emit_bc_raise_varargs
0x10004932B	0x0000000C	[ 17] literal string: n_args <= 2
0x100049337	0x00000020	[ 17] literal string: emit_get_cur_to_write_code_info
0x100049357	0x00000044	[ 17] literal string: emit->code_info_offset + num_bytes_to_write <= emit->code_info_size
0x10004939B	0x00000021	[ 17] literal string: emit_write_code_info_bytes_lines
0x1000493BC	0x00000027	[ 17] literal string: bytes_to_skip > 0 || lines_to_skip > 0
0x1000493E3	0x0000001F	[ 17] literal string: emit_get_cur_to_write_bytecode
0x100049402	0x00000042	[ 17] literal string: emit->bytecode_offset + num_bytes_to_write <= emit->bytecode_size
0x100049444	0x0000001F	[ 17] literal string: emit_write_bytecode_byte_label
0x100049463	0x00000022	[ 17] literal string: is_signed || bytecode_offset >= 0
0x100049485	0x00000030	[ 17] literal string: 0 <= bytecode_offset && bytecode_offset <= 0x7f
0x1000494B5	0x00000017	[ 18] literal string: mp_asm_base_start_pass
0x1000494CC	0x0000000A	[ 18] literal string: asmbase.c
0x1000494D6	0x00000016	[ 18] literal string: as->code_base != NULL
0x1000494EC	0x00000023	[ 18] literal string: mp_asm_base_get_cur_to_write_bytes
0x10004950F	0x00000036	[ 18] literal string: as->code_offset + num_bytes_to_write <= as->code_size
0x100049545	0x00000019	[ 18] literal string: mp_asm_base_label_assign
0x10004955E	0x0000001B	[ 18] literal string: label < as->max_num_labels
0x100049579	0x00000027	[ 18] literal string: as->label_offsets[label] == (size_t)-1
0x1000495A0	0x0000002C	[ 18] literal string: as->label_offsets[label] == as->code_offset
0x1000495CC	0x00000018	[ 19] literal string: asm_x64_test_r8_with_r8
0x1000495E4	0x00000009	[ 19] literal string: asmx64.c
0x1000495ED	0x0000000E	[ 19] literal string: src_r64_a < 8
0x1000495FB	0x0000000E	[ 19] literal string: src_r64_b < 8
0x100049609	0x00000011	[ 19] literal string: asm_x64_setcc_r8
0x10004961A	0x0000000C	[ 19] literal string: dest_r8 < 8
0x100049626	0x00000010	[ 19] literal string: asm_x64_jmp_reg
0x100049636	0x0000000C	[ 19] literal string: src_r64 < 8
0x100049642	0x0000000E	[ 19] literal string: asm_x64_entry
0x100049650	0x00000010	[ 19] literal string: num_locals >= 0
0x100049660	0x00000011	[ 19] literal string: asm_x64_call_ind
0x100049671	0x0000000D	[ 19] literal string: temp_r64 < 8
0x10004967E	0x0000000F	[ 19] literal string: get_label_dest
0x10004968D	0x00000020	[ 19] literal string: label < as->base.max_num_labels
0x1000496AD	0x00000017	[ 20] literal string: emit_native_start_pass
0x1000496C4	0x0000000D	[ 20] literal string: emitnative.c
0x1000496D1	0x00000028	[ 20] literal string: id->local_num < emit->local_vtype_alloc
0x1000496F9	0x00000015	[ 20] literal string: emit_native_end_pass
0x10004970E	0x0000001A	[ 20] literal string: emit->exc_stack_size == 0
0x100049728	0x0000003B	[ 20] literal string: emit->prelude_ptr_index == emit->emit_common->ct_cur_child
0x100049763	0x0000000D	[ 20] literal string: adjust_stack
0x100049770	0x00000033	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta >= 0
0x1000497A3	0x00000052	[ 20] literal string: (mp_int_t)emit->stack_size + stack_size_delta <= (mp_int_t)emit->stack_info_alloc
0x1000497F5	0x00000022	[ 20] literal string: local '%q' used before type known
0x100049817	0x00000015	[ 20] literal string: conversion to object
0x10004982C	0x0000002C	[ 20] literal string: local '%q' has type '%q' but source is '%q'
0x100049858	0x00000019	[ 20] literal string: emit_native_store_global
0x100049871	0x00000015	[ 20] literal string: vtype == VTYPE_PYOBJ
0x100049886	0x0000001C	[ 20] literal string: emit_native_leave_exc_stack
0x1000498A2	0x00000019	[ 20] literal string: emit->exc_stack_size > 0
0x1000498BB	0x00000018	[ 20] literal string: emit_native_import_name
0x1000498D3	0x0000001E	[ 20] literal string: vtype_fromlist == VTYPE_PYOBJ
0x1000498F1	0x0000001B	[ 20] literal string: vtype_level == VTYPE_PYOBJ
0x10004990C	0x00000018	[ 20] literal string: emit_native_import_from
0x100049924	0x0000001C	[ 20] literal string: vtype_module == VTYPE_PYOBJ
0x100049940	0x00000018	[ 20] literal string: emit_native_import_star
0x100049958	0x00000018	[ 20] literal string: emit_native_load_method
0x100049970	0x0000001A	[ 20] literal string: vtype_base == VTYPE_PYOBJ
0x10004998A	0x00000026	[ 20] literal string: emit_get_stack_pointer_to_reg_for_pop
0x1000499B0	0x00000018	[ 20] literal string: si->kind == STACK_VALUE
0x1000499C8	0x00000015	[ 20] literal string: can't load from '%q'
0x1000499DD	0x0000001B	[ 20] literal string: can't load with '%q' index
0x1000499F8	0x00000011	[ 20] literal string: can't store '%q'
0x100049A09	0x00000014	[ 20] literal string: can't store to '%q'
0x100049A1D	0x0000001C	[ 20] literal string: can't store with '%q' index
0x100049A39	0x0000001A	[ 20] literal string: emit_native_delete_subscr
0x100049A53	0x0000001B	[ 20] literal string: vtype_index == VTYPE_PYOBJ
0x100049A6E	0x00000016	[ 20] literal string: emit_native_load_attr
0x100049A84	0x00000017	[ 20] literal string: emit_native_store_attr
0x100049A9B	0x00000019	[ 20] literal string: vtype_val == VTYPE_PYOBJ
0x100049AB4	0x00000018	[ 20] literal string: emit_native_delete_attr
0x100049ACC	0x00000028	[ 20] literal string: can't implicitly convert '%q' to 'bool'
0x100049AF4	0x00000017	[ 20] literal string: emit_native_setup_with
0x100049B0B	0x0000001A	[ 20] literal string: emit_native_pop_exc_stack
0x100049B25	0x00000016	[ 20] literal string: e->is_active == false
0x100049B3B	0x00000015	[ 20] literal string: emit_native_get_iter
0x100049B50	0x0000001C	[ 20] literal string: unary op %q not implemented
0x100049B6C	0x00000021	[ 20] literal string: div/mod not implemented for uint
0x100049B8D	0x0000001B	[ 20] literal string: comparison of int and uint
0x100049BA8	0x0000001D	[ 20] literal string: binary op %q not implemented
0x100049BC5	0x00000029	[ 20] literal string: can't do binary op between '%q' and '%q'
0x100049BEE	0x00000018	[ 20] literal string: emit_native_build_slice
0x100049C06	0x0000001B	[ 20] literal string: vtype_start == VTYPE_PYOBJ
0x100049C21	0x0000001A	[ 20] literal string: vtype_stop == VTYPE_PYOBJ
0x100049C3B	0x0000000C	[ 20] literal string: n_args == 3
0x100049C47	0x0000001A	[ 20] literal string: vtype_step == VTYPE_PYOBJ
0x100049C61	0x00000016	[ 20] literal string: emit_native_store_map
0x100049C77	0x00000019	[ 20] literal string: vtype_key == VTYPE_PYOBJ
0x100049C90	0x0000001B	[ 20] literal string: vtype_value == VTYPE_PYOBJ
0x100049CAB	0x00000019	[ 20] literal string: vtype_map == VTYPE_PYOBJ
0x100049CC4	0x00000017	[ 20] literal string: emit_native_store_comp
0x100049CDB	0x0000001A	[ 20] literal string: vtype_item == VTYPE_PYOBJ
0x100049CF5	0x00000020	[ 20] literal string: vtype_collection == VTYPE_PYOBJ
0x100049D15	0x0000001C	[ 20] literal string: emit_native_unpack_sequence
0x100049D31	0x00000016	[ 20] literal string: emit_native_unpack_ex
0x100049D47	0x0000001A	[ 20] literal string: emit_native_call_function
0x100049D61	0x00000024	[ 20] literal string: n_positional == 1 && n_keyword == 0
0x100049D85	0x0000000C	[ 20] literal string: !star_flags
0x100049D91	0x00000008	[ 20] literal string: casting
0x100049D99	0x00000019	[ 20] literal string: vtype_fun == VTYPE_PYOBJ
0x100049DB2	0x00000022	[ 20] literal string: return expected '%q' but got '%q'
0x100049DD4	0x00000019	[ 20] literal string: emit_native_return_value
0x100049DED	0x0000001A	[ 20] literal string: emit_native_raise_varargs
0x100049E07	0x0000000C	[ 20] literal string: n_args == 1
0x100049E13	0x00000015	[ 20] literal string: must raise an object
0x100049E28	0x0000000D	[ 20] literal string: native yield
0x100049E35	0x0000000E	[ 21] literal string: asm_x86_entry
0x100049E43	0x00000009	[ 21] literal string: asmx86.c
0x100049E4C	0x00000011	[ 21] literal string: asm_x86_call_ind
0x100049E5D	0x0000000C	[ 21] literal string: n_args <= 4
0x100049E69	0x00000010	[ 23] literal string: asm_thumb_entry
0x100049E79	0x0000000B	[ 23] literal string: asmthumb.c
0x100049E84	0x00000013	[ 23] literal string: asm_thumb_format_4
0x100049E97	0x0000001C	[ 23] literal string: rlo_dest < ASM_THUMB_REG_R8
0x100049EB3	0x0000001B	[ 23] literal string: rlo_src < ASM_THUMB_REG_R8
0x100049ECE	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i16
0x100049EE4	0x0000001D	[ 23] literal string: reg_dest < ASM_THUMB_REG_R15
0x100049F01	0x00000016	[ 23] literal string: asm_thumb_mov_reg_i32
0x100049F17	0x0000001C	[ 23] literal string: reg_dest < ASM_THUMB_REG_R8
0x100049F33	0x0000003D	[ 23] literal string: !as->base.code_base || !(3u & (uintptr_t)as->base.code_base)
0x100049F70	0x00000020	[ 23] literal string: asm_thumb_mov_reg_i32_optimised
0x100049F90	0x00000010	[ 23] literal string: clz + ctz <= 32
0x100049FA0	0x00000018	[ 23] literal string: asm_thumb_mov_local_reg
0x100049FB8	0x00000018	[ 23] literal string: asm_thumb_mov_reg_local
0x100049FD0	0x0000001D	[ 23] literal string: asm_thumb_mov_reg_local_addr
0x100049FED	0x00000035	[ 23] literal string: as->base.pass < MP_ASM_PASS_EMIT || word_offset >= 0
0x10004A022	0x00000016	[ 23] literal string: native method too big
0x10004A038	0x00000013	[ 23] literal string: asm_thumb_bcc_rel9
0x10004A04B	0x00000011	[ 23] literal string: SIGNED_FIT9(rel)
0x10004A05C	0x00000012	[ 23] literal string: asm_thumb_b_rel12
0x10004A06E	0x00000012	[ 23] literal string: SIGNED_FIT12(rel)
0x10004A080	0x00000013	[ 23] literal string: asm_thumb_format_3
0x10004A093	0x0000000B	[ 23] literal string: asmthumb.h
0x10004A09E	0x00000017	[ 23] literal string: rlo < ASM_THUMB_REG_R8
0x10004A0B5	0x0000001A	[ 23] literal string: asm_thumb_mov_local_check
0x10004A0CF	0x00000011	[ 23] literal string: word_offset >= 0
0x10004A0E0	0x00000022	[ 23] literal string: too many locals for native method
0x10004A102	0x00000014	[ 23] literal string: asm_thumb_format_11
0x10004A116	0x0000001D	[ 23] literal string: asm_thumb_add_reg_reg_offset
0x10004A133	0x00000002	[ 23] literal string: 0
0x10004A135	0x00000033	[ 25] literal string: can only have up to 4 parameters to Thumb assembly
0x10004A168	0x00000032	[ 25] literal string: parameters must be registers in sequence r0 to r3
0x10004A19A	0x00000018	[ 25] literal string: emit_inline_thumb_label
0x10004A1B2	0x00000012	[ 25] literal string: emitinlinethumb.c
0x10004A1C4	0x00000021	[ 25] literal string: label_num < emit->max_num_labels
0x10004A1E5	0x0000000A	[ 25] literal string: APSR_nzcv
0x10004A1EF	0x00000006	[ 25] literal string: FPSCR
0x10004A1F5	0x00000035	[ 25] literal string: unsupported Thumb instruction '%s' with %d arguments
0x10004A22A	0x00000014	[ 25] literal string: branch not in range
0x10004A23E	0x00000019	[ 25] literal string: '%s' expects at most r%d
0x10004A257	0x0000001D	[ 25] literal string: '%s' expects an FPU register
0x10004A274	0x00000018	[ 25] literal string: '%s' expects a register
0x10004A28C	0x0000002B	[ 25] literal string: '%s' expects an address of the form [a, b]
0x10004A2B7	0x00000018	[ 25] literal string: '%s' expects an integer
0x10004A2CF	0x0000002B	[ 25] literal string: '%s' integer 0x%x doesn't fit in mask 0x%x
0x10004A2FA	0x00000015	[ 25] literal string: '%s' expects a label
0x10004A30F	0x00000017	[ 25] literal string: label '%q' not defined
0x10004A326	0x00000010	[ 25] literal string: get_arg_reglist
0x10004A336	0x00000029	[ 25] literal string: MP_PARSE_NODE_STRUCT_NUM_NODES(pns) == 1
0x10004A35F	0x0000001B	[ 25] literal string: '%s' expects {r0, r1, ...}
0x10004A37A	0x00000020	[ 25] literal string: '%s' expects a special register
0x10004A39A	0x00000013	[ 25] literal string: asm_thumb_format_1
0x10004A3AD	0x00000013	[ 25] literal string: asm_thumb_format_2
0x10004A3C0	0x0000000E	[ 26] literal string: asm_arm_entry
0x10004A3CE	0x00000009	[ 26] literal string: asmarm.c
0x10004A3D7	0x00000016	[ 26] literal string: asm_arm_mov_reg_pcrel
0x10004A3ED	0x00000012	[ 26] literal string: asm_arm_bcc_label
0x10004A3FF	0x0000000F	[ 26] literal string: asm_arm_bl_ind
0x10004A40E	0x00000016	[ 26] literal string: fun_id < (0x1000 / 4)
0x10004A424	0x00000013	[ 26] literal string: asm_arm_op_mul_reg
0x10004A437	0x00000009	[ 26] literal string: rd != rm
0x10004A440	0x0000002C	[ 26] literal string: asm_arm_bcc: branch does not fit in 24 bits
0x10004A46C	0x0000000D	[ 28] literal string: asm overflow
0x10004A479	0x0000000C	[ 28] literal string: asmxtensa.c
0x10004A485	0x00000020	[ 28] literal string: ERROR: xtensa bccz out of range
0x10004A4A5	0x0000001F	[ 28] literal string: ERROR: xtensa bcc out of range
0x10004A4C4	0x00000034	[ 30] literal string: can only have up to 4 parameters to Xtensa assembly
0x10004A4F8	0x00000032	[ 30] literal string: parameters must be registers in sequence a2 to a5
0x10004A52A	0x00000019	[ 30] literal string: emit_inline_xtensa_label
0x10004A543	0x00000013	[ 30] literal string: emitinlinextensa.c
0x10004A556	0x00000036	[ 30] literal string: unsupported Xtensa instruction '%s' with %d arguments
0x10004A58C	0x0000002A	[ 30] literal string: '%s' integer %d isn't within range %d..%d
0x10004A5B6	0x00000010	[ 32] literal string: mp_format_float
0x10004A5C6	0x0000000E	[ 32] literal string: formatfloat.c
0x10004A5D4	0x00000022	[ 32] literal string: (size_t)(s + 1 - buf) <= buf_size
0x10004A5F6	0x00000023	[ 34] literal string: int() arg 2 must be >= 2 and <= 36
0x10004A619	0x0000002A	[ 34] literal string: invalid syntax for integer with base %d: 
0x10004A643	0x0000001A	[ 34] literal string: invalid syntax for number
0x10004A65D	0x0000001A	[ 34] literal string: mp_obj_new_exception_arg1
0x10004A677	0x00000006	[ 34] literal string: obj.h
0x10004A67D	0x00000030	[ 34] literal string: exc_type->make_new == mp_obj_exception_make_new
0x10004A6AD	0x0000001B	[ 35] literal string: mp_emit_glue_assign_native
0x10004A6C8	0x0000000B	[ 35] literal string: emitglue.c
0x10004A6D3	0x00000058	[ 35] literal string: kind == MP_CODE_NATIVE_PY || kind == MP_CODE_NATIVE_VIPER || kind == MP_CODE_NATIVE_ASM
0x10004A72B	0x00000009	[ 36] literal string: save_obj
0x10004A734	0x00000011	[ 36] literal string: persistentcode.c
0x10004A745	0x00000013	[ 36] literal string: mp_obj_is_float(o)
0x10004A758	0x0000000C	[ 37] literal string: mp_unary_op
0x10004A764	0x0000000A	[ 37] literal string: runtime.c
0x10004A76E	0x00000019	[ 37] literal string: op == MP_UNARY_OP_INVERT
0x10004A787	0x00000018	[ 37] literal string: can't convert %s to int
0x10004A79F	0x0000001E	[ 37] literal string: unsupported type for %q: '%s'
0x10004A7BD	0x00000015	[ 37] literal string: negative shift count
0x10004A7D2	0x00000025	[ 37] literal string: unsupported types for %q: '%s', '%s'
0x10004A7F7	0x0000000F	[ 37] literal string: divide by zero
0x10004A806	0x0000001B	[ 37] literal string: '%s' object isn't callable
0x10004A821	0x00000015	[ 37] literal string: mp_load_method_maybe
0x10004A836	0x0000002E	[ 37] literal string: type->locals_dict->base.type == &mp_type_dict
0x10004A864	0x0000000B	[ 37] literal string: mp_getiter
0x10004A86F	0x00000005	[ 37] literal string: o_in
0x10004A874	0x0000001B	[ 37] literal string: '%s' object isn't iterable
0x10004A88F	0x0000001E	[ 37] literal string: '%s' object isn't an iterator
0x10004A8AD	0x00000029	[ 37] literal string: memory allocation failed, heap is locked
0x10004A8D6	0x0000002E	[ 37] literal string: memory allocation failed, allocating %u bytes
0x10004A904	0x00000025	[ 37] literal string: argument should be a '%q' not a '%q'
0x10004A929	0x00000016	[ 37] literal string: mp_map_slot_is_filled
0x10004A93F	0x00000011	[ 37] literal string: pos < map->alloc
0x10004A950	0x00000028	[ 40] literal string: function doesn't take keyword arguments
0x10004A978	0x00000039	[ 40] literal string: function takes %d positional arguments but %d were given
0x10004A9B1	0x00000032	[ 40] literal string: function missing %d required positional arguments
0x10004A9E3	0x0000002F	[ 40] literal string: function expected at most %d arguments, got %d
0x10004AA12	0x00000017	[ 40] literal string: '%q' argument required
0x10004AA29	0x00000011	[ 40] literal string: mp_arg_parse_all
0x10004AA3A	0x0000000B	[ 40] literal string: argcheck.c
0x10004AA45	0x00000034	[ 40] literal string: (allowed[i].flags & MP_ARG_KIND_MASK) == MP_ARG_OBJ
0x10004AA79	0x00000021	[ 40] literal string: extra positional arguments given
0x10004AA9A	0x0000001E	[ 40] literal string: extra keyword arguments given
0x10004AAB8	0x00000042	[ 40] literal string: keyword argument(s) not yet implemented - use normal args instead
0x10004AAFA	0x00000003	[ 41] literal string: : 
0x10004AAFD	0x0000000E	[ 42] literal string: mp_map_lookup
0x10004AB0B	0x00000006	[ 42] literal string: map.c
0x10004AB11	0x0000002F	[ 42] literal string: !map->is_fixed || lookup_kind == MP_MAP_LOOKUP
0x10004AB40	0x00000006	[ 43] literal string: (nil)
0x10004AB46	0x00000005	[ 43] literal string: <%q>
0x10004AB4B	0x00000017	[ 43] literal string: mp_obj_print_exception
0x10004AB62	0x00000006	[ 43] literal string: obj.c
0x10004AB68	0x0000000B	[ 43] literal string: n % 3 == 0
0x10004AB73	0x00000024	[ 43] literal string: Traceback (most recent call last):\n
0x10004AB97	0x00000015	[ 43] literal string:   File "%q", line %d
0x10004ABAC	0x00000009	[ 43] literal string: , in %q\n
0x10004ABB5	0x0000001A	[ 43] literal string: can't convert %s to float
0x10004ABCF	0x00000022	[ 43] literal string: object '%s' isn't a tuple or list
0x10004ABF1	0x00000024	[ 43] literal string: %q indices must be integers, not %s
0x10004AC15	0x00000016	[ 43] literal string: %q index out of range
0x10004AC2B	0x0000002A	[ 43] literal string: '%s' object doesn't support item deletion
0x10004AC55	0x00000020	[ 43] literal string: '%s' object isn't subscriptable
0x10004AC75	0x0000002C	[ 43] literal string: '%s' object doesn't support item assignment
0x10004ACA1	0x00000025	[ 43] literal string: object with buffer protocol required
0x10004ACC6	0x00000003	[ 44] literal string: , 
0x10004ACC9	0x00000002	[ 44] literal string: ]
0x10004ACCB	0x00000002	[ 44] literal string: )
0x10004ACCD	0x00000031	[ 44] literal string: only slices with step=1 (aka None) are supported
0x10004ACFE	0x00000013	[ 47] literal string: mp_obj_complex_get
0x10004AD11	0x0000000D	[ 47] literal string: objcomplex.c
0x10004AD1E	0x0000002A	[ 47] literal string: mp_obj_is_type(self_in, &mp_type_complex)
0x10004AD48	0x00000027	[ 47] literal string: can't truncate-divide a complex number
0x10004AD6F	0x00000017	[ 47] literal string: complex divide by zero
0x10004AD86	0x00000017	[ 47] literal string: 0.0 to a complex power
0x10004AD9D	0x00000004	[ 47] literal string: %sj
0x10004ADA1	0x00000004	[ 47] literal string: (%s
0x10004ADA5	0x00000002	[ 47] literal string: +
0x10004ADA7	0x00000005	[ 47] literal string: %sj)
0x10004ADAC	0x00000026	[ 48] literal string: dict update sequence has wrong length
0x10004ADD2	0x0000000F	[ 48] literal string: dict_iter_next
0x10004ADE1	0x0000000A	[ 48] literal string: objdict.c
0x10004ADEB	0x0000001B	[ 48] literal string: map->used == 0 || i == max
0x10004AE06	0x00000002	[ 48] literal string: {
0x10004AE08	0x00000002	[ 48] literal string: }
0x10004AE0A	0x00000003	[ 48] literal string: ([
0x10004AE0D	0x00000003	[ 48] literal string: ])
0x10004AE10	0x0000000B	[ 48] literal string: dict_items
0x10004AE1B	0x0000000A	[ 48] literal string: dict_keys
0x10004AE25	0x0000000C	[ 48] literal string: dict_values
0x10004AE31	0x0000001F	[ 48] literal string: popitem(): dictionary is empty
0x10004AE50	0x0000000D	[ 48] literal string: dict_popitem
0x10004AE5D	0x00000015	[ 50] literal string: mp_obj_new_exception
0x10004AE72	0x0000000C	[ 50] literal string: objexcept.c
0x10004AE7E	0x00000019	[ 50] literal string: mp_obj_new_exception_msg
0x10004AE97	0x0000001F	[ 50] literal string: mp_obj_new_exception_msg_vlist
0x10004AEB6	0x0000000C	[ 50] literal string: fmt != NULL
0x10004AEC2	0x00000015	[ 50] literal string: get_native_exception
0x10004AED7	0x00000026	[ 50] literal string: mp_obj_is_exception_instance(self_in)
0x10004AEFD	0x00000011	[ 52] literal string: mp_obj_float_get
0x10004AF0E	0x0000000B	[ 52] literal string: objfloat.c
0x10004AF19	0x00000019	[ 52] literal string: mp_obj_is_float(self_in)
0x10004AF32	0x00000003	[ 52] literal string: .0
0x10004AF35	0x00000009	[ 53] literal string: objfun.c
0x10004AF3E	0x00000013	[ 53] literal string: fun_builtin_1_call
0x10004AF51	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_1)
0x10004AF81	0x00000013	[ 53] literal string: fun_builtin_2_call
0x10004AF94	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_2)
0x10004AFC4	0x00000013	[ 53] literal string: fun_builtin_3_call
0x10004AFD7	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_3)
0x10004B007	0x00000015	[ 53] literal string: fun_builtin_var_call
0x10004B01C	0x00000032	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_var)
0x10004B04E	0x00000019	[ 56] literal string: can't convert inf to int
0x10004B067	0x00000019	[ 56] literal string: can't convert NaN to int
0x10004B080	0x00000013	[ 56] literal string: mp_int_format_size
0x10004B093	0x00000009	[ 56] literal string: objint.c
0x10004B09C	0x00000018	[ 56] literal string: 2 <= base && base <= 16
0x10004B0B4	0x00000015	[ 56] literal string: mp_obj_int_formatted
0x10004B0C9	0x00000026	[ 56] literal string: mp_obj_is_type(self_in, &mp_type_int)
0x10004B0EF	0x0000001A	[ 57] literal string: mp_obj_int_formatted_impl
0x10004B109	0x0000000D	[ 57] literal string: objint_mpz.c
0x10004B116	0x00000019	[ 57] literal string: mp_obj_int_to_bytes_impl
0x10004B12F	0x00000015	[ 57] literal string: mp_obj_int_binary_op
0x10004B144	0x00000025	[ 57] literal string: mp_obj_is_type(lhs_in, &mp_type_int)
0x10004B169	0x0000001A	[ 57] literal string: op == MP_BINARY_OP_DIVMOD
0x10004B183	0x0000002D	[ 57] literal string: overflow converting long int to machine word
0x10004B1B0	0x00000019	[ 57] literal string: mp_obj_int_as_float_impl
0x10004B1C9	0x00000014	[ 58] literal string: pop from empty list
0x10004B1DD	0x00000002	[ 58] literal string: [
0x10004B1DF	0x0000000C	[ 58] literal string: list_subscr
0x10004B1EB	0x0000000A	[ 58] literal string: objlist.c
0x10004B1F5	0x0000000D	[ 58] literal string: len_adj <= 0
0x10004B202	0x00000016	[ 61] literal string: arg must be user-type
0x10004B218	0x00000003	[ 68] literal string: %q
0x10004B21B	0x00000019	[ 69] literal string: slice step can't be zero
0x10004B234	0x00000007	[ 69] literal string: slice(
0x10004B23B	0x00000004	[ 70] literal string: \%c
0x10004B23F	0x00000003	[ 70] literal string: \\
0x10004B242	0x00000003	[ 70] literal string: \n
0x10004B245	0x00000003	[ 70] literal string: \r
0x10004B248	0x00000003	[ 70] literal string: \t
0x10004B24B	0x00000007	[ 70] literal string: \x%02x
0x10004B252	0x00000010	[ 70] literal string: empty separator
0x10004B262	0x00000045	[ 70] literal string: join expects a list of str/bytes objects consistent with self object
0x10004B2A7	0x0000000F	[ 70] literal string: rsplit(None,n)
0x10004B2B6	0x00000014	[ 70] literal string: substring not found
0x10004B2CA	0x00000012	[ 70] literal string: start/end indices
0x10004B2DC	0x0000000E	[ 70] literal string: str_uni_strip
0x10004B2EA	0x00000009	[ 70] literal string: objstr.c
0x10004B2F3	0x0000002A	[ 70] literal string: last_good_char_pos >= first_good_char_pos
0x10004B31D	0x00000019	[ 70] literal string: first_good_char_pos == 0
0x10004B336	0x00000028	[ 70] literal string: single '}' encountered in format string
0x10004B35E	0x00000035	[ 70] literal string: end of format while looking for conversion specifier
0x10004B393	0x00000020	[ 70] literal string: unknown conversion specifier %c
0x10004B3B3	0x00000018	[ 70] literal string: unmatched '{' in format
0x10004B3CB	0x00000024	[ 70] literal string: expected ':' after format specifier
0x10004B3EF	0x0000004A	[ 70] literal string: can't switch from automatic field numbering to manual field specification
0x10004B439	0x00000019	[ 70] literal string: tuple index out of range
0x10004B452	0x0000001D	[ 70] literal string: attributes not supported yet
0x10004B46F	0x0000004A	[ 70] literal string: can't switch from manual field specification to automatic field numbering
0x10004B4B9	0x00000019	[ 70] literal string: mp_obj_str_format_helper
0x10004B4D2	0x00000012	[ 70] literal string: conversion == 'r'
0x10004B4E4	0x00000019	[ 70] literal string: invalid format specifier
0x10004B4FD	0x0000002C	[ 70] literal string: sign not allowed in string format specifier
0x10004B529	0x00000033	[ 70] literal string: sign not allowed with integer format specifier 'c'
0x10004B55C	0x00000031	[ 70] literal string: unknown format code '%c' for object of type '%s'
0x10004B58D	0x00000035	[ 70] literal string: '=' alignment not allowed in string format specifier
0x10004B5C2	0x00000005	[ 70] literal string: <>=^
0x10004B5C7	0x00000010	[ 70] literal string: bcdeEfFgGnosxX%
0x10004B5D7	0x00000014	[ 70] literal string: format needs a dict
0x10004B5EB	0x00000016	[ 70] literal string: incomplete format key
0x10004B601	0x00000012	[ 70] literal string: incomplete format
0x10004B613	0x00000023	[ 70] literal string: format string needs more arguments
0x10004B636	0x00000015	[ 70] literal string: %c needs int or char
0x10004B64B	0x0000000F	[ 70] literal string: integer needed
0x10004B65A	0x00000035	[ 70] literal string: unsupported format character '%c' (0x%x) at index %d
0x10004B68F	0x0000002B	[ 70] literal string: format string didn't convert all arguments
0x10004B6BA	0x0000000C	[ 70] literal string: str_replace
0x10004B6C6	0x0000000D	[ 70] literal string: data != NULL
0x10004B6D3	0x00000019	[ 70] literal string: bytes value out of range
0x10004B6EC	0x0000001A	[ 70] literal string: wrong number of arguments
0x10004B706	0x0000002B	[ 70] literal string: can't convert '%q' object to %q implicitly
0x10004B731	0x00000028	[ 71] literal string: string indices must be integers, not %s
0x10004B759	0x0000001A	[ 71] literal string: string index out of range
0x10004B773	0x00000007	[ 71] literal string: \u%04x
0x10004B77A	0x00000007	[ 71] literal string: \U%08x
0x10004B781	0x0000000B	[ 71] literal string: str_subscr
0x10004B78C	0x00000010	[ 71] literal string: objstrunicode.c
0x10004B79C	0x00000015	[ 71] literal string: type == &mp_type_str
0x10004B7B1	0x00000002	[ 72] literal string: (
0x10004B7B3	0x00000002	[ 72] literal string: ,
0x10004B7B5	0x00000011	[ 72] literal string: mp_obj_tuple_get
0x10004B7C6	0x0000000B	[ 72] literal string: objtuple.c
0x10004B7D1	0x00000024	[ 72] literal string: mp_obj_is_tuple_compatible(self_in)
0x10004B7F5	0x00000014	[ 73] literal string: mp_obj_new_instance
0x10004B809	0x0000000A	[ 73] literal string: objtype.c
0x10004B813	0x00000015	[ 73] literal string: num_native_bases < 2
0x10004B828	0x00000019	[ 73] literal string: mp_obj_instance_make_new
0x10004B841	0x0000001E	[ 73] literal string: mp_obj_is_instance_type(self)
0x10004B85F	0x00000028	[ 73] literal string: __init__() should return None, not '%s'
0x10004B887	0x00000028	[ 73] literal string: type '%q' isn't an acceptable base type
0x10004B8AF	0x0000002E	[ 73] literal string: multiple bases have instance lay-out conflict
0x10004B8DD	0x0000001C	[ 73] literal string: instance_count_native_bases
0x10004B8F9	0x00000025	[ 73] literal string: mp_obj_is_type(*item, &mp_type_type)
0x10004B91E	0x00000014	[ 73] literal string: mp_obj_class_lookup
0x10004B932	0x0000001F	[ 73] literal string: lookup->dest[0] == MP_OBJ_NULL
0x10004B951	0x0000001F	[ 73] literal string: lookup->dest[1] == MP_OBJ_NULL
0x10004B970	0x00000042	[ 73] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(type->locals_dict))
0x10004B9B2	0x0000000D	[ 73] literal string: <class '%q'>
0x10004B9BF	0x0000001C	[ 73] literal string: type takes 1 or 3 arguments
0x10004B9DB	0x0000001C	[ 73] literal string: can't create '%q' instances
0x10004B9F7	0x0000000A	[ 73] literal string: type_attr
0x10004BA01	0x00000027	[ 73] literal string: mp_obj_is_type(self_in, &mp_type_type)
0x10004BA28	0x00000042	[ 73] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(self->locals_dict))
0x10004BA6A	0x00000035	[ 73] literal string: can't add special method to already-subclassed class
0x10004BA9F	0x00000012	[ 73] literal string: <%s object at %p>
0x10004BAB1	0x0000001A	[ 73] literal string: mp_obj_instance_load_attr
0x10004BACB	0x00000032	[ 73] literal string: mp_obj_is_instance_type(mp_obj_get_type(self_in))
0x10004BAFD	0x00000015	[ 73] literal string: unreadable attribute
0x10004BB12	0x0000001D	[ 73] literal string: static_class_method_make_new
0x10004BB2F	0x0000003E	[ 73] literal string: self == &mp_type_staticmethod || self == &mp_type_classmethod
0x10004BB6D	0x00000017	[ 76] literal string: object not in sequence
0x10004BB84	0x00000003	[ 87] literal string: -X
0x10004BB87	0x0000000A	[ 87] literal string: --version
0x10004BB91	0x00000003	[ 87] literal string: -v
0x10004BB94	0x00000003	[ 87] literal string: -O
0x10004BB97	0x00000003	[ 87] literal string: -o
0x10004BB9A	0x00000003	[ 87] literal string: -s
0x10004BB9D	0x00000012	[ 87] literal string: -msmall-int-bits=
0x10004BBAF	0x00000008	[ 87] literal string: -march=
0x10004BBB7	0x00000004	[ 87] literal string: x86
0x10004BBBB	0x00000004	[ 87] literal string: x64
0x10004BBBF	0x00000006	[ 87] literal string: armv6
0x10004BBC5	0x00000007	[ 87] literal string: armv6m
0x10004BBCC	0x00000007	[ 87] literal string: armv7m
0x10004BBD3	0x00000008	[ 87] literal string: armv7em
0x10004BBDB	0x0000000A	[ 87] literal string: armv7emsp
0x10004BBE5	0x0000000A	[ 87] literal string: armv7emdp
0x10004BBEF	0x00000007	[ 87] literal string: xtensa
0x10004BBF6	0x0000000A	[ 87] literal string: xtensawin
0x10004BC00	0x00000016	[ 87] literal string: multiple input files\n
0x10004BC16	0x0000000F	[ 87] literal string: no input file\n
0x10004BC25	0x00000018	[ 87] literal string: FATAL: uncaught NLR %p\n
0x10004BC3D	0x0000000E	[ 87] literal string: emit=bytecode
0x10004BC4B	0x0000000C	[ 87] literal string: emit=native
0x10004BC57	0x0000000B	[ 87] literal string: emit=viper
0x10004BC62	0x0000000A	[ 87] literal string: heapsize=
0x10004BC6C	0x00000277	[ 87] literal string: usage: %s [<opts>] [-X <implopt>] <input filename>\nOptions:\n--version : show version information\n-o : output file for compiled bytecode (defaults to input with .mpy extension)\n-s : source filename to embed in the compiled bytecode (defaults to input file)\n-v : verbose (trace various operations); can be multiple\n-O[N] : apply bytecode optimizations of level N\n\nTarget specific options:\n-msmall-int-bits=number : set the maximum bits used to encode a small-int\n-march=<arch> : set architecture for native emitter; x86, x64, armv6, armv6m, armv7m, armv7em, armv7emsp, armv7emdp, xtensa, xtensawin\n\nImplementation specific options:\n
0x10004BEE3	0x0000003E	[ 87] literal string:   heapsize=<n> -- set the heap size for the GC (default %ld)\n
0x10004BF21	0x00000004	[ 87] literal string: mpy
0x10004BF25	0x00000050	[ 87] literal string: MicroPython v1.19.1-3-g12339dca4-dirty on 2023-03-22; mpy-cross emitting mpy v6
0x10004BF75	0x0000003F	[ 87] literal string:   emit={bytecode,native,viper} -- set the default code emitter
0x10004BFB4	0x00000048	[  0] compact unwind info
0x10004C000	0x00000008	[ 90] non-lazy-pointer-to-local: ____chkstk_darwin
0x10004C008	0x00000008	[ 90] non-lazy-pointer-to-local: ___assert_rtn
0x10004C010	0x00000008	[ 90] non-lazy-pointer-to-local: ___bzero
0x10004C018	0x00000008	[ 90] non-lazy-pointer-to-local: ___error
0x10004C020	0x00000008	[ 90] non-lazy-pointer-to-local: ___exp10
0x10004C028	0x00000008	[ 90] non-lazy-pointer-to-local: ___sincos_stret
0x10004C030	0x00000008	[ 90] non-lazy-pointer-to-local: ___stack_chk_fail
0x10004C038	0x00000008	[  0] non-lazy-pointer-to-local: ___stack_chk_guard
0x10004C040	0x00000008	[  0] non-lazy-pointer-to-local: ___stderrp
0x10004C048	0x00000008	[ 90] non-lazy-pointer-to-local: _atan2
0x10004C050	0x00000008	[ 90] non-lazy-pointer-to-local: _close
0x10004C058	0x00000008	[ 90] non-lazy-pointer-to-local: _exit
0x10004C060	0x00000008	[ 90] non-lazy-pointer-to-local: _exp
0x10004C068	0x00000008	[ 90] non-lazy-pointer-to-local: _fmod
0x10004C070	0x00000008	[ 90] non-lazy-pointer-to-local: _fprintf
0x10004C078	0x00000008	[ 90] non-lazy-pointer-to-local: _log
0x10004C080	0x00000008	[ 90] non-lazy-pointer-to-local: _malloc
0x10004C088	0x00000008	[ 90] non-lazy-pointer-to-local: _memchr
0x10004C090	0x00000008	[ 90] non-lazy-pointer-to-local: _memcmp
0x10004C098	0x00000008	[ 90] non-lazy-pointer-to-local: _memcpy
0x10004C0A0	0x00000008	[ 90] non-lazy-pointer-to-local: _memmove
0x10004C0A8	0x00000008	[ 90] non-lazy-pointer-to-local: _memset
0x10004C0B0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_const_ellipsis_obj
0x10004C0B8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_fun_table
0x10004C0C0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_identity_getiter
0x10004C0C8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_dict_make_new
0x10004C0D0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_exception_make_new
0x10004C0D8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_instance_make_new
0x10004C0E0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_obj_str_binary_op
0x10004C0E8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_IndexError
0x10004C0F0	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_StopIteration
0x10004C0F8	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_bytes
0x10004C100	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_classmethod
0x10004C108	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_complex
0x10004C110	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_dict
0x10004C118	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_float
0x10004C120	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_int
0x10004C128	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_list
0x10004C130	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_object
0x10004C138	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_property
0x10004C140	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_slice
0x10004C148	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_staticmethod
0x10004C150	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_str
0x10004C158	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_tuple
0x10004C160	0x00000008	[  0] non-lazy-pointer-to-local: _mp_type_type
0x10004C168	0x00000008	[ 90] non-lazy-pointer-to-local: _nan
0x10004C170	0x00000008	[ 90] non-lazy-pointer-to-local: _open
0x10004C178	0x00000008	[ 90] non-lazy-pointer-to-local: _pow
0x10004C180	0x00000008	[ 90] non-lazy-pointer-to-local: _printf
0x10004C188	0x00000008	[ 90] non-lazy-pointer-to-local: _puts
0x10004C190	0x00000008	[ 90] non-lazy-pointer-to-local: _read
0x10004C198	0x00000008	[ 90] non-lazy-pointer-to-local: _strchr
0x10004C1A0	0x00000008	[ 90] non-lazy-pointer-to-local: _strcmp
0x10004C1A8	0x00000008	[ 90] non-lazy-pointer-to-local: _strlen
0x10004C1B0	0x00000008	[ 90] non-lazy-pointer-to-local: _strncmp
0x10004C1B8	0x00000008	[ 90] non-lazy-pointer-to-local: _strtol
0x10004C1C0	0x00000008	[ 90] non-lazy-pointer-to-local: _write
0x10004C1D0	0x00000AD0	[  6] _mp_qstr_const_pool
0x10004CCA0	0x00000120	[ 12] _tok_kw
0x10004CDC0	0x00000018	[ 13] _mp_constants_map
0x10004CDE0	0x00000060	[ 15] _emit_asm_table
0x10004CE40	0x00000060	[ 15] _emit_native_table
0x10004CEA0	0x000001D8	[ 15] _compile_function
0x10004D078	0x000001C0	[ 17] _emit_bc_method_table
0x10004D238	0x000001C0	[ 20] _emit_native_x64_method_table
0x10004D3F8	0x000001C0	[ 22] _emit_native_x86_method_table
0x10004D5B8	0x000001C0	[ 24] _emit_native_thumb_method_table
0x10004D778	0x00000038	[ 25] _emit_inline_thumb_method_table
0x10004D7B0	0x000001C0	[ 27] _emit_native_arm_method_table
0x10004D970	0x000001C0	[ 29] _emit_native_xtensa_method_table
0x10004DB30	0x00000038	[ 30] _emit_inline_xtensa_method_table
0x10004DB68	0x000001C0	[ 31] _emit_native_xtensawin_method_table
0x10004DD28	0x00000078	[ 37] _mp_type_checked_fun
0x10004DDA0	0x00000080	[ 43] _mp_obj_get_type.types
0x10004DE20	0x00000078	[ 45] _mp_type_bool
0x10004DE98	0x00000078	[ 47] _mp_type_complex
0x10004DF10	0x00000078	[ 48] _mp_type_dict
0x10004DF88	0x00000020	[ 48] _mp_const_empty_dict_obj
0x10004DFA8	0x00000078	[ 48] _mp_type_dict_view_it
0x10004E020	0x000000E0	[ 48] _dict_locals_dict_table
0x10004E100	0x00000020	[ 48] _dict_locals_dict
0x10004E120	0x00000010	[ 48] _dict_fromkeys_obj
0x10004E130	0x00000018	[ 48] _dict_get_obj
0x10004E148	0x00000018	[ 48] _dict_pop_obj
0x10004E160	0x00000018	[ 48] _dict_setdefault_obj
0x10004E178	0x00000010	[ 48] _dict_clear_obj
0x10004E188	0x00000010	[ 48] _dict_copy_obj
0x10004E198	0x00000018	[ 48] _dict_fromkeys_fun_obj
0x10004E1B0	0x00000010	[ 48] _dict_items_obj
0x10004E1C0	0x00000080	[ 48] _mp_type_dict_view
0x10004E240	0x00000018	[ 48] _mp_dict_view_names
0x10004E258	0x00000010	[ 48] _dict_keys_obj
0x10004E268	0x00000010	[ 48] _dict_popitem_obj
0x10004E278	0x00000018	[ 48] _dict_update_obj
0x10004E290	0x00000010	[ 48] _dict_values_obj
0x10004E2A0	0x00000078	[ 50] _mp_type_BaseException
0x10004E318	0x00000078	[ 50] _mp_type_Exception
0x10004E390	0x00000078	[ 50] _mp_type_StopIteration
0x10004E408	0x00000078	[ 50] _mp_type_ArithmeticError
0x10004E480	0x00000078	[ 50] _mp_type_OverflowError
0x10004E4F8	0x00000078	[ 50] _mp_type_ZeroDivisionError
0x10004E570	0x00000078	[ 50] _mp_type_AttributeError
0x10004E5E8	0x00000078	[ 50] _mp_type_LookupError
0x10004E660	0x00000078	[ 50] _mp_type_IndexError
0x10004E6D8	0x00000078	[ 50] _mp_type_KeyError
0x10004E750	0x00000078	[ 50] _mp_type_MemoryError
0x10004E7C8	0x00000078	[ 50] _mp_type_OSError
0x10004E840	0x00000078	[ 50] _mp_type_RuntimeError
0x10004E8B8	0x00000078	[ 50] _mp_type_NotImplementedError
0x10004E930	0x00000078	[ 50] _mp_type_SyntaxError
0x10004E9A8	0x00000078	[ 50] _mp_type_IndentationError
0x10004EA20	0x00000078	[ 50] _mp_type_TypeError
0x10004EA98	0x00000078	[ 50] _mp_type_ViperTypeError
0x10004EB10	0x00000078	[ 50] _mp_type_ValueError
0x10004EB88	0x00000078	[ 50] _mp_type_UnicodeError
0x10004EC00	0x00000078	[ 52] _mp_type_float
0x10004EC78	0x00000078	[ 53] _mp_type_fun_builtin_1
0x10004ECF0	0x00000078	[ 53] _mp_type_fun_builtin_2
0x10004ED68	0x00000078	[ 53] _mp_type_fun_builtin_3
0x10004EDE0	0x00000078	[ 53] _mp_type_fun_builtin_var
0x10004EE58	0x00000078	[ 55] _mp_type_it
0x10004EED0	0x00000080	[ 56] _mp_type_int
0x10004EF50	0x00000020	[ 56] _int_locals_dict_table
0x10004EF70	0x00000020	[ 56] _int_locals_dict
0x10004EF90	0x00000010	[ 56] _int_from_bytes_obj
0x10004EFA0	0x00000018	[ 56] _int_to_bytes_obj
0x10004EFB8	0x00000018	[ 56] _int_from_bytes_fun_obj
0x10004EFD0	0x00000080	[ 58] _mp_type_list
0x10004F050	0x000000B0	[ 58] _list_locals_dict_table
0x10004F100	0x00000020	[ 58] _list_locals_dict
0x10004F120	0x00000018	[ 58] _list_index_obj
0x10004F138	0x00000018	[ 58] _list_pop_obj
0x10004F150	0x00000010	[ 58] _list_append_obj
0x10004F160	0x00000010	[ 58] _list_clear_obj
0x10004F170	0x00000010	[ 58] _list_copy_obj
0x10004F180	0x00000010	[ 58] _list_count_obj
0x10004F190	0x00000010	[ 58] _list_extend_obj
0x10004F1A0	0x00000010	[ 58] _list_insert_obj
0x10004F1B0	0x00000010	[ 58] _list_remove_obj
0x10004F1C0	0x00000010	[ 58] _list_reverse_obj
0x10004F1D0	0x00000018	[ 58] _list_sort_obj
0x10004F1F0	0x00000080	[ 61] _mp_type_object
0x10004F270	0x00000020	[ 61] _object_locals_dict_table
0x10004F290	0x00000020	[ 61] _object_locals_dict
0x10004F2B0	0x00000010	[ 61] _object___new___obj
0x10004F2C0	0x00000010	[ 61] _object___init___obj
0x10004F2D0	0x00000010	[ 61] _object___new___fun_obj
0x10004F2E0	0x00000078	[ 62] _mp_type_polymorph_iter
0x10004F360	0x00000080	[ 63] _mp_type_property
0x10004F3E0	0x00000030	[ 63] _property_locals_dict_table
0x10004F410	0x00000020	[ 63] _property_locals_dict
0x10004F430	0x00000010	[ 63] _property_getter_obj
0x10004F440	0x00000010	[ 63] _property_setter_obj
0x10004F450	0x00000010	[ 63] _property_deleter_obj
0x10004F460	0x00000078	[ 64] _mp_type_NoneType
0x10004F4D8	0x00000078	[ 68] _mp_type_singleton
0x10004F550	0x00000010	[ 68] _mp_const_ellipsis_obj
0x10004F560	0x00000078	[ 69] _mp_type_slice
0x10004F5E0	0x00000020	[ 70] _mp_const_empty_bytes_obj
0x10004F600	0x00000010	[ 70] _str_join_obj
0x10004F610	0x00000018	[ 70] _str_split_obj
0x10004F628	0x00000018	[ 70] _str_rsplit_obj
0x10004F640	0x00000018	[ 70] _str_find_obj
0x10004F658	0x00000018	[ 70] _str_rfind_obj
0x10004F670	0x00000018	[ 70] _str_index_obj
0x10004F688	0x00000018	[ 70] _str_rindex_obj
0x10004F6A0	0x00000018	[ 70] _str_startswith_obj
0x10004F6B8	0x00000018	[ 70] _str_endswith_obj
0x10004F6D0	0x00000018	[ 70] _str_strip_obj
0x10004F6E8	0x00000018	[ 70] _str_lstrip_obj
0x10004F700	0x00000018	[ 70] _str_rstrip_obj
0x10004F718	0x00000018	[ 70] _str_format_obj
0x10004F730	0x00000018	[ 70] _str_replace_obj
0x10004F748	0x00000018	[ 70] _str_count_obj
0x10004F760	0x00000010	[ 70] _str_lower_obj
0x10004F770	0x00000010	[ 70] _str_upper_obj
0x10004F780	0x00000010	[ 70] _str_isspace_obj
0x10004F790	0x00000010	[ 70] _str_isalpha_obj
0x10004F7A0	0x00000010	[ 70] _str_isdigit_obj
0x10004F7B0	0x00000010	[ 70] _str_isupper_obj
0x10004F7C0	0x00000010	[ 70] _str_islower_obj
0x10004F7D0	0x00000018	[ 70] _bytes_decode_obj
0x10004F7E8	0x00000018	[ 70] _str_encode_obj
0x10004F800	0x00000080	[ 70] _mp_type_bytes
0x10004F880	0x00000170	[ 70] _str8_locals_dict_table
0x10004F9F0	0x00000020	[ 70] _str8_locals_dict
0x10004FA10	0x00000080	[ 71] _mp_type_str
0x10004FA90	0x00000170	[ 71] _struni_locals_dict_table
0x10004FC00	0x00000020	[ 71] _struni_locals_dict
0x10004FC20	0x00000010	[ 72] _mp_const_empty_tuple_obj
0x10004FC30	0x00000080	[ 72] _mp_type_tuple
0x10004FCB0	0x00000020	[ 72] _tuple_locals_dict_table
0x10004FCD0	0x00000020	[ 72] _tuple_locals_dict
0x10004FCF0	0x00000018	[ 72] _tuple_index_obj
0x10004FD08	0x00000010	[ 72] _tuple_count_obj
0x10004FD18	0x00000018	[ 73] _native_base_init_wrapper_obj
0x10004FD30	0x00000078	[ 73] _mp_type_type
0x10004FDA8	0x00000078	[ 73] _mp_type_staticmethod
0x10004FE20	0x00000078	[ 73] _mp_type_classmethod
0x10004FE98	0x00000010	[ 75] _mp_op_getitem_obj
0x10004FEA8	0x00000010	[ 75] _mp_op_setitem_obj
0x10004FEB8	0x00000010	[ 75] _mp_op_delitem_obj
0x10004FED0	0x00000010	[ 81] _mp_builtin_next_obj
0x10004FEE0	0x00000010	[ 87] _mp_stderr_print
0x100050000	0x00000008	[ 87] _heap_size
0x100050008	0x00000003	[  1] _mp_dynamic_compiler
0x100050010	0x00000008	[ 87] _mp_verbose_flag
0x100050018	0x00000320	[  1] _mp_state_ctx
0x100050338	0x00000004	[ 38] _mp_fun_table
0x10005033C	0x00000004	[ 87] _emit_opt

# Dead Stripped Symbols:
#        	Size    	File  Name
<<dead>> 	0x00000026	[ 48] _dict_getiter
<<dead>> 	0x00000018	[ 48] _mp_obj_dict_init
<<dead>> 	0x0000000E	[ 48] _mp_obj_dict_len
<<dead>> 	0x00000034	[ 48] _mp_obj_dict_store
<<dead>> 	0x00000056	[ 48] _mp_obj_dict_delete
<<dead>> 	0x0000008D	[ 48] _dict_get_helper
<<dead>> 	0x0000005D	[ 48] _dict_iter_next
<<dead>> 	0x00000055	[ 48] _dict_view_it_iternext
<<dead>> 	0x00000021	[ 48] _dict_clear
<<dead>> 	0x000000C9	[ 48] _dict_fromkeys
<<dead>> 	0x0000000C	[ 48] _dict_get
<<dead>> 	0x0000002C	[ 48] _dict_items
<<dead>> 	0x000000C1	[ 48] _dict_view_print
<<dead>> 	0x00000038	[ 48] _dict_view_binary_op
<<dead>> 	0x00000029	[ 48] _dict_view_getiter
<<dead>> 	0x0000002C	[ 48] _dict_keys
<<dead>> 	0x0000000F	[ 48] _dict_pop
<<dead>> 	0x0000007D	[ 48] _dict_popitem
<<dead>> 	0x0000000F	[ 48] _dict_setdefault
<<dead>> 	0x0000002C	[ 48] _dict_values
<<dead>> 	0x00000023	[ 48] _dict_iter_next.cold.1
<<dead>> 	0x00000021	[ 48] _dict_iter_next.cold.2
<<dead>> 	0x00000023	[ 48] _dict_popitem.cold.1
<<dead>> 	0x00000078	[ 48] _mp_type_dict
<<dead>> 	0x00000020	[ 48] _mp_const_empty_dict_obj
<<dead>> 	0x00000078	[ 48] _mp_type_dict_view_it
<<dead>> 	0x000000E0	[ 48] _dict_locals_dict_table
<<dead>> 	0x00000020	[ 48] _dict_locals_dict
<<dead>> 	0x00000010	[ 48] _dict_fromkeys_obj
<<dead>> 	0x00000018	[ 48] _dict_get_obj
<<dead>> 	0x00000018	[ 48] _dict_pop_obj
<<dead>> 	0x00000018	[ 48] _dict_setdefault_obj
<<dead>> 	0x00000010	[ 48] _dict_clear_obj
<<dead>> 	0x00000010	[ 48] _dict_copy_obj
<<dead>> 	0x00000018	[ 48] _dict_fromkeys_fun_obj
<<dead>> 	0x00000010	[ 48] _dict_items_obj
<<dead>> 	0x00000080	[ 48] _mp_type_dict_view
<<dead>> 	0x00000018	[ 48] _mp_dict_view_names
<<dead>> 	0x00000010	[ 48] _dict_keys_obj
<<dead>> 	0x00000010	[ 48] _dict_popitem_obj
<<dead>> 	0x00000018	[ 48] _dict_update_obj
<<dead>> 	0x00000010	[ 48] _dict_values_obj
<<dead>> 	0x00000026	[ 48] literal string: dict update sequence has wrong length
<<dead>> 	0x0000000F	[ 48] literal string: dict_iter_next
<<dead>> 	0x0000000A	[ 48] literal string: objdict.c
<<dead>> 	0x0000001B	[ 48] literal string: map->used == 0 || i == max
<<dead>> 	0x00000016	[ 48] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 48] literal string: obj.h
<<dead>> 	0x00000011	[ 48] literal string: pos < map->alloc
<<dead>> 	0x00000003	[ 48] literal string: , 
<<dead>> 	0x00000003	[ 48] literal string: : 
<<dead>> 	0x00000002	[ 48] literal string: {
<<dead>> 	0x00000002	[ 48] literal string: }
<<dead>> 	0x00000003	[ 48] literal string: ([
<<dead>> 	0x00000003	[ 48] literal string: ])
<<dead>> 	0x0000000B	[ 48] literal string: dict_items
<<dead>> 	0x0000000A	[ 48] literal string: dict_keys
<<dead>> 	0x0000000C	[ 48] literal string: dict_values
<<dead>> 	0x0000001F	[ 48] literal string: popitem(): dictionary is empty
<<dead>> 	0x0000000D	[ 48] literal string: dict_popitem
<<dead>> 	0x00000005	[ 48] literal string: next
<<dead>> 	0x00000064	[ 49] _enumerate_make_new
<<dead>> 	0x00000085	[ 49] _enumerate_iternext
<<dead>> 	0x00000021	[ 49] _enumerate_iternext.cold.1
<<dead>> 	0x00000078	[ 49] _mp_type_enumerate
<<dead>> 	0x00000020	[ 49] _enumerate_make_new.allowed_args
<<dead>> 	0x00000013	[ 49] literal string: enumerate_iternext
<<dead>> 	0x0000000F	[ 49] literal string: objenumerate.c
<<dead>> 	0x0000002C	[ 49] literal string: mp_obj_is_type(self_in, &mp_type_enumerate)
<<dead>> 	0x000000B9	[ 50] _mp_obj_exception_print
<<dead>> 	0x000000AE	[ 50] _mp_obj_exception_make_new
<<dead>> 	0x00000021	[ 50] _mp_obj_exception_get_value
<<dead>> 	0x00000042	[ 50] _get_native_exception
<<dead>> 	0x0000006D	[ 50] _mp_obj_exception_attr
<<dead>> 	0x00000065	[ 50] _mp_obj_new_exception
<<dead>> 	0x00000021	[ 50] _mp_obj_new_exception_args
<<dead>> 	0x000000C7	[ 50] _mp_obj_new_exception_msg
<<dead>> 	0x0000009A	[ 50] _mp_obj_new_exception_msg_varg
<<dead>> 	0x00000159	[ 50] _mp_obj_new_exception_msg_vlist
<<dead>> 	0x00000091	[ 50] _exc_add_strn
<<dead>> 	0x00000034	[ 50] _mp_obj_is_exception_type
<<dead>> 	0x00000012	[ 50] _mp_obj_is_exception_instance
<<dead>> 	0x00000038	[ 50] _mp_obj_exception_match
<<dead>> 	0x00000013	[ 50] _mp_obj_exception_clear_traceback
<<dead>> 	0x000000C2	[ 50] _mp_obj_exception_add_traceback
<<dead>> 	0x0000002D	[ 50] _mp_obj_exception_get_traceback
<<dead>> 	0x00000021	[ 50] _get_native_exception.cold.1
<<dead>> 	0x00000023	[ 50] _mp_obj_new_exception.cold.1
<<dead>> 	0x00000023	[ 50] _mp_obj_new_exception_args.cold.1
<<dead>> 	0x00000023	[ 50] _mp_obj_new_exception_msg.cold.1
<<dead>> 	0x00000023	[ 50] _mp_obj_new_exception_msg_vlist.cold.1
<<dead>> 	0x00000023	[ 50] _mp_obj_new_exception_msg_vlist.cold.2
<<dead>> 	0x00000003	[ 50] literal string: : 
<<dead>> 	0x00000001	[ 50] literal string: 
<<dead>> 	0x00000015	[ 50] literal string: mp_obj_new_exception
<<dead>> 	0x0000000C	[ 50] literal string: objexcept.c
<<dead>> 	0x00000030	[ 50] literal string: exc_type->make_new == mp_obj_exception_make_new
<<dead>> 	0x0000001A	[ 50] literal string: mp_obj_new_exception_args
<<dead>> 	0x00000019	[ 50] literal string: mp_obj_new_exception_msg
<<dead>> 	0x0000001F	[ 50] literal string: mp_obj_new_exception_msg_vlist
<<dead>> 	0x0000000C	[ 50] literal string: fmt != NULL
<<dead>> 	0x00000015	[ 50] literal string: get_native_exception
<<dead>> 	0x00000026	[ 50] literal string: mp_obj_is_exception_instance(self_in)
<<dead>> 	0x00000078	[ 50] _mp_type_BaseException
<<dead>> 	0x00000078	[ 50] _mp_type_SystemExit
<<dead>> 	0x00000078	[ 50] _mp_type_KeyboardInterrupt
<<dead>> 	0x00000078	[ 50] _mp_type_GeneratorExit
<<dead>> 	0x00000078	[ 50] _mp_type_Exception
<<dead>> 	0x00000078	[ 50] _mp_type_StopAsyncIteration
<<dead>> 	0x00000078	[ 50] _mp_type_StopIteration
<<dead>> 	0x00000078	[ 50] _mp_type_ArithmeticError
<<dead>> 	0x00000078	[ 50] _mp_type_OverflowError
<<dead>> 	0x00000078	[ 50] _mp_type_ZeroDivisionError
<<dead>> 	0x00000078	[ 50] _mp_type_AssertionError
<<dead>> 	0x00000078	[ 50] _mp_type_AttributeError
<<dead>> 	0x00000078	[ 50] _mp_type_EOFError
<<dead>> 	0x00000078	[ 50] _mp_type_ImportError
<<dead>> 	0x00000078	[ 50] _mp_type_LookupError
<<dead>> 	0x00000078	[ 50] _mp_type_IndexError
<<dead>> 	0x00000078	[ 50] _mp_type_KeyError
<<dead>> 	0x00000078	[ 50] _mp_type_MemoryError
<<dead>> 	0x00000078	[ 50] _mp_type_NameError
<<dead>> 	0x00000078	[ 50] _mp_type_OSError
<<dead>> 	0x00000078	[ 50] _mp_type_RuntimeError
<<dead>> 	0x00000078	[ 50] _mp_type_NotImplementedError
<<dead>> 	0x00000078	[ 50] _mp_type_SyntaxError
<<dead>> 	0x00000078	[ 50] _mp_type_IndentationError
<<dead>> 	0x00000078	[ 50] _mp_type_TypeError
<<dead>> 	0x00000078	[ 50] _mp_type_ViperTypeError
<<dead>> 	0x00000078	[ 50] _mp_type_ValueError
<<dead>> 	0x00000078	[ 50] _mp_type_UnicodeError
<<dead>> 	0x00000054	[ 51] _filter_make_new
<<dead>> 	0x0000005D	[ 51] _filter_iternext
<<dead>> 	0x00000078	[ 51] _mp_type_filter
<<dead>> 	0x000000B2	[ 52] _float_print
<<dead>> 	0x000000B6	[ 52] _float_make_new
<<dead>> 	0x000000C8	[ 52] _float_unary_op
<<dead>> 	0x00000047	[ 52] _float_binary_op
<<dead>> 	0x00000031	[ 52] _mp_obj_new_float
<<dead>> 	0x00000022	[ 52] _mp_obj_float_get
<<dead>> 	0x0000039E	[ 52] _mp_obj_float_binary_op
<<dead>> 	0x000000C0	[ 52] _mp_obj_float_divmod
<<dead>> 	0x00000023	[ 52] _mp_obj_float_get.cold.1
<<dead>> 	0x00000010	[ 52] 16-byte-literal
<<dead>> 	0x00000010	[ 52] 16-byte-literal
<<dead>> 	0x00000010	[ 52] 16-byte-literal
<<dead>> 	0x00000010	[ 52] 16-byte-literal
<<dead>> 	0x00000008	[ 52] 8-byte-literal
<<dead>> 	0x00000008	[ 52] 8-byte-literal
<<dead>> 	0x00000008	[ 52] 8-byte-literal
<<dead>> 	0x00000008	[ 52] 8-byte-literal
<<dead>> 	0x00000008	[ 52] 8-byte-literal
<<dead>> 	0x00000078	[ 52] _mp_type_float
<<dead>> 	0x00000010	[ 52] _mp_const_float_e_obj
<<dead>> 	0x00000010	[ 52] _mp_const_float_pi_obj
<<dead>> 	0x00000011	[ 52] literal string: mp_obj_float_get
<<dead>> 	0x0000000B	[ 52] literal string: objfloat.c
<<dead>> 	0x00000019	[ 52] literal string: mp_obj_is_float(self_in)
<<dead>> 	0x0000000F	[ 52] literal string: divide by zero
<<dead>> 	0x00000003	[ 52] literal string: .0
<<dead>> 	0x00000039	[ 53] _fun_builtin_0_call
<<dead>> 	0x00000041	[ 53] _fun_builtin_1_call
<<dead>> 	0x00000044	[ 53] _fun_builtin_2_call
<<dead>> 	0x00000048	[ 53] _fun_builtin_3_call
<<dead>> 	0x0000008F	[ 53] _fun_builtin_var_call
<<dead>> 	0x00000054	[ 53] _mp_obj_fun_get_name
<<dead>> 	0x00000030	[ 53] _fun_bc_print
<<dead>> 	0x00000182	[ 53] _fun_bc_call
<<dead>> 	0x0000010F	[ 53] _mp_obj_new_fun_bc
<<dead>> 	0x00000015	[ 53] _mp_obj_new_fun_native
<<dead>> 	0x0000003B	[ 53] _mp_obj_new_fun_asm
<<dead>> 	0x00000036	[ 53] _fun_native_call
<<dead>> 	0x00000128	[ 53] _fun_asm_call
<<dead>> 	0x000000F7	[ 53] _convert_obj_for_inline_asm
<<dead>> 	0x00000021	[ 53] _fun_builtin_0_call.cold.1
<<dead>> 	0x00000021	[ 53] _fun_builtin_1_call.cold.1
<<dead>> 	0x00000021	[ 53] _fun_builtin_2_call.cold.1
<<dead>> 	0x00000021	[ 53] _fun_builtin_3_call.cold.1
<<dead>> 	0x00000021	[ 53] _fun_builtin_var_call.cold.1
<<dead>> 	0x00000023	[ 53] _fun_bc_call.cold.1
<<dead>> 	0x00000023	[ 53] _mp_obj_new_fun_bc.cold.1
<<dead>> 	0x00000023	[ 53] _mp_obj_new_fun_bc.cold.2
<<dead>> 	0x00000023	[ 53] _fun_asm_call.cold.1
<<dead>> 	0x00000078	[ 53] _mp_type_fun_builtin_0
<<dead>> 	0x00000078	[ 53] _mp_type_fun_builtin_1
<<dead>> 	0x00000078	[ 53] _mp_type_fun_builtin_2
<<dead>> 	0x00000078	[ 53] _mp_type_fun_builtin_3
<<dead>> 	0x00000078	[ 53] _mp_type_fun_builtin_var
<<dead>> 	0x00000078	[ 53] _mp_type_fun_native
<<dead>> 	0x00000078	[ 53] _mp_type_fun_bc
<<dead>> 	0x00000078	[ 53] _mp_type_fun_asm
<<dead>> 	0x00000012	[ 53] literal string: mp_obj_new_fun_bc
<<dead>> 	0x00000009	[ 53] literal string: objfun.c
<<dead>> 	0x0000002C	[ 53] literal string: mp_obj_is_type(def_args[0], &mp_type_tuple)
<<dead>> 	0x0000002B	[ 53] literal string: mp_obj_is_type(def_args[1], &mp_type_dict)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_0_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_0)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_1_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_1)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_2_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_2)
<<dead>> 	0x00000013	[ 53] literal string: fun_builtin_3_call
<<dead>> 	0x00000030	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_3)
<<dead>> 	0x00000015	[ 53] literal string: fun_builtin_var_call
<<dead>> 	0x00000032	[ 53] literal string: mp_obj_is_type(self_in, &mp_type_fun_builtin_var)
<<dead>> 	0x00000016	[ 53] literal string: <function %q at 0x%p>
<<dead>> 	0x0000000C	[ 53] literal string: fun_bc_call
<<dead>> 	0x00000029	[ 53] literal string: vm_return_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000000D	[ 53] literal string: fun_asm_call
<<dead>> 	0x0000000C	[ 53] literal string: n_args == 4
<<dead>> 	0x000000CC	[ 54] _gen_wrap_call
<<dead>> 	0x000000DE	[ 54] _native_gen_wrap_call
<<dead>> 	0x0000016A	[ 54] _mp_obj_gen_resume
<<dead>> 	0x00000031	[ 54] _gen_instance_print
<<dead>> 	0x00000013	[ 54] _gen_instance_iternext
<<dead>> 	0x00000055	[ 54] _gen_resume_and_raise
<<dead>> 	0x0000006B	[ 54] _gen_instance_close
<<dead>> 	0x00000011	[ 54] _gen_instance_send
<<dead>> 	0x0000002D	[ 54] _gen_instance_throw
<<dead>> 	0x0000001F	[ 54] _gen_instance_pend_throw
<<dead>> 	0x00000020	[ 54] _mp_const_GeneratorExit_obj
<<dead>> 	0x00000078	[ 54] _mp_type_gen_wrap
<<dead>> 	0x00000078	[ 54] _mp_type_native_gen_wrap
<<dead>> 	0x00000080	[ 54] _mp_type_gen_instance
<<dead>> 	0x00000040	[ 54] _gen_instance_locals_dict_table
<<dead>> 	0x00000020	[ 54] _gen_instance_locals_dict
<<dead>> 	0x00000018	[ 54] _gen_instance_throw_obj
<<dead>> 	0x00000010	[ 54] _gen_instance_close_obj
<<dead>> 	0x00000010	[ 54] _gen_instance_send_obj
<<dead>> 	0x00000010	[ 54] _gen_instance_pend_throw_obj
<<dead>> 	0x0000001C	[ 54] literal string: generator already executing
<<dead>> 	0x00000036	[ 54] literal string: can't send non-None value to a just-started generator
<<dead>> 	0x0000001F	[ 54] literal string: generator raised StopIteration
<<dead>> 	0x0000001E	[ 54] literal string: <generator object '%q' at %p>
<<dead>> 	0x00000020	[ 54] literal string: generator ignored GeneratorExit
<<dead>> 	0x0000002A	[ 55] _mp_obj_new_getitem_iter
<<dead>> 	0x00000070	[ 55] _it_iternext
<<dead>> 	0x00000078	[ 55] _mp_type_it
<<dead>> 	0x000000AD	[ 56] _mp_obj_new_int_from_float
<<dead>> 	0x0000008C	[ 56] _mp_obj_int_print
<<dead>> 	0x000001D8	[ 56] _mp_obj_int_formatted
<<dead>> 	0x00000070	[ 56] _mp_int_format_size
<<dead>> 	0x0000006F	[ 56] _mp_obj_int_binary_op_extra_cases
<<dead>> 	0x000000FD	[ 56] _mp_obj_int_make_new
<<dead>> 	0x000000A4	[ 56] _int_from_bytes
<<dead>> 	0x000000C3	[ 56] _int_to_bytes
<<dead>> 	0x00000023	[ 56] _mp_obj_int_formatted.cold.1
<<dead>> 	0x00000023	[ 56] _mp_int_format_size.cold.1
<<dead>> 	0x00000019	[ 56] literal string: can't convert inf to int
<<dead>> 	0x00000019	[ 56] literal string: can't convert NaN to int
<<dead>> 	0x00000013	[ 56] literal string: mp_int_format_size
<<dead>> 	0x00000009	[ 56] literal string: objint.c
<<dead>> 	0x00000018	[ 56] literal string: 2 <= base && base <= 16
<<dead>> 	0x00000015	[ 56] literal string: mp_obj_int_formatted
<<dead>> 	0x00000026	[ 56] literal string: mp_obj_is_type(self_in, &mp_type_int)
<<dead>> 	0x00000010	[ 56] _log_base2_floor
<<dead>> 	0x00000080	[ 56] _mp_type_int
<<dead>> 	0x00000020	[ 56] _int_locals_dict_table
<<dead>> 	0x00000020	[ 56] _int_locals_dict
<<dead>> 	0x00000010	[ 56] _int_from_bytes_obj
<<dead>> 	0x00000018	[ 56] _int_to_bytes_obj
<<dead>> 	0x00000018	[ 56] _int_from_bytes_fun_obj
<<dead>> 	0x0000002D	[ 57] _mp_obj_int_new_mpz
<<dead>> 	0x000000B8	[ 57] _mp_obj_int_formatted_impl
<<dead>> 	0x0000005A	[ 57] _mp_obj_int_from_bytes_impl
<<dead>> 	0x00000029	[ 57] _mp_obj_int_to_bytes_impl
<<dead>> 	0x0000003A	[ 57] _mp_obj_int_sign
<<dead>> 	0x0000012A	[ 57] _mp_obj_int_unary_op
<<dead>> 	0x00000454	[ 57] _mp_obj_int_binary_op
<<dead>> 	0x00000044	[ 57] _mp_obj_int_get_checked
<<dead>> 	0x0000001C	[ 57] _mp_obj_new_int
<<dead>> 	0x0000004B	[ 57] _mp_obj_new_int_from_ll
<<dead>> 	0x00000048	[ 57] _mp_obj_new_int_from_ull
<<dead>> 	0x0000001C	[ 57] _mp_obj_new_int_from_uint
<<dead>> 	0x00000066	[ 57] _mp_obj_new_int_from_str_len
<<dead>> 	0x0000001C	[ 57] _mp_obj_int_get_truncated
<<dead>> 	0x00000049	[ 57] _mp_obj_int_get_uint_checked
<<dead>> 	0x00000025	[ 57] _mp_obj_int_as_float_impl
<<dead>> 	0x00000021	[ 57] _mp_obj_int_formatted_impl.cold.1
<<dead>> 	0x00000021	[ 57] _mp_obj_int_to_bytes_impl.cold.1
<<dead>> 	0x00000023	[ 57] _mp_obj_int_binary_op.cold.1
<<dead>> 	0x00000023	[ 57] _mp_obj_int_binary_op.cold.2
<<dead>> 	0x00000023	[ 57] _mp_obj_int_as_float_impl.cold.1
<<dead>> 	0x0000001A	[ 57] literal string: mp_obj_int_formatted_impl
<<dead>> 	0x0000000D	[ 57] literal string: objint_mpz.c
<<dead>> 	0x00000026	[ 57] literal string: mp_obj_is_type(self_in, &mp_type_int)
<<dead>> 	0x00000019	[ 57] literal string: mp_obj_int_to_bytes_impl
<<dead>> 	0x00000015	[ 57] literal string: mp_obj_int_binary_op
<<dead>> 	0x00000025	[ 57] literal string: mp_obj_is_type(lhs_in, &mp_type_int)
<<dead>> 	0x0000000F	[ 57] literal string: divide by zero
<<dead>> 	0x00000015	[ 57] literal string: negative shift count
<<dead>> 	0x0000001A	[ 57] literal string: op == MP_BINARY_OP_DIVMOD
<<dead>> 	0x0000002D	[ 57] literal string: overflow converting long int to machine word
<<dead>> 	0x00000019	[ 57] literal string: mp_obj_int_as_float_impl
<<dead>> 	0x0000006F	[ 58] _mp_obj_list_append
<<dead>> 	0x0000006E	[ 58] _mp_obj_list_sort
<<dead>> 	0x0000016D	[ 58] _mp_quicksort
<<dead>> 	0x00000069	[ 58] _mp_obj_list_remove
<<dead>> 	0x0000001B	[ 58] _list_index
<<dead>> 	0x000000B8	[ 58] _list_pop
<<dead>> 	0x00000075	[ 58] _list_print
<<dead>> 	0x00000055	[ 58] _list_make_new
<<dead>> 	0x0000002E	[ 58] _list_unary_op
<<dead>> 	0x00000180	[ 58] _list_binary_op
<<dead>> 	0x000002C9	[ 58] _list_subscr
<<dead>> 	0x0000002A	[ 58] _list_getiter
<<dead>> 	0x00000052	[ 58] _mp_obj_list_init
<<dead>> 	0x00000056	[ 58] _mp_obj_new_list
<<dead>> 	0x00000014	[ 58] _mp_obj_list_get
<<dead>> 	0x0000000A	[ 58] _mp_obj_list_set_len
<<dead>> 	0x0000002B	[ 58] _mp_obj_list_store
<<dead>> 	0x0000003C	[ 58] _list_extend_from_iter
<<dead>> 	0x000000A2	[ 58] _list_extend
<<dead>> 	0x00000027	[ 58] _list_it_iternext
<<dead>> 	0x00000041	[ 58] _list_clear
<<dead>> 	0x00000015	[ 58] _list_copy
<<dead>> 	0x00000015	[ 58] _list_count
<<dead>> 	0x0000006E	[ 58] _list_insert
<<dead>> 	0x0000004A	[ 58] _list_reverse
<<dead>> 	0x00000023	[ 58] _list_subscr.cold.1
<<dead>> 	0x00000020	[ 58] _mp_obj_list_sort.allowed_args
<<dead>> 	0x00000080	[ 58] _mp_type_list
<<dead>> 	0x000000B0	[ 58] _list_locals_dict_table
<<dead>> 	0x00000020	[ 58] _list_locals_dict
<<dead>> 	0x00000018	[ 58] _list_index_obj
<<dead>> 	0x00000018	[ 58] _list_pop_obj
<<dead>> 	0x00000010	[ 58] _list_append_obj
<<dead>> 	0x00000010	[ 58] _list_clear_obj
<<dead>> 	0x00000010	[ 58] _list_copy_obj
<<dead>> 	0x00000010	[ 58] _list_count_obj
<<dead>> 	0x00000010	[ 58] _list_extend_obj
<<dead>> 	0x00000010	[ 58] _list_insert_obj
<<dead>> 	0x00000010	[ 58] _list_remove_obj
<<dead>> 	0x00000010	[ 58] _list_reverse_obj
<<dead>> 	0x00000018	[ 58] _list_sort_obj
<<dead>> 	0x00000014	[ 58] literal string: pop from empty list
<<dead>> 	0x00000003	[ 58] literal string: , 
<<dead>> 	0x00000002	[ 58] literal string: [
<<dead>> 	0x00000002	[ 58] literal string: ]
<<dead>> 	0x0000000C	[ 58] literal string: list_subscr
<<dead>> 	0x0000000A	[ 58] literal string: objlist.c
<<dead>> 	0x0000000D	[ 58] literal string: len_adj <= 0
<<dead>> 	0x0000007F	[ 59] _map_make_new
<<dead>> 	0x00000076	[ 59] _map_iternext
<<dead>> 	0x00000078	[ 59] _mp_type_map
<<dead>> 	0x0000004E	[ 60] _module_print
<<dead>> 	0x0000009D	[ 60] _module_attr
<<dead>> 	0x0000007D	[ 60] _mp_obj_new_module
<<dead>> 	0x0000004D	[ 60] _mp_module_get_loaded_or_builtin
<<dead>> 	0x00000047	[ 60] _mp_module_generic_attr
<<dead>> 	0x00000080	[ 60] _mp_type_module
<<dead>> 	0x00000040	[ 60] _mp_builtin_module_table
<<dead>> 	0x00000018	[ 60] _mp_builtin_module_map
<<dead>> 	0x00000001	[ 60] literal string: 
<<dead>> 	0x0000000E	[ 60] literal string: <module '%s'>
<<dead>> 	0x00000029	[ 61] _object_make_new
<<dead>> 	0x0000000B	[ 61] _object___init__
<<dead>> 	0x00000042	[ 61] _object___new__
<<dead>> 	0x00000080	[ 61] _mp_type_object
<<dead>> 	0x00000020	[ 61] _object_locals_dict_table
<<dead>> 	0x00000020	[ 61] _object_locals_dict
<<dead>> 	0x00000010	[ 61] _object___new___obj
<<dead>> 	0x00000010	[ 61] _object___init___obj
<<dead>> 	0x00000010	[ 61] _object___new___fun_obj
<<dead>> 	0x00000016	[ 61] literal string: arg must be user-type
<<dead>> 	0x00000008	[ 62] _polymorph_it_iternext
<<dead>> 	0x00000078	[ 62] _mp_type_polymorph_iter
<<dead>> 	0x00000082	[ 63] _property_make_new
<<dead>> 	0x0000000A	[ 63] _mp_obj_property_get
<<dead>> 	0x0000002E	[ 63] _property_getter
<<dead>> 	0x0000002E	[ 63] _property_setter
<<dead>> 	0x0000002E	[ 63] _property_deleter
<<dead>> 	0x00000080	[ 63] _mp_type_property
<<dead>> 	0x00000030	[ 63] _property_locals_dict_table
<<dead>> 	0x00000020	[ 63] _property_locals_dict
<<dead>> 	0x00000010	[ 63] _property_getter_obj
<<dead>> 	0x00000010	[ 63] _property_setter_obj
<<dead>> 	0x00000010	[ 63] _property_deleter_obj
<<dead>> 	0x00000040	[ 63] _property_make_new.allowed_args
<<dead>> 	0x00000011	[ 64] _none_print
<<dead>> 	0x00000078	[ 64] _mp_type_NoneType
<<dead>> 	0x00000005	[ 64] literal string: None
<<dead>> 	0x00000055	[ 65] _range_print
<<dead>> 	0x0000009A	[ 65] _range_make_new
<<dead>> 	0x00000059	[ 65] _range_unary_op
<<dead>> 	0x00000050	[ 65] _range_attr
<<dead>> 	0x000000DE	[ 65] _range_subscr
<<dead>> 	0x00000023	[ 65] _range_getiter
<<dead>> 	0x0000003F	[ 65] _range_it_iternext
<<dead>> 	0x00000078	[ 65] _mp_type_range
<<dead>> 	0x00000078	[ 65] _mp_type_range_it
<<dead>> 	0x0000000F	[ 65] literal string: range(%ld, %ld
<<dead>> 	0x00000002	[ 65] literal string: )
<<dead>> 	0x00000007	[ 65] literal string: , %ld)
<<dead>> 	0x0000000A	[ 65] literal string: zero step
<<dead>> 	0x000000AB	[ 66] _reversed_make_new
<<dead>> 	0x0000002F	[ 66] _reversed_iternext
<<dead>> 	0x00000078	[ 66] _mp_type_reversed
<<dead>> 	0x000000AB	[ 67] _set_print
<<dead>> 	0x00000093	[ 67] _set_make_new
<<dead>> 	0x0000002E	[ 67] _set_unary_op
<<dead>> 	0x00000268	[ 67] _set_binary_op
<<dead>> 	0x0000002A	[ 67] _set_getiter
<<dead>> 	0x0000006C	[ 67] _mp_obj_new_set
<<dead>> 	0x00000013	[ 67] _mp_obj_set_store
<<dead>> 	0x00000025	[ 67] _set_union
<<dead>> 	0x00000025	[ 67] _set_symmetric_difference
<<dead>> 	0x0000000C	[ 67] _set_intersect
<<dead>> 	0x0000000C	[ 67] _set_diff
<<dead>> 	0x0000003F	[ 67] _set_update
<<dead>> 	0x0000004F	[ 67] _set_symmetric_difference_update
<<dead>> 	0x000000FA	[ 67] _set_intersect_int
<<dead>> 	0x00000093	[ 67] _set_diff_int
<<dead>> 	0x0000000C	[ 67] _set_issubset
<<dead>> 	0x00000015	[ 67] _set_issuperset
<<dead>> 	0x0000004C	[ 67] _set_copy
<<dead>> 	0x0000004A	[ 67] _set_update_int
<<dead>> 	0x00000019	[ 67] _set_add
<<dead>> 	0x00000014	[ 67] _set_clear
<<dead>> 	0x00000147	[ 67] _set_issubset_internal
<<dead>> 	0x00000046	[ 67] _set_it_iternext
<<dead>> 	0x00000019	[ 67] _set_discard
<<dead>> 	0x00000015	[ 67] _set_diff_update
<<dead>> 	0x0000000F	[ 67] _set_intersect_update
<<dead>> 	0x00000058	[ 67] _set_isdisjoint
<<dead>> 	0x00000027	[ 67] _set_pop
<<dead>> 	0x00000037	[ 67] _set_remove
<<dead>> 	0x00000080	[ 67] _mp_type_set
<<dead>> 	0x00000120	[ 67] _set_locals_dict_table
<<dead>> 	0x00000020	[ 67] _set_locals_dict
<<dead>> 	0x00000018	[ 67] _set_diff_obj
<<dead>> 	0x00000018	[ 67] _set_diff_update_obj
<<dead>> 	0x00000018	[ 67] _set_update_obj
<<dead>> 	0x00000010	[ 67] _set_add_obj
<<dead>> 	0x00000010	[ 67] _set_clear_obj
<<dead>> 	0x00000010	[ 67] _set_copy_obj
<<dead>> 	0x00000010	[ 67] _set_discard_obj
<<dead>> 	0x00000010	[ 67] _set_intersect_obj
<<dead>> 	0x00000010	[ 67] _set_intersect_update_obj
<<dead>> 	0x00000010	[ 67] _set_isdisjoint_obj
<<dead>> 	0x00000010	[ 67] _set_issubset_obj
<<dead>> 	0x00000010	[ 67] _set_issuperset_obj
<<dead>> 	0x00000010	[ 67] _set_pop_obj
<<dead>> 	0x00000010	[ 67] _set_remove_obj
<<dead>> 	0x00000010	[ 67] _set_symmetric_difference_obj
<<dead>> 	0x00000010	[ 67] _set_symmetric_difference_update_obj
<<dead>> 	0x00000010	[ 67] _set_union_obj
<<dead>> 	0x00000006	[ 67] literal string: set()
<<dead>> 	0x00000002	[ 67] literal string: {
<<dead>> 	0x00000003	[ 67] literal string: , 
<<dead>> 	0x00000002	[ 67] literal string: }
<<dead>> 	0x00000016	[ 67] literal string: pop from an empty set
<<dead>> 	0x00000017	[ 68] _singleton_print
<<dead>> 	0x00000078	[ 68] _mp_type_singleton
<<dead>> 	0x00000010	[ 68] _mp_const_ellipsis_obj
<<dead>> 	0x00000003	[ 68] literal string: %q
<<dead>> 	0x00000085	[ 69] _slice_print
<<dead>> 	0x0000003B	[ 69] _mp_obj_new_slice
<<dead>> 	0x00000133	[ 69] _mp_obj_slice_indices
<<dead>> 	0x00000078	[ 69] _mp_type_slice
<<dead>> 	0x00000019	[ 69] literal string: slice step can't be zero
<<dead>> 	0x00000007	[ 69] literal string: slice(
<<dead>> 	0x00000003	[ 69] literal string: , 
<<dead>> 	0x00000002	[ 69] literal string: )
<<dead>> 	0x00000147	[ 70] _mp_str_print_quoted
<<dead>> 	0x00000189	[ 70] _mp_obj_str_make_new
<<dead>> 	0x000000A7	[ 70] _mp_obj_new_str_from_vstr
<<dead>> 	0x0000006A	[ 70] _mp_obj_new_str_copy
<<dead>> 	0x0000003A	[ 70] _mp_obj_new_str
<<dead>> 	0x0000008E	[ 70] _find_subbytes
<<dead>> 	0x000009EF	[ 70] _mp_obj_str_binary_op
<<dead>> 	0x00000036	[ 70] _bad_implicit_conversion
<<dead>> 	0x000001A1	[ 70] _str_join
<<dead>> 	0x0000024D	[ 70] _mp_obj_str_split
<<dead>> 	0x00000026	[ 70] _mp_obj_new_str_of_type
<<dead>> 	0x0000005F	[ 70] _mp_obj_str_get_data
<<dead>> 	0x000001E9	[ 70] _str_rsplit
<<dead>> 	0x00000011	[ 70] _str_find
<<dead>> 	0x00000011	[ 70] _str_rfind
<<dead>> 	0x00000014	[ 70] _str_index
<<dead>> 	0x00000014	[ 70] _str_rindex
<<dead>> 	0x000000C3	[ 70] _str_startswith
<<dead>> 	0x0000009A	[ 70] _str_endswith
<<dead>> 	0x00000015	[ 70] _str_strip
<<dead>> 	0x00000012	[ 70] _str_lstrip
<<dead>> 	0x00000015	[ 70] _str_rstrip
<<dead>> 	0x0000008D	[ 70] _mp_obj_str_format
<<dead>> 	0x00000AE2	[ 70] _mp_obj_str_format_helper
<<dead>> 	0x000002B5	[ 70] _str_replace
<<dead>> 	0x00000165	[ 70] _str_count
<<dead>> 	0x00000014	[ 70] _str_lower
<<dead>> 	0x00000014	[ 70] _str_upper
<<dead>> 	0x00000070	[ 70] _str_isspace
<<dead>> 	0x00000070	[ 70] _str_isalpha
<<dead>> 	0x00000070	[ 70] _str_isdigit
<<dead>> 	0x00000095	[ 70] _str_isupper
<<dead>> 	0x00000095	[ 70] _str_islower
<<dead>> 	0x00000064	[ 70] _bytes_decode
<<dead>> 	0x0000005F	[ 70] _str_encode
<<dead>> 	0x0000005C	[ 70] _mp_obj_str_get_buffer
<<dead>> 	0x00000083	[ 70] _str_print
<<dead>> 	0x00000241	[ 70] _bytes_make_new
<<dead>> 	0x000000D0	[ 70] _bytes_subscr
<<dead>> 	0x0000002A	[ 70] _mp_obj_new_bytes_iterator
<<dead>> 	0x00000017	[ 70] _mp_obj_new_bytes
<<dead>> 	0x00000013	[ 70] _mp_obj_new_str_via_qstr
<<dead>> 	0x00000048	[ 70] _mp_obj_str_intern
<<dead>> 	0x0000002C	[ 70] _mp_obj_str_intern_checked
<<dead>> 	0x000000F7	[ 70] _mp_obj_str_equal
<<dead>> 	0x0000003C	[ 70] _mp_obj_str_get_qstr
<<dead>> 	0x00000046	[ 70] _mp_obj_str_get_str
<<dead>> 	0x0000017D	[ 70] _str_finder
<<dead>> 	0x000001FE	[ 70] _str_uni_strip
<<dead>> 	0x00000099	[ 70] _str_caseconv
<<dead>> 	0x00000064	[ 70] _bytes_it_iternext
<<dead>> 	0x00000023	[ 70] _mp_obj_str_format_helper.cold.1
<<dead>> 	0x00000023	[ 70] _str_replace.cold.1
<<dead>> 	0x00000023	[ 70] _str_uni_strip.cold.1
<<dead>> 	0x00000023	[ 70] _str_uni_strip.cold.2
<<dead>> 	0x00000008	[ 70] 8-byte-literal
<<dead>> 	0x00000003	[ 70] literal string: %c
<<dead>> 	0x00000004	[ 70] literal string: \%c
<<dead>> 	0x00000003	[ 70] literal string: \\
<<dead>> 	0x00000003	[ 70] literal string: \n
<<dead>> 	0x00000003	[ 70] literal string: \r
<<dead>> 	0x00000003	[ 70] literal string: \t
<<dead>> 	0x00000007	[ 70] literal string: \x%02x
<<dead>> 	0x00000010	[ 70] literal string: empty separator
<<dead>> 	0x00000001	[ 70] literal string: 
<<dead>> 	0x00000045	[ 70] literal string: join expects a list of str/bytes objects consistent with self object
<<dead>> 	0x0000000F	[ 70] literal string: rsplit(None,n)
<<dead>> 	0x00000014	[ 70] literal string: substring not found
<<dead>> 	0x00000012	[ 70] literal string: start/end indices
<<dead>> 	0x0000000E	[ 70] literal string: str_uni_strip
<<dead>> 	0x00000009	[ 70] literal string: objstr.c
<<dead>> 	0x0000002A	[ 70] literal string: last_good_char_pos >= first_good_char_pos
<<dead>> 	0x00000019	[ 70] literal string: first_good_char_pos == 0
<<dead>> 	0x00000028	[ 70] literal string: single '}' encountered in format string
<<dead>> 	0x00000035	[ 70] literal string: end of format while looking for conversion specifier
<<dead>> 	0x00000020	[ 70] literal string: unknown conversion specifier %c
<<dead>> 	0x00000018	[ 70] literal string: unmatched '{' in format
<<dead>> 	0x00000024	[ 70] literal string: expected ':' after format specifier
<<dead>> 	0x0000004A	[ 70] literal string: can't switch from automatic field numbering to manual field specification
<<dead>> 	0x00000019	[ 70] literal string: tuple index out of range
<<dead>> 	0x0000001D	[ 70] literal string: attributes not supported yet
<<dead>> 	0x0000004A	[ 70] literal string: can't switch from manual field specification to automatic field numbering
<<dead>> 	0x00000019	[ 70] literal string: mp_obj_str_format_helper
<<dead>> 	0x00000012	[ 70] literal string: conversion == 'r'
<<dead>> 	0x00000019	[ 70] literal string: invalid format specifier
<<dead>> 	0x0000002C	[ 70] literal string: sign not allowed in string format specifier
<<dead>> 	0x00000033	[ 70] literal string: sign not allowed with integer format specifier 'c'
<<dead>> 	0x00000031	[ 70] literal string: unknown format code '%c' for object of type '%s'
<<dead>> 	0x00000035	[ 70] literal string: '=' alignment not allowed in string format specifier
<<dead>> 	0x00000005	[ 70] literal string: <>=^
<<dead>> 	0x00000010	[ 70] literal string: bcdeEfFgGnosxX%
<<dead>> 	0x00000014	[ 70] literal string: format needs a dict
<<dead>> 	0x00000016	[ 70] literal string: incomplete format key
<<dead>> 	0x00000012	[ 70] literal string: incomplete format
<<dead>> 	0x00000023	[ 70] literal string: format string needs more arguments
<<dead>> 	0x00000015	[ 70] literal string: %c needs int or char
<<dead>> 	0x0000000F	[ 70] literal string: integer needed
<<dead>> 	0x00000035	[ 70] literal string: unsupported format character '%c' (0x%x) at index %d
<<dead>> 	0x0000002B	[ 70] literal string: format string didn't convert all arguments
<<dead>> 	0x0000000C	[ 70] literal string: str_replace
<<dead>> 	0x0000000D	[ 70] literal string: data != NULL
<<dead>> 	0x00000002	[ 70] literal string: b
<<dead>> 	0x00000019	[ 70] literal string: bytes value out of range
<<dead>> 	0x0000001A	[ 70] literal string: wrong number of arguments
<<dead>> 	0x00000031	[ 70] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x0000002B	[ 70] literal string: can't convert '%q' object to %q implicitly
<<dead>> 	0x00000020	[ 70] _mp_const_empty_bytes_obj
<<dead>> 	0x00000010	[ 70] _str_join_obj
<<dead>> 	0x00000018	[ 70] _str_split_obj
<<dead>> 	0x00000018	[ 70] _str_rsplit_obj
<<dead>> 	0x00000018	[ 70] _str_find_obj
<<dead>> 	0x00000018	[ 70] _str_rfind_obj
<<dead>> 	0x00000018	[ 70] _str_index_obj
<<dead>> 	0x00000018	[ 70] _str_rindex_obj
<<dead>> 	0x00000018	[ 70] _str_startswith_obj
<<dead>> 	0x00000018	[ 70] _str_endswith_obj
<<dead>> 	0x00000018	[ 70] _str_strip_obj
<<dead>> 	0x00000018	[ 70] _str_lstrip_obj
<<dead>> 	0x00000018	[ 70] _str_rstrip_obj
<<dead>> 	0x00000018	[ 70] _str_format_obj
<<dead>> 	0x00000018	[ 70] _str_replace_obj
<<dead>> 	0x00000018	[ 70] _str_count_obj
<<dead>> 	0x00000010	[ 70] _str_lower_obj
<<dead>> 	0x00000010	[ 70] _str_upper_obj
<<dead>> 	0x00000010	[ 70] _str_isspace_obj
<<dead>> 	0x00000010	[ 70] _str_isalpha_obj
<<dead>> 	0x00000010	[ 70] _str_isdigit_obj
<<dead>> 	0x00000010	[ 70] _str_isupper_obj
<<dead>> 	0x00000010	[ 70] _str_islower_obj
<<dead>> 	0x00000018	[ 70] _bytes_decode_obj
<<dead>> 	0x00000018	[ 70] _str_encode_obj
<<dead>> 	0x00000080	[ 70] _mp_type_bytes
<<dead>> 	0x00000170	[ 70] _str8_locals_dict_table
<<dead>> 	0x00000020	[ 70] _str8_locals_dict
<<dead>> 	0x00000007	[ 70] _str_uni_strip.whitespace
<<dead>> 	0x00000108	[ 71] _str_index_to_ptr
<<dead>> 	0x000001AE	[ 71] _uni_print
<<dead>> 	0x0000006A	[ 71] _uni_unary_op
<<dead>> 	0x00000167	[ 71] _str_subscr
<<dead>> 	0x0000002A	[ 71] _mp_obj_new_str_iterator
<<dead>> 	0x0000007E	[ 71] _str_it_iternext
<<dead>> 	0x00000023	[ 71] _str_subscr.cold.1
<<dead>> 	0x00000028	[ 71] literal string: string indices must be integers, not %s
<<dead>> 	0x0000001A	[ 71] literal string: string index out of range
<<dead>> 	0x00000003	[ 71] literal string: %c
<<dead>> 	0x00000004	[ 71] literal string: \%c
<<dead>> 	0x00000003	[ 71] literal string: \\
<<dead>> 	0x00000003	[ 71] literal string: \n
<<dead>> 	0x00000003	[ 71] literal string: \r
<<dead>> 	0x00000003	[ 71] literal string: \t
<<dead>> 	0x00000007	[ 71] literal string: \x%02x
<<dead>> 	0x00000007	[ 71] literal string: \u%04x
<<dead>> 	0x00000007	[ 71] literal string: \U%08x
<<dead>> 	0x0000000B	[ 71] literal string: str_subscr
<<dead>> 	0x00000010	[ 71] literal string: objstrunicode.c
<<dead>> 	0x00000015	[ 71] literal string: type == &mp_type_str
<<dead>> 	0x00000031	[ 71] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000080	[ 71] _mp_type_str
<<dead>> 	0x00000170	[ 71] _struni_locals_dict_table
<<dead>> 	0x00000020	[ 71] _struni_locals_dict
<<dead>> 	0x00000089	[ 72] _mp_obj_tuple_print
<<dead>> 	0x00000089	[ 72] _mp_obj_tuple_unary_op
<<dead>> 	0x000001BF	[ 72] _mp_obj_tuple_binary_op
<<dead>> 	0x00000050	[ 72] _mp_obj_new_tuple
<<dead>> 	0x000000CB	[ 72] _mp_obj_tuple_subscr
<<dead>> 	0x000000E6	[ 72] _mp_obj_tuple_make_new
<<dead>> 	0x0000002A	[ 72] _mp_obj_tuple_getiter
<<dead>> 	0x00000043	[ 72] _mp_obj_tuple_get
<<dead>> 	0x00000021	[ 72] _mp_obj_tuple_del
<<dead>> 	0x00000024	[ 72] _tuple_it_iternext
<<dead>> 	0x00000015	[ 72] _tuple_count
<<dead>> 	0x0000001B	[ 72] _tuple_index
<<dead>> 	0x00000023	[ 72] _mp_obj_tuple_get.cold.1
<<dead>> 	0x00000023	[ 72] _mp_obj_tuple_del.cold.1
<<dead>> 	0x00000003	[ 72] literal string: , 
<<dead>> 	0x00000002	[ 72] literal string: (
<<dead>> 	0x00000002	[ 72] literal string: ,
<<dead>> 	0x00000002	[ 72] literal string: )
<<dead>> 	0x00000031	[ 72] literal string: only slices with step=1 (aka None) are supported
<<dead>> 	0x00000011	[ 72] literal string: mp_obj_tuple_get
<<dead>> 	0x0000000B	[ 72] literal string: objtuple.c
<<dead>> 	0x00000024	[ 72] literal string: mp_obj_is_tuple_compatible(self_in)
<<dead>> 	0x00000011	[ 72] literal string: mp_obj_tuple_del
<<dead>> 	0x00000028	[ 72] literal string: mp_obj_is_type(self_in, &mp_type_tuple)
<<dead>> 	0x00000010	[ 72] _mp_const_empty_tuple_obj
<<dead>> 	0x00000080	[ 72] _mp_type_tuple
<<dead>> 	0x00000020	[ 72] _tuple_locals_dict_table
<<dead>> 	0x00000020	[ 72] _tuple_locals_dict
<<dead>> 	0x00000018	[ 72] _tuple_index_obj
<<dead>> 	0x00000010	[ 72] _tuple_count_obj
<<dead>> 	0x00000054	[ 73] _mp_obj_new_instance
<<dead>> 	0x000000B0	[ 73] _instance_count_native_bases
<<dead>> 	0x00000245	[ 73] _mp_obj_instance_make_new
<<dead>> 	0x000001F2	[ 73] _mp_obj_class_lookup
<<dead>> 	0x00000069	[ 73] _mp_obj_instance_is_callable
<<dead>> 	0x000000D2	[ 73] _mp_obj_instance_call
<<dead>> 	0x000000BE	[ 73] _mp_obj_instance_getiter
<<dead>> 	0x00000017	[ 73] _type_print
<<dead>> 	0x0000005D	[ 73] _type_make_new
<<dead>> 	0x00000029	[ 73] _type_call
<<dead>> 	0x000001D3	[ 73] _type_attr
<<dead>> 	0x00000293	[ 73] _mp_obj_new_type
<<dead>> 	0x0000013C	[ 73] _instance_print
<<dead>> 	0x00000102	[ 73] _instance_unary_op
<<dead>> 	0x000000FC	[ 73] _instance_binary_op
<<dead>> 	0x00000290	[ 73] _mp_obj_instance_attr
<<dead>> 	0x000000F3	[ 73] _instance_subscr
<<dead>> 	0x00000098	[ 73] _instance_get_buffer
<<dead>> 	0x00000053	[ 73] _static_class_method_make_new
<<dead>> 	0x00000057	[ 73] _super_print
<<dead>> 	0x00000050	[ 73] _super_make_new
<<dead>> 	0x0000016C	[ 73] _super_attr
<<dead>> 	0x0000002F	[ 73] _mp_load_super_method
<<dead>> 	0x00000089	[ 73] _mp_obj_is_subclass_fast
<<dead>> 	0x00000028	[ 73] _mp_builtin_issubclass
<<dead>> 	0x0000001F	[ 73] _mp_builtin_isinstance
<<dead>> 	0x00000036	[ 73] _mp_obj_cast_to_native_base
<<dead>> 	0x0000005B	[ 73] _native_base_init_wrapper
<<dead>> 	0x000000BE	[ 73] _mp_obj_is_subclass
<<dead>> 	0x00000021	[ 73] _mp_obj_new_instance.cold.1
<<dead>> 	0x00000021	[ 73] _instance_count_native_bases.cold.1
<<dead>> 	0x00000023	[ 73] _mp_obj_instance_make_new.cold.1
<<dead>> 	0x00000023	[ 73] _mp_obj_class_lookup.cold.1
<<dead>> 	0x00000023	[ 73] _mp_obj_class_lookup.cold.2
<<dead>> 	0x00000023	[ 73] _mp_obj_class_lookup.cold.3
<<dead>> 	0x00000023	[ 73] _mp_obj_class_lookup.cold.4
<<dead>> 	0x00000023	[ 73] _mp_obj_class_lookup.cold.5
<<dead>> 	0x00000023	[ 73] _type_attr.cold.1
<<dead>> 	0x00000023	[ 73] _type_attr.cold.2
<<dead>> 	0x00000023	[ 73] _mp_obj_new_type.cold.1
<<dead>> 	0x00000023	[ 73] _mp_obj_instance_attr.cold.1
<<dead>> 	0x00000023	[ 73] _static_class_method_make_new.cold.1
<<dead>> 	0x00000023	[ 73] _super_attr.cold.1
<<dead>> 	0x00000023	[ 73] _super_attr.cold.2
<<dead>> 	0x00000023	[ 73] _super_attr.cold.3
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000010	[ 73] 16-byte-literal
<<dead>> 	0x00000014	[ 73] literal string: mp_obj_new_instance
<<dead>> 	0x0000000A	[ 73] literal string: objtype.c
<<dead>> 	0x00000015	[ 73] literal string: num_native_bases < 2
<<dead>> 	0x00000019	[ 73] literal string: mp_obj_instance_make_new
<<dead>> 	0x0000001E	[ 73] literal string: mp_obj_is_instance_type(self)
<<dead>> 	0x00000028	[ 73] literal string: __init__() should return None, not '%s'
<<dead>> 	0x0000001B	[ 73] literal string: '%s' object isn't callable
<<dead>> 	0x00000028	[ 73] literal string: type '%q' isn't an acceptable base type
<<dead>> 	0x0000002E	[ 73] literal string: multiple bases have instance lay-out conflict
<<dead>> 	0x0000001C	[ 73] literal string: instance_count_native_bases
<<dead>> 	0x00000025	[ 73] literal string: mp_obj_is_type(*item, &mp_type_type)
<<dead>> 	0x00000014	[ 73] literal string: mp_obj_class_lookup
<<dead>> 	0x0000001F	[ 73] literal string: lookup->dest[0] == MP_OBJ_NULL
<<dead>> 	0x0000001F	[ 73] literal string: lookup->dest[1] == MP_OBJ_NULL
<<dead>> 	0x00000042	[ 73] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(type->locals_dict))
<<dead>> 	0x0000000D	[ 73] literal string: <class '%q'>
<<dead>> 	0x0000001C	[ 73] literal string: type takes 1 or 3 arguments
<<dead>> 	0x0000001C	[ 73] literal string: can't create '%q' instances
<<dead>> 	0x0000000A	[ 73] literal string: type_attr
<<dead>> 	0x00000027	[ 73] literal string: mp_obj_is_type(self_in, &mp_type_type)
<<dead>> 	0x00000042	[ 73] literal string: mp_obj_is_dict_or_ordereddict(MP_OBJ_FROM_PTR(self->locals_dict))
<<dead>> 	0x00000035	[ 73] literal string: can't add special method to already-subclassed class
<<dead>> 	0x00000012	[ 73] literal string: <%s object at %p>
<<dead>> 	0x0000001A	[ 73] literal string: mp_obj_instance_load_attr
<<dead>> 	0x00000032	[ 73] literal string: mp_obj_is_instance_type(mp_obj_get_type(self_in))
<<dead>> 	0x00000015	[ 73] literal string: unreadable attribute
<<dead>> 	0x00000016	[ 73] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 73] literal string: obj.h
<<dead>> 	0x00000011	[ 73] literal string: pos < map->alloc
<<dead>> 	0x00000009	[ 73] literal string: <super: 
<<dead>> 	0x00000003	[ 73] literal string: , 
<<dead>> 	0x00000002	[ 73] literal string: >
<<dead>> 	0x0000000B	[ 73] literal string: super_attr
<<dead>> 	0x00000028	[ 73] literal string: mp_obj_is_type(self_in, &mp_type_super)
<<dead>> 	0x0000002A	[ 73] literal string: mp_obj_is_type(self->type, &mp_type_type)
<<dead>> 	0x00000028	[ 73] literal string: mp_obj_is_type(items[i], &mp_type_type)
<<dead>> 	0x00000023	[ 73] literal string: issubclass() arg 1 must be a class
<<dead>> 	0x00000039	[ 73] literal string: issubclass() arg 2 must be a class or a tuple of classes
<<dead>> 	0x0000001D	[ 73] literal string: static_class_method_make_new
<<dead>> 	0x0000003E	[ 73] literal string: self == &mp_type_staticmethod || self == &mp_type_classmethod
<<dead>> 	0x00000018	[ 73] _native_base_init_wrapper_obj
<<dead>> 	0x00000078	[ 73] _mp_type_type
<<dead>> 	0x00000078	[ 73] _mp_type_staticmethod
<<dead>> 	0x00000078	[ 73] _mp_type_super
<<dead>> 	0x00000010	[ 73] _mp_builtin_issubclass_obj
<<dead>> 	0x00000010	[ 73] _mp_builtin_isinstance_obj
<<dead>> 	0x00000078	[ 73] _mp_type_classmethod
<<dead>> 	0x00000010	[ 73] _mp_unary_op_method_name
<<dead>> 	0x00000025	[ 73] _mp_binary_op_method_name
<<dead>> 	0x00000066	[ 74] _zip_make_new
<<dead>> 	0x00000061	[ 74] _zip_iternext
<<dead>> 	0x00000078	[ 74] _mp_type_zip
<<dead>> 	0x00000027	[ 75] _op_getitem
<<dead>> 	0x00000031	[ 75] _op_setitem
<<dead>> 	0x00000024	[ 75] _op_delitem
<<dead>> 	0x00000027	[ 75] _op_contains
<<dead>> 	0x00000010	[ 75] _mp_op_getitem_obj
<<dead>> 	0x00000010	[ 75] _mp_op_setitem_obj
<<dead>> 	0x00000010	[ 75] _mp_op_delitem_obj
<<dead>> 	0x00000010	[ 75] _mp_op_contains_obj
<<dead>> 	0x0000003F	[ 76] _mp_seq_multiply
<<dead>> 	0x00000056	[ 76] _mp_seq_get_fast_slice_indexes
<<dead>> 	0x00000069	[ 76] _mp_seq_extract_slice
<<dead>> 	0x00000091	[ 76] _mp_seq_cmp_bytes
<<dead>> 	0x000000E4	[ 76] _mp_seq_cmp_objs
<<dead>> 	0x000000B3	[ 76] _mp_seq_index_obj
<<dead>> 	0x0000005B	[ 76] _mp_seq_count_obj
<<dead>> 	0x00000017	[ 76] literal string: object not in sequence
<<dead>> 	0x0000008D	[ 77] _mp_stream_rw
<<dead>> 	0x00000053	[ 77] _mp_get_stream_raise
<<dead>> 	0x0000000C	[ 77] _stream_read
<<dead>> 	0x0000000F	[ 77] _stream_read1
<<dead>> 	0x0000002D	[ 77] _mp_stream_write
<<dead>> 	0x0000000F	[ 77] _mp_stream_write_adaptor
<<dead>> 	0x00000094	[ 77] _stream_write_method
<<dead>> 	0x0000003F	[ 77] _stream_write1_method
<<dead>> 	0x000000B7	[ 77] _stream_readinto
<<dead>> 	0x000000DE	[ 77] _stream_unbuffered_readline
<<dead>> 	0x00000072	[ 77] _stream_unbuffered_readlines
<<dead>> 	0x00000034	[ 77] _mp_stream_unbuffered_iter
<<dead>> 	0x00000036	[ 77] _mp_stream_close
<<dead>> 	0x00000092	[ 77] _stream_seek
<<dead>> 	0x00000052	[ 77] _stream_tell
<<dead>> 	0x00000036	[ 77] _stream_flush
<<dead>> 	0x0000008F	[ 77] _stream_ioctl
<<dead>> 	0x00000269	[ 77] _stream_read_generic
<<dead>> 	0x0000001F	[ 77] literal string: stream operation not supported
<<dead>> 	0x00000018	[ 77] _mp_stream_read_obj
<<dead>> 	0x00000018	[ 77] _mp_stream_read1_obj
<<dead>> 	0x00000018	[ 77] _mp_stream_write_obj
<<dead>> 	0x00000010	[ 77] _mp_stream_write1_obj
<<dead>> 	0x00000018	[ 77] _mp_stream_readinto_obj
<<dead>> 	0x00000018	[ 77] _mp_stream_unbuffered_readline_obj
<<dead>> 	0x00000010	[ 77] _mp_stream_unbuffered_readlines_obj
<<dead>> 	0x00000010	[ 77] _mp_stream_close_obj
<<dead>> 	0x00000018	[ 77] _mp_stream_seek_obj
<<dead>> 	0x00000010	[ 77] _mp_stream_tell_obj
<<dead>> 	0x00000010	[ 77] _mp_stream_flush_obj
<<dead>> 	0x00000018	[ 77] _mp_stream_ioctl_obj
<<dead>> 	0x0000020C	[ 78] _mp_binary_get_size
<<dead>> 	0x00000128	[ 78] _mp_binary_get_val_array
<<dead>> 	0x00000056	[ 78] _mp_binary_get_int
<<dead>> 	0x00000133	[ 78] _mp_binary_get_val
<<dead>> 	0x0000003D	[ 78] _mp_binary_set_int
<<dead>> 	0x00000107	[ 78] _mp_binary_set_val
<<dead>> 	0x000000B8	[ 78] _mp_binary_set_val_array
<<dead>> 	0x000000DB	[ 78] _mp_binary_set_val_array_from_int
<<dead>> 	0x0000000D	[ 78] literal string: bad typecode
<<dead>> 	0x0000004B	[ 79] _mp_obj_is_package
<<dead>> 	0x000002DF	[ 79] _mp_builtin___import__
<<dead>> 	0x0000017A	[ 79] _evaluate_relative_import
<<dead>> 	0x00000054	[ 79] _stat_dir_or_file
<<dead>> 	0x00000033	[ 79] _do_load
<<dead>> 	0x00000023	[ 79] _evaluate_relative_import.cold.1
<<dead>> 	0x00000018	[ 79] _mp_builtin___import___obj
<<dead>> 	0x00000019	[ 79] literal string: evaluate_relative_import
<<dead>> 	0x00000010	[ 79] literal string: builtinimport.c
<<dead>> 	0x00000027	[ 79] literal string: current_module_name_obj != MP_OBJ_NULL
<<dead>> 	0x0000001E	[ 79] literal string: can't perform relative import
<<dead>> 	0x00000015	[ 79] literal string: no module named '%q'
<<dead>> 	0x0000000D	[ 79] literal string: /__init__.py
<<dead>> 	0x00000004	[ 79] literal string: .py
<<dead>> 	0x0000000F	[ 80] _mp_builtin_eval
<<dead>> 	0x0000000F	[ 80] _mp_builtin_exec
<<dead>> 	0x000000B4	[ 80] _eval_exec_helper
<<dead>> 	0x00000018	[ 80] _mp_builtin_eval_obj
<<dead>> 	0x00000018	[ 80] _mp_builtin_exec_obj
<<dead>> 	0x000000EC	[ 81] _mp_builtin___build_class__
<<dead>> 	0x00000012	[ 81] _mp_builtin_abs
<<dead>> 	0x00000041	[ 81] _mp_builtin_all
<<dead>> 	0x00000041	[ 81] _mp_builtin_any
<<dead>> 	0x0000004C	[ 81] _mp_builtin_bin
<<dead>> 	0x00000016	[ 81] _mp_builtin_callable
<<dead>> 	0x000000D2	[ 81] _mp_builtin_chr
<<dead>> 	0x00000102	[ 81] _mp_builtin_dir
<<dead>> 	0x00000015	[ 81] _mp_builtin_divmod
<<dead>> 	0x00000012	[ 81] _mp_builtin_hash
<<dead>> 	0x00000017	[ 81] _mp_builtin_hex
<<dead>> 	0x0000000C	[ 81] _mp_builtin_iter
<<dead>> 	0x0000000F	[ 81] _mp_builtin_max
<<dead>> 	0x0000000C	[ 81] _mp_builtin_min
<<dead>> 	0x00000020	[ 81] _mp_builtin_next
<<dead>> 	0x00000017	[ 81] _mp_builtin_oct
<<dead>> 	0x00000090	[ 81] _mp_builtin_ord
<<dead>> 	0x0000002B	[ 81] _mp_builtin_pow
<<dead>> 	0x000000C9	[ 81] _mp_builtin_print
<<dead>> 	0x0000003E	[ 81] _mp_builtin___repl_print__
<<dead>> 	0x00000052	[ 81] _mp_builtin_repr
<<dead>> 	0x0000009E	[ 81] _mp_builtin_round
<<dead>> 	0x0000005A	[ 81] _mp_builtin_sum
<<dead>> 	0x00000057	[ 81] _mp_builtin_sorted
<<dead>> 	0x00000091	[ 81] _mp_builtin_getattr
<<dead>> 	0x0000002D	[ 81] _mp_builtin_setattr
<<dead>> 	0x0000002A	[ 81] _mp_builtin_delattr
<<dead>> 	0x00000069	[ 81] _mp_builtin_hasattr
<<dead>> 	0x00000011	[ 81] _mp_builtin_globals
<<dead>> 	0x00000011	[ 81] _mp_builtin_locals
<<dead>> 	0x0000014F	[ 81] _mp_builtin_min_max
<<dead>> 	0x00000021	[ 81] _mp_builtin___build_class__.cold.1
<<dead>> 	0x00000023	[ 81] _mp_builtin_dir.cold.1
<<dead>> 	0x00000018	[ 81] _mp_builtin___build_class___obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_abs_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_all_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_any_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_bin_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_callable_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_chr_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_dir_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_divmod_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_hash_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_hex_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_iter_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_max_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_min_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_next_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_oct_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_ord_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_pow_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_print_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin___repl_print___obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_repr_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_round_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_sum_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_sorted_obj
<<dead>> 	0x00000018	[ 81] _mp_builtin_getattr_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_setattr_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_delattr_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_hasattr_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_globals_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_locals_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_id_obj
<<dead>> 	0x00000010	[ 81] _mp_builtin_len_obj
<<dead>> 	0x000005B0	[ 81] _mp_module_builtins_globals_table
<<dead>> 	0x00000020	[ 81] _mp_module_builtins_globals
<<dead>> 	0x00000010	[ 81] _mp_module_builtins
<<dead>> 	0x0000001B	[ 81] literal string: mp_builtin___build_class__
<<dead>> 	0x0000000E	[ 81] literal string: modbuiltins.c
<<dead>> 	0x0000000C	[ 81] literal string: 2 <= n_args
<<dead>> 	0x00000021	[ 81] literal string: chr() arg not in range(0x110000)
<<dead>> 	0x00000016	[ 81] literal string: mp_map_slot_is_filled
<<dead>> 	0x00000006	[ 81] literal string: obj.h
<<dead>> 	0x00000011	[ 81] literal string: pos < map->alloc
<<dead>> 	0x00000019	[ 81] literal string: arg is an empty sequence
<<dead>> 	0x0000003A	[ 81] literal string: ord() expected a character, but string of length %d found
<<dead>> 	0x0000001A	[ 81] literal string: 3-arg pow() not supported
<<dead>> 	0x00000002	[ 81] literal string: \n
<<dead>> 	0x0000002B	[ 81] literal string: must use keyword argument for key function
<<dead>> 	0x00000020	[ 81] _mp_builtin_print.allowed_args
<<dead>> 	0x0000003C	[ 82] _mp_micropython_opt_level
<<dead>> 	0x00000010	[ 82] _mp_micropython_heap_lock
<<dead>> 	0x0000001C	[ 82] _mp_micropython_heap_unlock
<<dead>> 	0x00000010	[ 82] _mp_module_micropython
<<dead>> 	0x00000050	[ 82] _mp_module_micropython_globals_table
<<dead>> 	0x00000020	[ 82] _mp_module_micropython_globals
<<dead>> 	0x00000018	[ 82] _mp_micropython_opt_level_obj
<<dead>> 	0x00000010	[ 82] _mp_micropython_heap_lock_obj
<<dead>> 	0x00000010	[ 82] _mp_micropython_heap_unlock_obj
<<dead>> 	0x0000002A	[ 83] _struct_calcsize
<<dead>> 	0x000001DD	[ 83] _struct_unpack_from
<<dead>> 	0x0000008C	[ 83] _struct_pack
<<dead>> 	0x000000B3	[ 83] _struct_pack_into
<<dead>> 	0x000000F0	[ 83] _calc_size_items
<<dead>> 	0x00000049	[ 83] _get_fmt_num
<<dead>> 	0x00000172	[ 83] _struct_pack_into_internal
<<dead>> 	0x00000010	[ 83] _struct_calcsize_obj
<<dead>> 	0x00000018	[ 83] _struct_unpack_from_obj
<<dead>> 	0x00000018	[ 83] _struct_pack_obj
<<dead>> 	0x00000018	[ 83] _struct_pack_into_obj
<<dead>> 	0x00000018	[ 83] _mp_module_ustruct
<<dead>> 	0x00000060	[ 83] _mp_module_struct_globals_table
<<dead>> 	0x00000020	[ 83] _mp_module_struct_globals
<<dead>> 	0x00000011	[ 83] literal string: buffer too small
<<dead>> 	0x00001B90	[ 84] _mp_execute_bytecode
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.1
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.2
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.3
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.4
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.5
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.6
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.7
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.8
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.9
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.10
<<dead>> 	0x00000030	[ 84] _mp_execute_bytecode.cold.11
<<dead>> 	0x00000023	[ 84] _mp_execute_bytecode.cold.12
<<dead>> 	0x0000002C	[ 84] literal string: local variable referenced before assignment
<<dead>> 	0x00000014	[ 84] literal string: mp_execute_bytecode
<<dead>> 	0x00000005	[ 84] literal string: vm.c
<<dead>> 	0x00000024	[ 84] literal string: mp_obj_is_exception_instance(TOP())
<<dead>> 	0x00000014	[ 84] literal string: exc_sp >= exc_stack
<<dead>> 	0x00000029	[ 84] literal string: &sp[-1] == MP_TAGPTR_PTR(exc_sp->val_sp)
<<dead>> 	0x00000040	[ 84] literal string: sp[-1] == mp_const_none || mp_obj_is_exception_instance(sp[-1])
<<dead>> 	0x00000018	[ 84] literal string: exc_sp == exc_stack - 1
<<dead>> 	0x0000001F	[ 84] literal string: no active exception to reraise
<<dead>> 	0x00000021	[ 84] literal string: exception chaining not supported
<<dead>> 	0x00000023	[ 84] literal string: ret_kind == MP_VM_RETURN_EXCEPTION
<<dead>> 	0x0000003F	[ 84] literal string: !EXC_MATCH(ret_value, MP_OBJ_FROM_PTR(&mp_type_StopIteration))
<<dead>> 	0x00000007	[ 84] literal string: opcode
<<dead>> 	0x0000008E	[ 85] _mp_encode_uint
<<dead>> 	0x00000027	[ 85] _mp_decode_uint
<<dead>> 	0x00000021	[ 85] _mp_decode_uint_value
<<dead>> 	0x00000012	[ 85] _mp_decode_uint_skip
<<dead>> 	0x0000001D	[ 85] _mp_setup_code_state
<<dead>> 	0x0000059A	[ 85] _mp_setup_code_state_helper
<<dead>> 	0x00000012	[ 85] _mp_setup_code_state_native
<<dead>> 	0x00000030	[ 85] _fun_pos_args_mismatch
<<dead>> 	0x0000002F	[ 85] literal string: function got multiple values for argument '%q'
<<dead>> 	0x00000021	[ 85] literal string: unexpected keyword argument '%q'
<<dead>> 	0x00000032	[ 85] literal string: function missing required positional argument #%d
<<dead>> 	0x00000030	[ 85] literal string: function missing required keyword argument '%q'
<<dead>> 	0x00000027	[ 85] literal string: function missing keyword-only argument
<<dead>> 	0x00000035	[ 85] literal string: %q() takes %d positional arguments but %d were given
<<dead>> 	0x00000080	[ 86] _mp_small_int_mul_overflow
<<dead>> 	0x00000028	[ 86] _mp_small_int_modulo
<<dead>> 	0x0000002E	[ 86] _mp_small_int_floor_divide
<<dead>> 	0x000006D8	[ 87] _main_
<<dead>> 	0x00000037	[ 87] _usage
<<dead>> 	0x0000001F	[ 87] _main
<<dead>> 	0x00000008	[ 87] _mp_import_stat
<<dead>> 	0x00000029	[ 87] _nlr_jump_fail
<<dead>> 	0x0000000F	[ 87] _stderr_print_strn
<<dead>> 	0x00000008	[ 87] _heap_size
<<dead>> 	0x00000003	[ 87] literal string: -X
<<dead>> 	0x0000000A	[ 87] literal string: --version
<<dead>> 	0x00000003	[ 87] literal string: -v
<<dead>> 	0x00000003	[ 87] literal string: -O
<<dead>> 	0x00000003	[ 87] literal string: -o
<<dead>> 	0x00000003	[ 87] literal string: -s
<<dead>> 	0x00000012	[ 87] literal string: -msmall-int-bits=
<<dead>> 	0x00000008	[ 87] literal string: -march=
<<dead>> 	0x00000004	[ 87] literal string: x86
<<dead>> 	0x00000004	[ 87] literal string: x64
<<dead>> 	0x00000006	[ 87] literal string: armv6
<<dead>> 	0x00000007	[ 87] literal string: armv6m
<<dead>> 	0x00000007	[ 87] literal string: armv7m
<<dead>> 	0x00000008	[ 87] literal string: armv7em
<<dead>> 	0x0000000A	[ 87] literal string: armv7emsp
<<dead>> 	0x0000000A	[ 87] literal string: armv7emdp
<<dead>> 	0x00000007	[ 87] literal string: xtensa
<<dead>> 	0x0000000A	[ 87] literal string: xtensawin
<<dead>> 	0x00000016	[ 87] literal string: multiple input files\n
<<dead>> 	0x0000000F	[ 87] literal string: no input file\n
<<dead>> 	0x00000018	[ 87] literal string: FATAL: uncaught NLR %p\n
<<dead>> 	0x0000000E	[ 87] literal string: emit=bytecode
<<dead>> 	0x0000000C	[ 87] literal string: emit=native
<<dead>> 	0x0000000B	[ 87] literal string: emit=viper
<<dead>> 	0x0000000A	[ 87] literal string: heapsize=
<<dead>> 	0x00000277	[ 87] literal string: usage: %s [<opts>] [-X <implopt>] <input filename>\nOptions:\n--version : show version information\n-o : output file for compiled bytecode (defaults to input with .mpy extension)\n-s : source filename to embed in the compiled bytecode (defaults to input file)\n-v : verbose (trace various operations); can be multiple\n-O[N] : apply bytecode optimizations of level N\n\nTarget specific options:\n-msmall-int-bits=number : set the maximum bits used to encode a small-int\n-march=<arch> : set architecture for native emitter; x86, x64, armv6, armv6m, armv7m, armv7em, armv7emsp, armv7emdp, xtensa, xtensawin\n\nImplementation specific options:\n
<<dead>> 	0x0000003E	[ 87] literal string:   heapsize=<n> -- set the heap size for the GC (default %ld)\n
<<dead>> 	0x00000004	[ 87] literal string: mpy
<<dead>> 	0x00000050	[ 87] literal string: MicroPython v1.19.1-3-g12339dca4-dirty on 2023-03-22; mpy-cross emitting mpy v6
<<dead>> 	0x0000003F	[ 87] literal string:   emit={bytecode,native,viper} -- set the default code emitter
<<dead>> 	0x00000010	[ 87] _mp_stderr_print
<<dead>> 	0x00000008	[ 87] _mp_verbose_flag
<<dead>> 	0x00000004	[ 87] _emit_opt
<<dead>> 	0x00000014	[ 88] _gc_collect
<<dead>> 	0x00000074	[ 89] _gc_helper_collect_regs_and_stack
<<dead>> 	0x00000000	[  0] __mh_execute_header
<<dead>> 	0x00000000	[  0] ___dso_handle
<<dead>> 	0x100000000	[  0] page zero
<<dead>> 	0x00000000	[ 90] ____chkstk_darwin
<<dead>> 	0x00000000	[ 90] ___assert_rtn
<<dead>> 	0x00000000	[ 90] ___bzero
<<dead>> 	0x00000000	[ 90] ___error
<<dead>> 	0x00000000	[ 90] ___exp10
<<dead>> 	0x00000000	[ 90] ___memcpy_chk
<<dead>> 	0x00000000	[ 90] ___sincos_stret
<<dead>> 	0x00000000	[ 90] ___stack_chk_fail
<<dead>> 	0x00000000	[ 90] ___stack_chk_guard
<<dead>> 	0x00000000	[ 90] ___stderrp
<<dead>> 	0x00000000	[ 90] _atan2
<<dead>> 	0x00000000	[ 90] _close
<<dead>> 	0x00000000	[ 90] _exit
<<dead>> 	0x00000000	[ 90] _exp
<<dead>> 	0x00000000	[ 90] _fmod
<<dead>> 	0x00000000	[ 90] _fprintf
<<dead>> 	0x00000000	[ 90] _log
<<dead>> 	0x00000000	[ 90] _malloc
<<dead>> 	0x00000000	[ 90] _memchr
<<dead>> 	0x00000000	[ 90] _memcmp
<<dead>> 	0x00000000	[ 90] _memcpy
<<dead>> 	0x00000000	[ 90] _memmove
<<dead>> 	0x00000000	[ 90] _memset
<<dead>> 	0x00000000	[ 90] _nan
<<dead>> 	0x00000000	[ 90] _open
<<dead>> 	0x00000000	[ 90] _pow
<<dead>> 	0x00000000	[ 90] _printf
<<dead>> 	0x00000000	[ 90] _puts
<<dead>> 	0x00000000	[ 90] _read
<<dead>> 	0x00000000	[ 90] _strchr
<<dead>> 	0x00000000	[ 90] _strcmp
<<dead>> 	0x00000000	[ 90] _strlen
<<dead>> 	0x00000000	[ 90] _strncmp
<<dead>> 	0x00000000	[ 90] _strtol
<<dead>> 	0x00000000	[ 90] _write
